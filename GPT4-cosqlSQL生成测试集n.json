[{"db_name": "car_1", "turns": [{"isUser": true, "text": "How many car models are produced by each maker? List the count and the maker full name."}, {"isUser": false, "query": "SELECT Count ( * )  ,  T2.FullName  FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id", "predict": "SELECT cm.FullName, COUNT(ml.ModelId) AS ModelCount\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nGROUP BY cm.FullName\nORDER BY ModelCount DESC;"}, {"isUser": true, "text": "Which models are the most popular?"}, {"isUser": false, "query": "SELECT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id order by count ( * )  desc limit 1", "predict": "SELECT cn.Model, COUNT(*) AS PopularityCount\nFROM car_names cn\nJOIN cars_data cd ON cn.Model = cd.Model\nGROUP BY cn.Model\nORDER BY PopularityCount DESC;"}, {"isUser": true, "text": "Which companies have three or more models?"}, {"isUser": false, "query": "SELECT Count ( * )  ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id having count ( * )   > =  3", "predict": "SELECT cm.FullName, COUNT(ml.ModelId) AS ModelCount\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nGROUP BY cm.FullName\nHAVING ModelCount >= 3\nORDER BY ModelCount DESC;"}]},
{"db_name": "concert_singer", "turns": [{"isUser": true, "text": "please list the singers | did you mean list their names? | yes"}, {"isUser": false, "query": "SELECT name FROM singer", "predict": "SELECT Name FROM singer;"}, {"isUser": true, "text": "can you also  give number of concerts for each singer"}, {"isUser": false, "query": "SELECT T2.name ,  count ( * )  FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id   =   T2.singer_id GROUP BY T2.singer_id", "predict": "SELECT s.Name, COUNT(sc.concert_ID) AS NumberOfConcerts\nFROM singer s\nLEFT JOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID\nGROUP BY s.Singer_ID;"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "Hi!  Can you tell me how many unique template IDs there are?"}, {"isUser": false, "query": "SELECT count ( distinct template_id )  FROM Documents", "predict": "SELECT COUNT(DISTINCT Template_ID) FROM Templates;"}, {"isUser": true, "text": "How many of those 12 template IDs are used by more than one document?"}, {"isUser": false, "query": "SELECT count ( template_id )  FROM Documents GROUP BY template_id HAVING count ( * )   >  1", "predict": "SELECT COUNT(Template_ID) \nFROM (\n    SELECT Template_ID \n    FROM Documents \n    GROUP BY Template_ID \n    HAVING COUNT(Document_ID) > 1\n);"}, {"isUser": true, "text": "Great!  Can you show me the corresponding document that used each of those template IDs on the list you just provided me?"}, {"isUser": false, "query": "SELECT document_id FROM Documents GROUP BY template_id HAVING count ( * )   >  1", "predict": "SELECT Template_ID, Document_ID, Document_Name, Document_Description \nFROM Documents \nWHERE Template_ID IN (\n    SELECT Template_ID \n    FROM Documents \n    GROUP BY Template_ID \n    HAVING COUNT(Document_ID) > 1\n);"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "Find the first name of the students who permanently live in the country Haiti."}, {"isUser": false, "query": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id   =   T2.address_id WHERE T2.country   =   'Haiti'", "predict": "SELECT s.first_name\nFROM Students s\nJOIN Addresses a ON s.permanent_address_id = a.address_id\nWHERE a.country = 'Haiti';"}, {"isUser": true, "text": "Please also find the first name of the students who have the cell phone number 09700166582"}, {"isUser": false, "query": "SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'", "predict": "SELECT first_name\nFROM Students\nWHERE cell_mobile_number = '09700166582';"}, {"isUser": true, "text": "Can you show me the last name and address for him? | Do you want his current address or the permanent address? | current address please"}, {"isUser": false, "query": "SELECT T1.last_name, * FROM Students as T1 join addresses as T2 on T1.current_address_id  =  T2.address_id WHERE T1.cell_mobile_number  =  '09700166582'", "predict": "SELECT s.last_name, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country\nFROM Students s\nJOIN Addresses a ON s.current_address_id = a.address_id\nWHERE s.cell_mobile_number = '09700166582';"}, {"isUser": true, "text": "Ok. Can you also give me his email address?"}, {"isUser": false, "query": "SELECT email_address FROM Students where cell_mobile_number  =  '09700166582'", "predict": "SELECT email_address\nFROM Students\nWHERE cell_mobile_number = '09700166582';"}]},
{"db_name": "concert_singer", "turns": [{"isUser": true, "text": "what is the name of the stadium that does not have a concert in year 2014?"}, {"isUser": false, "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id   =   T2.stadium_id WHERE T1.year   =   2014", "predict": "SELECT Name\nFROM stadium\nWHERE Stadium_ID NOT IN (\n    SELECT Stadium_ID\n    FROM concert\n    WHERE Year = '2014'\n);"}, {"isUser": true, "text": "what is the capacity of Balmoor?"}, {"isUser": false, "query": "select Capacity from stadium where name  =  'Balmoor'", "predict": "SELECT Capacity\nFROM stadium\nWHERE Name = 'Balmoor';"}, {"isUser": true, "text": "what is the theme of Balmoor?"}, {"isUser": false, "query": "select T2.Theme from stadium as T1 join concert as T2 on T1.Stadium_ID  =  T2.Stadium_ID where T1.Name  =  'Balmoor'", "predict": "SELECT Theme\nFROM concert\nJOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID\nWHERE stadium.Name = 'Balmoor';"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "how many female dogs have gone through treatment"}, {"isUser": false, "query": "SELECT count ( * )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "predict": "SELECT COUNT(DISTINCT Dogs.dog_id) AS FemaleDogsTreated\nFROM Dogs\nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nWHERE Dogs.gender = 'Female';"}, {"isUser": true, "text": "what are their ages"}, {"isUser": false, "query": "SELECT age FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "predict": "SELECT DISTINCT Dogs.age\nFROM Dogs\nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nWHERE Dogs.gender = 'Female';"}, {"isUser": true, "text": "what is the highest weight of age 2"}, {"isUser": false, "query": "SELECT weight FROM Dogs WHERE age = 2 ORDER BY weight DESC LIMIT 1", "predict": "SELECT MAX(weight) AS HighestWeight\nFROM Dogs\nWHERE age = '2';"}]},
{"db_name": "course_teach", "turns": [{"isUser": true, "text": "How many teachers are there?"}, {"isUser": false, "query": "SELECT COUNT ( * )  FROM teacher", "predict": "SELECT COUNT(*) FROM teacher;"}, {"isUser": true, "text": "How many courses do you have?"}, {"isUser": false, "query": "SELECT COUNT ( * )  FROM course_arrange", "predict": "SELECT COUNT(*) FROM course;"}, {"isUser": true, "text": "Can you tell me the names of teachers and the number of courses they teach?"}, {"isUser": false, "query": "SELECT T2.Name , COUNT ( * )  FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "predict": "SELECT t.Name, COUNT(ca.Course_ID) AS NumberOfCourses\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Teacher_ID, t.Name;"}, {"isUser": true, "text": "Sure. Can you tell me the age of each teacher?"}, {"isUser": false, "query": "SELECT Name , age FROM teacher", "predict": "SELECT Name, Age FROM teacher;"}]},
{"db_name": "battle_death", "turns": [{"isUser": true, "text": "What is the Latin commander of Battle of Serres?"}, {"isUser": false, "query": "SELECT latin_commander FROM battle WHERE name  =  \"Battle of Serres\"", "predict": "SELECT latin_commander FROM battle WHERE name = 'Battle of Serres';"}, {"isUser": true, "text": "What is the result of 31st January 1206?"}, {"isUser": false, "query": "SELECT result FROM battle WHERE date  =  \"31 January 1206\"", "predict": "SELECT result FROM battle WHERE date = '1206-01-31';"}, {"isUser": true, "text": "Who is the Bulgarian commander on June 1205?"}, {"isUser": false, "query": "SELECT bulgarian_commander FROM battle WHERE date  =  \"June 1205\"", "predict": "SELECT bulgarian_commander FROM battle WHERE date LIKE '1205-06%';"}, {"isUser": true, "text": "What is the name of battle who has Latin commander is Baldwin 1?"}, {"isUser": false, "query": "SELECT name FROM battle WHERE latin_commander  =  \"Baldwin I\"", "predict": "SELECT name FROM battle WHERE latin_commander = 'Baldwin I';"}]},
{"db_name": "tvshow", "turns": [{"isUser": true, "text": "how many TV Channels there"}, {"isUser": false, "query": "SELECT count ( * )  FROM TV_Channel", "predict": "SELECT COUNT(*) FROM TV_Channel;"}, {"isUser": true, "text": "what is the language of sky music"}, {"isUser": false, "query": "SELECT language FROM TV_Channel where series_name = 'Sky Music'", "predict": "SELECT Language FROM TV_Channel WHERE series_name = 'Sky Music';"}, {"isUser": true, "text": "what is the title of id 2.0"}, {"isUser": false, "query": "SELECT title FROM Cartoon where id = 2.0", "predict": "SELECT Title FROM Cartoon WHERE id = 2.0;"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "what is the highest horsepower on the table?"}, {"isUser": false, "query": "SELECT Horsepower FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1", "predict": "SELECT MAX(CAST(Horsepower AS INTEGER)) AS MaxHorsepower\nFROM cars_data\nWHERE Horsepower != 'NA';"}, {"isUser": true, "text": "how many cars data on the table?"}, {"isUser": false, "query": "SELECT count ( * )  FROM CARS_DATA", "predict": "SELECT COUNT(*) AS TotalCars\nFROM cars_data;"}, {"isUser": true, "text": "how many cylinders on the table?"}, {"isUser": false, "query": "SELECT sum ( cylinders )  FROM CARS_DATA", "predict": "SELECT COUNT(DISTINCT Cylinders) AS NumberOfCylinderTypes\nFROM cars_data;"}]},
{"db_name": "employee_hire_evaluation", "turns": [{"isUser": true, "text": "Which district has the largest number of products?"}, {"isUser": false, "query": "SELECT district FROM shop ORDER BY number_products DESC LIMIT 1", "predict": "SELECT District, SUM(Number_products) AS Total_Products\nFROM shop\nGROUP BY District\nORDER BY Total_Products DESC\nLIMIT 1;"}, {"isUser": true, "text": "What is the manager's name of that shop?"}, {"isUser": false, "query": "SELECT manager_name FROM shop ORDER BY number_products DESC LIMIT 1", "predict": "SELECT District, SUM(Number_products) AS Total_Products\n    FROM shop\n    GROUP BY District\n    ORDER BY Total_Products DESC\n    LIMIT 1\n)\n\n-- Then, find the shop in that district with the highest number of products\n, Top_Shop AS (\n    SELECT s.Name, s.Manager_name\n    FROM shop s\n    JOIN District_Products dp ON s.District = dp.District\n    ORDER BY s.Number_products DESC\n    LIMIT 1\n)\n\n-- Select the manager's name from the top shop\nSELECT Manager_name\nFROM Top_Shop;"}, {"isUser": true, "text": "How many products did he produce at that shop?"}, {"isUser": false, "query": "SELECT number_products FROM shop ORDER BY number_products DESC LIMIT 1", "predict": "SELECT District, SUM(Number_products) AS Total_Products\n    FROM shop\n    GROUP BY District\n    ORDER BY Total_Products DESC\n    LIMIT 1\n)\n\n-- Then, find the shop in that district with the highest number of products\nSELECT s.Number_products\nFROM shop s\nJOIN District_Products dp ON s.District = dp.District\nORDER BY s.Number_products DESC\nLIMIT 1;"}, {"isUser": true, "text": "Where is the location of that district?"}, {"isUser": false, "query": "SELECT location FROM shop ORDER BY number_products DESC LIMIT 1", "predict": "SELECT District, SUM(Number_products) AS Total_Products\n    FROM shop\n    GROUP BY District\n    ORDER BY Total_Products DESC\n    LIMIT 1\n)\n\n-- Then, find the location of the shop in that district with the highest number of products\nSELECT s.Location\nFROM shop s\nJOIN District_Products dp ON s.District = dp.District\nORDER BY s.Number_products DESC\nLIMIT 1;"}, {"isUser": true, "text": "What is the shop ID number?"}, {"isUser": false, "query": "SELECT shop_ID FROM shop ORDER BY number_products DESC LIMIT 1", "predict": "SELECT District, SUM(Number_products) AS Total_Products\n    FROM shop\n    GROUP BY District\n    ORDER BY Total_Products DESC\n    LIMIT 1\n)\n\n-- Then, find the shop ID in that district with the highest number of products\nSELECT s.Shop_ID\nFROM shop s\nJOIN District_Products dp ON s.District = dp.District\nORDER BY s.Number_products DESC\nLIMIT 1;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "I want to know the average population of all cities please"}, {"isUser": false, "query": "SELECT avg ( Population )  FROM city", "predict": "SELECT AVG(Population) AS AveragePopulation FROM city;"}, {"isUser": true, "text": "And which districts have cities with populations greater than the average?"}, {"isUser": false, "query": "SELECT District FROM city WHERE Population  >   ( SELECT avg ( Population )  FROM city ) ", "predict": "SELECT DISTINCT District\nFROM city\nWHERE Population > (SELECT AVG(Population) FROM city);"}, {"isUser": true, "text": "Within these districts, how many cities does each have with a population greater than the average?"}, {"isUser": false, "query": "SELECT count ( * )  ,  District FROM city WHERE Population  >   ( SELECT avg ( Population )  FROM city )  GROUP BY District", "predict": "SELECT District, COUNT(*) AS NumberOfCities\nFROM city\nWHERE Population > (SELECT AVG(Population) FROM city)\nGROUP BY District;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "Can you list all nations whose government is US territory?"}, {"isUser": false, "query": "SELECT Name FROM country WHERE GovernmentForm   =   \"US Territory\"", "predict": "SELECT Name \nFROM country \nWHERE GovernmentForm = 'US Territory';"}, {"isUser": true, "text": "Hmm, I also want to know their GNP and population."}, {"isUser": false, "query": "SELECT GNP, population FROM country WHERE GovernmentForm   =   \"US Territory\"", "predict": "SELECT Name, GNP, Population \nFROM country \nWHERE GovernmentForm = 'US Territory';"}, {"isUser": true, "text": "Please find out the average GNP and total population of those nations."}, {"isUser": false, "query": "SELECT avg ( GNP )  ,  sum ( population )  FROM country WHERE GovernmentForm   =   \"US Territory\"", "predict": "SELECT AVG(GNP) AS AverageGNP, SUM(Population) AS TotalPopulation\nFROM country\nWHERE GovernmentForm = 'US Territory';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "give me the total surface area of the continent\n Asia"}, {"isUser": false, "query": "SELECT sum ( SurfaceArea )  FROM country WHERE Continent  =  \"Asia\"", "predict": "SELECT SUM(SurfaceArea) AS TotalSurfaceArea\nFROM country\nWHERE Continent = 'Asia';"}, {"isUser": true, "text": "what is the local name | Did you mean to ask for all local names? | yes"}, {"isUser": false, "query": "SELECT LocalName FROM country", "predict": "SELECT LocalName\nFROM country;"}, {"isUser": true, "text": "What is Aruba's code?"}, {"isUser": false, "query": "SELECT Code FROM country WHERE Name  =  \"Aruba\"", "predict": "SELECT Code\nFROM country\nWHERE Name = 'Aruba';"}]},
{"db_name": "employee_hire_evaluation", "turns": [{"isUser": true, "text": "How many shops do we have data for?"}, {"isUser": false, "query": "SELECT count ( * )  FROM shop", "predict": "SELECT COUNT(*) FROM shop;"}, {"isUser": true, "text": "Can you give me their names?"}, {"isUser": false, "query": "SELECT * FROM shop", "predict": "SELECT Name FROM shop;"}, {"isUser": true, "text": "And how many employees were hired by each shop?"}, {"isUser": false, "query": "SELECT count ( * )  FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t2.name", "predict": "SELECT shop.Name, COUNT(hiring.Employee_ID) AS Number_of_Employees\nFROM shop\nJOIN hiring ON shop.Shop_ID = hiring.Shop_ID\nGROUP BY shop.Shop_ID;"}]},
{"db_name": "concert_singer", "turns": [{"isUser": true, "text": "what are the singers name on this list?"}, {"isUser": false, "query": "SELECT name from singer", "predict": "SELECT Name FROM singer;"}, {"isUser": true, "text": "Joe Sharp song \"You\" was released in what year?"}, {"isUser": false, "query": "SELECT song_release_year from singer where Name  =  \"Joe Sharp\" and Song_Name  =  \"You\"", "predict": "SELECT Song_release_year FROM singer WHERE Name = 'Joe Sharp' AND Song_Name = 'You';"}, {"isUser": true, "text": "how many number of concert has Joe Sharp held?"}, {"isUser": false, "query": "SELECT count ( * )  FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id   =   T2.singer_id where T2.name  =  \"Joe Sharp\" GROUP BY T2.singer_id", "predict": "SELECT COUNT(*) FROM concert\nJOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID\nJOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID\nWHERE singer.Name = 'Joe Sharp';"}, {"isUser": true, "text": "ok. what country is Joe sharp from?"}, {"isUser": false, "query": "SELECT country from singer where name  =  \"Joe Sharp\"", "predict": "SELECT Country FROM singer WHERE Name = 'Joe Sharp';"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "Can you list all the continents?"}, {"isUser": false, "query": "SELECT Continent FROM CONTINENTS", "predict": "SELECT Continent FROM continents;"}, {"isUser": true, "text": "Okay, now can you list the number of countries belonging to each continent, including the continent id as well?"}, {"isUser": false, "query": "SELECT T1.ContId ,  T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.Continent GROUP BY T1.ContId", "predict": "SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS NumberOfCountries\nFROM continents\nLEFT JOIN countries ON continents.ContId = countries.Continent\nGROUP BY continents.ContId, continents.Continent;"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "which models are lighter than 3500?"}, {"isUser": false, "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model   =   T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId   =   T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker   =   T4.Id WHERE T3.weight  <  3500", "predict": "SELECT DISTINCT car_names.Model\nFROM car_names\nJOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE cars_data.Weight < 3500;"}, {"isUser": true, "text": "what is the weight of  BMW?"}, {"isUser": false, "query": "SELECT DISTINCT T3.Weight FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model   =   T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId   =   T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker   =   T4.Id WHERE T1.Model = \"bmw\"", "predict": "SELECT car_names.Model, cars_data.Weight\nFROM car_names\nJOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE car_names.Make = 'BMW';"}, {"isUser": true, "text": "what is the name of the id 2? | Are you asking about the car or the carmaker? | carmaker?"}, {"isUser": false, "query": "SELECT Model FROM car_names WHERE MakeId = 2", "predict": "SELECT Maker\nFROM car_makers\nWHERE Id = 2;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "Hi. How many countries are listed in total?"}, {"isUser": false, "query": "SELECT count ( * )  from country", "predict": "SELECT COUNT(*) FROM country;"}, {"isUser": true, "text": "Of the 239 countries, how many different forms of government are there among them?"}, {"isUser": false, "query": "SELECT count ( distinct GovernmentForm )  from country", "predict": "SELECT COUNT(DISTINCT GovernmentForm) FROM country;"}, {"isUser": true, "text": "What are the 35 different forms of government from the 239 countries listed?"}, {"isUser": false, "query": "SELECT distinct GovernmentForm from country", "predict": "SELECT DISTINCT GovernmentForm FROM country;"}, {"isUser": true, "text": "Of the 239 countries, how many of them have a Republic government form?"}, {"isUser": false, "query": "SELECT count ( * )  from country where GovernmentForm  =  \"Republic\"", "predict": "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%';"}, {"isUser": true, "text": "What are the names of the 122 countries that have a Republic government form?"}, {"isUser": false, "query": "SELECT name from country where GovernmentForm  =  \"Republic\"", "predict": "SELECT Name FROM country WHERE GovernmentForm LIKE '%Republic%';"}, {"isUser": true, "text": "Since Latvia is a country with a Republic government form, which languages are spoken there?"}, {"isUser": false, "query": "SELECT T2.language from country as T1 join countrylanguage as T2 on T1.Code  =  T2.CountryCode where  T1.name  =  \"Latvia\"", "predict": "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Latvia');"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "how many airline's there"}, {"isUser": false, "query": "SELECT count ( * )  FROM AIRLINES", "predict": "SELECT COUNT(*) FROM airlines;"}, {"isUser": true, "text": "what is the name of the usa airline | What did you mean by \"the name of the USA airline?\" | united sates of america"}, {"isUser": false, "query": "SELECT Airline FROM AIRLINES WHERE Airline = \"United Airlines\"", "predict": "SELECT Airline FROM airlines WHERE Country = 'United States of America';"}, {"isUser": true, "text": "what is the abbreviation of us airways"}, {"isUser": false, "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"US Airways\"", "predict": "SELECT Abbreviation FROM airlines WHERE Airline = 'US Airways';"}]},
{"db_name": "singer", "turns": [{"isUser": true, "text": "how many  singer there"}, {"isUser": false, "query": "SELECT count ( * )  from singer", "predict": "SELECT COUNT(*) FROM singer;"}, {"isUser": true, "text": "what is the Citizenship of Alice Walton"}, {"isUser": false, "query": "SELECT citizenship from singer where name  =  \"Alice Walton\"", "predict": "SELECT Citizenship FROM singer WHERE Name = 'Alice Walton';"}, {"isUser": true, "text": "how many sales from song id 3"}, {"isUser": false, "query": "SELECT Sales from song where song_id  =  3", "predict": "SELECT Sales FROM song WHERE Song_ID = 3;"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "delta airline is from which country?"}, {"isUser": false, "query": "SELECT country FROM AIRLINES where Airline  =  'Delta Airlines'", "predict": "SELECT Country FROM airlines WHERE Airline = 'Delta';"}, {"isUser": true, "text": "what is the destination airport of flight no 44?"}, {"isUser": false, "query": "SELECT DestAirport FROM flights where FlightNo  =  44", "predict": "SELECT DestAirport FROM flights WHERE FlightNo = 44;"}, {"isUser": true, "text": "which airline has most number of flights?"}, {"isUser": false, "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT Airline, COUNT(*) AS NumberOfFlights\nFROM flights\nGROUP BY Airline\nORDER BY NumberOfFlights DESC\nLIMIT 1;"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "How many courses in this table? | Do you mean the number of the courses with different course ids? | Yes."}, {"isUser": false, "query": "SELECT  count ( distinct course_id )  from courses", "predict": "SELECT COUNT(DISTINCT course_id) AS NumberOfCourses FROM Courses;"}, {"isUser": true, "text": "What's the name of the course with least number of students of enrollments?"}, {"isUser": false, "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id   =   T2.course_id GROUP BY T1.course_name ORDER BY count ( * )  LIMIT 1", "predict": "SELECT c.course_name\nFROM Courses c\nJOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id\nGROUP BY c.course_id, c.course_name\nORDER BY COUNT(sec.student_course_id) ASC\nLIMIT 1;"}]},
{"db_name": "concert_singer", "turns": [{"isUser": true, "text": "how many concert are presented on the table"}, {"isUser": false, "query": "SELECT  count ( * )  FROM concert", "predict": "SELECT COUNT(*) FROM concert;"}, {"isUser": true, "text": "show the stadium name and the number of concerts in each stadium"}, {"isUser": false, "query": "SELECT T2.name , count ( * )  FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "predict": "SELECT s.Name, COUNT(c.concert_ID) AS Number_of_Concerts\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nGROUP BY s.Stadium_ID;"}, {"isUser": true, "text": "what is the capacity of Stark's Park"}, {"isUser": false, "query": "SELECT capacity from stadium where name  =  \"Stark s Park\"", "predict": "SELECT Capacity FROM stadium WHERE Name = 'Stark''s Park';"}, {"isUser": true, "text": "list out the concert names"}, {"isUser": false, "query": "SELECT concert_name from concert", "predict": "SELECT concert_Name FROM concert;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "How many different treatments are there?"}, {"isUser": false, "query": "select count ( * )  from  ( SELECT distinct treatment_type_code from treatments ) ", "predict": "SELECT COUNT(*) AS NumberOfTreatments\nFROM Treatment_Types;"}, {"isUser": true, "text": "which one is the most expensive?"}, {"isUser": false, "query": "SELECT * FROM Treatments ORDER BY cost_of_treatment DESC LIMIT 1", "predict": "SELECT treatment_type_description, MAX(cost_of_treatment) AS HighestCost\nFROM Treatments\nJOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;"}, {"isUser": true, "text": "And how about the price of the most recent treatment?"}, {"isUser": false, "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "predict": "SELECT cost_of_treatment\nFROM Treatments\nORDER BY date_of_treatment DESC\nLIMIT 1;"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "Find all airlines that have fewer than 200 flights."}, {"isUser": false, "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline HAVING count ( * )   <  200", "predict": "SELECT a.Airline, COUNT(f.FlightNo) AS NumberOfFlights\nFROM airlines a\nLEFT JOIN flights f ON a.uid = f.Airline\nGROUP BY a.Airline\nHAVING COUNT(f.FlightNo) < 200;"}, {"isUser": true, "text": "what country is their destination of the first three?"}, {"isUser": false, "query": "SELECT T1.Airline, T2.DestAirport FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline HAVING count ( * )   <  200 limit 3", "predict": "SELECT a.uid, a.Airline\n    FROM airlines a\n    LEFT JOIN flights f ON a.uid = f.Airline\n    GROUP BY a.uid, a.Airline\n    HAVING COUNT(f.FlightNo) < 200\n    LIMIT 3\n)\n\n-- Then, we join this result with the flights and airports tables to find the destination countries\nSELECT DISTINCT ft.Airline, ap.Country AS DestinationCountry\nFROM FewerThan200Flights ft\nJOIN flights f ON ft.uid = f.Airline\nJOIN airports ap ON f.DestAirport = ap.AirportCode\nORDER BY ft.Airline;"}]},
{"db_name": "poker_player", "turns": [{"isUser": true, "text": "Hello!  Which nationalities are shared by more than one person?"}, {"isUser": false, "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT ( * )   >  1", "predict": "SELECT Nationality, COUNT(*) AS Count\nFROM people\nGROUP BY Nationality\nHAVING COUNT(*) > 1;"}, {"isUser": true, "text": "Okay.  Thanks for that!  Can you show me all of the people IDs that have Russia as the nationality?"}, {"isUser": false, "query": "SELECT People_ID FROM people WHERE Nationality  =  'Russia'", "predict": "SELECT People_ID\nFROM people\nWHERE Nationality = 'Russia';"}, {"isUser": true, "text": "Excellent!  Can you  update this list to show the names of all of the associated individuals?"}, {"isUser": false, "query": "SELECT People_ID, name FROM people WHERE Nationality  =  'Russia'", "predict": "SELECT People_ID, Name\nFROM people\nWHERE Nationality = 'Russia';"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "What's the average age of all losers of all matches?"}, {"isUser": false, "query": "SELECT avg ( loser_age )  FROM matches", "predict": "SELECT AVG(loser_age) AS average_loser_age\nFROM matches;"}, {"isUser": true, "text": "What's the average age of all winners of all matches?"}, {"isUser": false, "query": "SELECT avg ( winner_age )  FROM matches", "predict": "SELECT AVG(winner_age) AS average_winner_age\nFROM matches;"}, {"isUser": true, "text": "What are the average minutes of all matches?"}, {"isUser": false, "query": "SELECT avg ( minutes )  FROM matches", "predict": "SELECT AVG(minutes) AS average_match_duration\nFROM matches;"}, {"isUser": true, "text": "What was the longest match in minutes?"}, {"isUser": false, "query": "SELECT max ( minutes )  FROM matches", "predict": "SELECT MAX(minutes) AS longest_match_duration\nFROM matches;"}, {"isUser": true, "text": "What was the shortest match in minutes?"}, {"isUser": false, "query": "SELECT min ( minutes )  FROM matches", "predict": "SELECT MIN(minutes) AS shortest_match_duration\nFROM matches;"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "how many flights are landing in the city of aberdeen or abilene"}, {"isUser": false, "query": "SELECT count ( * )  FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport   =   T2.AirportCode WHERE T2.city  like  \"%Aberdeen%\" OR T2.city  like  \"%Abilene%\"", "predict": "SELECT COUNT(*) AS NumberOfFlights\nFROM flights\nJOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE airports.City IN ('Aberdeen', 'Abilene');"}]},
{"db_name": "museum_visit", "turns": [{"isUser": true, "text": "what are the name of the museums?"}, {"isUser": false, "query": "SELECT name from museum", "predict": "SELECT Name FROM museum;"}]},
{"db_name": "tvshow", "turns": [{"isUser": true, "text": "Which titles were directed by Ben Jones or Brandon Vietti?"}, {"isUser": false, "query": "SELECT Title FROM Cartoon WHERE Directed_by  =  \"Ben Jones\" OR Directed_by  =  \"Brandon Vietti\"", "predict": "SELECT Title\nFROM Cartoon\nWHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');"}, {"isUser": true, "text": "What are their original air dates?"}, {"isUser": false, "query": "SELECT Title, original_air_date FROM Cartoon WHERE Directed_by  =  \"Ben Jones\" OR Directed_by  =  \"Brandon Vietti\"", "predict": "SELECT Title, Original_air_date\nFROM Cartoon\nWHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');"}, {"isUser": true, "text": "Who are the writers of these cartoons?"}, {"isUser": false, "query": "SELECT Title, written_by FROM Cartoon WHERE Directed_by  =  \"Ben Jones\" OR Directed_by  =  \"Brandon Vietti\"", "predict": "SELECT Title, Written_by\nFROM Cartoon\nWHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "Can I get all the documents with 'w' in them | Do you want documents with 'w' in the name or description? | Description pls"}, {"isUser": false, "query": "SELECT * from Documents WHERE Document_Description LIKE \"%w%\"", "predict": "SELECT * FROM Documents WHERE Document_Description LIKE '%w%';"}, {"isUser": true, "text": "Ok can I get just their names"}, {"isUser": false, "query": "SELECT document_name from Documents WHERE Document_Description LIKE \"%w%\"", "predict": "SELECT Document_Name FROM Documents WHERE Document_Description LIKE '%w%';"}, {"isUser": true, "text": "I need the template ids too oops"}, {"isUser": false, "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "predict": "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "What is the average age of the losers from all matches?"}, {"isUser": false, "query": "SELECT avg ( loser_age )   FROM matches", "predict": "SELECT AVG(loser_age) AS average_loser_age\nFROM matches;"}, {"isUser": true, "text": "What about the average age of the winners from all matches?"}, {"isUser": false, "query": "SELECT avg ( winner_age )   FROM matches", "predict": "SELECT AVG(winner_age) AS average_winner_age\nFROM matches;"}, {"isUser": true, "text": "How many winners are left handed?"}, {"isUser": false, "query": "SELECT count ( * )  from matches where winner_hand  =  \"L\"", "predict": "SELECT COUNT(*) AS left_handed_winners\nFROM matches\nWHERE winner_hand = 'L';"}, {"isUser": true, "text": "What are the names of the winner and loser from the longest match?"}, {"isUser": false, "query": "SELECT winner_name, loser_name from matches where minutes  =   ( select max ( minutes )  from matches ) ", "predict": "SELECT winner_name, loser_name\nFROM matches\nORDER BY minutes DESC\nLIMIT 1;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "Show me all the dogs | do you want to show all the attributes of the dogs? | just show me the names of the dogs"}, {"isUser": false, "query": "SELECT name FROM Dogs", "predict": "SELECT name FROM Dogs;"}, {"isUser": true, "text": "Nice! Tell me which of these dogs are the rarest breed"}, {"isUser": false, "query": "SELECT name FROM Dogs WHERE breed_code   =    (  SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * )  ASC LIMIT 1  ) ", "predict": "SELECT breed_name\nFROM Breeds\nWHERE breed_code = (\n    SELECT breed_code\n    FROM Dogs\n    GROUP BY breed_code\n    ORDER BY COUNT(*) ASC\n    LIMIT 1\n);"}, {"isUser": true, "text": "What are the genders of these dogs?"}, {"isUser": false, "query": "SELECT name, gender FROM Dogs WHERE breed_code   =    (  SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * )  ASC LIMIT 1  ) ", "predict": "SELECT gender\nFROM Dogs\nWHERE breed_code = (\n    SELECT breed_code\n    FROM Dogs\n    GROUP BY breed_code\n    ORDER BY COUNT(*) ASC\n    LIMIT 1\n);"}, {"isUser": true, "text": "Ok sure. Tell me who treated these dogs | Sorry, could you specify your question, There are all attributes of the dog treatments, which one do you want to show? | Alright! just show me the treatment dates of these dogs"}, {"isUser": false, "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id   =   T2.dog_id WHERE T1.breed_code   =    (  SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * )  ASC LIMIT 1  ) ", "predict": "SELECT date_of_treatment\nFROM Treatments\nWHERE dog_id IN (\n    SELECT dog_id\n    FROM Dogs\n    WHERE breed_code = (\n        SELECT breed_code\n        FROM Dogs\n        GROUP BY breed_code\n        ORDER BY COUNT(*) ASC\n        LIMIT 1\n    )\n);"}]},
{"db_name": "pets_1", "turns": [{"isUser": true, "text": "How many students have a cat pet?"}, {"isUser": false, "query": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "predict": "SELECT COUNT(DISTINCT s.StuID) AS NumberOfStudentsWithCats\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType = 'cat';"}, {"isUser": true, "text": "And what about students that don't have a cat pet?"}, {"isUser": false, "query": "select count ( * )  from  ( SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' ) ", "predict": "SELECT COUNT(DISTINCT s.StuID) AS NumberOfStudentsWithoutCats\nFROM Student s\nLEFT JOIN (\n    SELECT hp.StuID\n    FROM Has_Pet hp\n    JOIN Pets p ON hp.PetID = p.PetID\n    WHERE p.PetType = 'cat'\n) AS StudentsWithCats ON s.StuID = StudentsWithCats.StuID\nWHERE StudentsWithCats.StuID IS NULL;"}, {"isUser": true, "text": "And what are their ids?"}, {"isUser": false, "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat'", "predict": "SELECT s.StuID\nFROM Student s\nLEFT JOIN (\n    SELECT hp.StuID\n    FROM Has_Pet hp\n    JOIN Pets p ON hp.PetID = p.PetID\n    WHERE p.PetType = 'cat'\n) AS StudentsWithCats ON s.StuID = StudentsWithCats.StuID\nWHERE StudentsWithCats.StuID IS NULL;"}]},
{"db_name": "museum_visit", "turns": [{"isUser": true, "text": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?"}, {"isUser": false, "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  >  2011", "predict": "SELECT DISTINCT v.Name\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nJOIN museum m1 ON vi.Museum_ID = m1.Museum_ID AND m1.Open_Year < '2009'\nJOIN museum m2 ON vi.Museum_ID = m2.Museum_ID AND m2.Open_Year > '2011'\nWHERE EXISTS (\n    SELECT 1 FROM visit vi1\n    JOIN museum m3 ON vi1.Museum_ID = m3.Museum_ID AND m3.Open_Year < '2009'\n    WHERE vi1.visitor_ID = v.ID\n) AND EXISTS (\n    SELECT 1 FROM visit vi2\n    JOIN museum m4 ON vi2.Museum_ID = m4.Museum_ID AND m4.Open_Year > '2011'\n    WHERE vi2.visitor_ID = v.ID\n);"}, {"isUser": true, "text": "What museum did he visit before 2009?"}, {"isUser": false, "query": "SELECT t3.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  <  2009 AND t1.name  =   ( SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  >  2011 ) ", "predict": "SELECT m.Name\nFROM museum m\nJOIN visit vi ON m.Museum_ID = vi.Museum_ID\nJOIN visitor v ON vi.visitor_ID = v.ID\nWHERE m.Open_Year < '2009'\nAND v.ID IN (\n    SELECT v.ID\n    FROM visitor v\n    JOIN visit vi ON v.ID = vi.visitor_ID\n    JOIN museum m1 ON vi.Museum_ID = m1.Museum_ID AND m1.Open_Year < '2009'\n    JOIN museum m2 ON vi.Museum_ID = m2.Museum_ID AND m2.Open_Year > '2011'\n    WHERE EXISTS (\n        SELECT 1 FROM visit vi1\n        JOIN museum m3 ON vi1.Museum_ID = m3.Museum_ID AND m3.Open_Year < '2009'\n        WHERE vi1.visitor_ID = v.ID\n    ) AND EXISTS (\n        SELECT 1 FROM visit vi2\n        JOIN museum m4 ON vi2.Museum_ID = m4.Museum_ID AND m4.Open_Year > '2011'\n        WHERE vi2.visitor_ID = v.ID\n    )\n);"}, {"isUser": true, "text": "What is Fernando Gago's membership level?"}, {"isUser": false, "query": "SELECT level_of_membership FROM visitor WHERE name  =  \"Fernando Gago\"", "predict": "SELECT Level_of_membership\nFROM visitor\nWHERE Name = 'Fernando Gago';"}, {"isUser": true, "text": "How old is Fernando Gago?"}, {"isUser": false, "query": "SELECT age FROM visitor WHERE name  =  \"Fernando Gago\"", "predict": "SELECT Age\nFROM visitor\nWHERE Name = 'Fernando Gago';"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "what is the source airport for United Airlines?"}, {"isUser": false, "query": "SELECT T1.SourceAirport FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid   =   T1.Airline WHERE T2.Airline   =   \"United Airlines\"", "predict": "SELECT DISTINCT airports.AirportName, airports.City, airports.Country\nFROM flights\nJOIN airlines ON flights.Airline = airlines.uid\nJOIN airports ON flights.SourceAirport = airports.AirportCode\nWHERE airlines.Airline = 'United Airlines';"}, {"isUser": true, "text": "What are the flight numbers for United Airlines?"}, {"isUser": false, "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid   =   T1.Airline WHERE T2.Airline   =   \"United Airlines\"", "predict": "SELECT DISTINCT flights.FlightNo\nFROM flights\nJOIN airlines ON flights.Airline = airlines.uid\nWHERE airlines.Airline = 'United Airlines';"}, {"isUser": true, "text": "Where is flight 28 going to?"}, {"isUser": false, "query": "SELECT DestAirport FROM flights WHERE FlightNo  =  28", "predict": "SELECT airports.AirportName, airports.City, airports.Country\nFROM flights\nJOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE flights.FlightNo = 28;"}, {"isUser": true, "text": "What about flight 29?"}, {"isUser": false, "query": "SELECT DestAirport FROM flights WHERE FlightNo  =  29", "predict": "SELECT airports.AirportName, airports.City, airports.Country\nFROM flights\nJOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE flights.FlightNo = 29;"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "hi, what are the names of the players?"}, {"isUser": false, "query": "SELECT first_name,  last_name FROM players", "predict": "SELECT first_name, last_name FROM players;"}, {"isUser": true, "text": "* I have left the chat *"}, {"isUser": false, "query": "SELECT first_name ,  last_name FROM players WHERE hand   =   'L'", "predict": "SELECT first_name, last_name FROM players;"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "How many United Airlines flights go to the city called Aberdeen?"}, {"isUser": false, "query": "SELECT count ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =   T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid   =   T1.Airline WHERE T2.City   =   \"Aberdeen\" AND T3.Airline   =   \"United Airlines\"", "predict": "SELECT COUNT(*) AS NumberOfFlights\nFROM flights f\nJOIN airlines a ON f.Airline = a.uid\nJOIN airports ap ON f.DestAirport = ap.AirportCode\nWHERE a.Airline = 'United Airlines' AND ap.City = 'Aberdeen';"}, {"isUser": true, "text": "What other cities does United Airlines go to?"}, {"isUser": false, "query": "SELECT T2.city FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =   T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid   =   T1.Airline where T2.city ! =   'Aberdeen' and T3.airline  =  \"United Airlines\"", "predict": "SELECT DISTINCT ap.City\nFROM flights f\nJOIN airlines a ON f.Airline = a.uid\nJOIN airports ap ON f.DestAirport = ap.AirportCode\nWHERE a.Airline = 'United Airlines'\nAND ap.City != 'Aberdeen';"}]},
{"db_name": "course_teach", "turns": [{"isUser": true, "text": "Show the name of the teacher for the math course please?"}, {"isUser": false, "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID WHERE T2.Course   =   \"Math\"", "predict": "SELECT t.Name\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID\nWHERE c.Course = 'math';"}, {"isUser": true, "text": "What grades do they teach? | The   grades  of courses that the teachers for the math teach are 1 and 3 | What dates do those courses start?"}, {"isUser": false, "query": "SELECT T2.Staring_Date  FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID where T2.Course  =  \"Math\"", "predict": "SELECT DISTINCT c.Staring_Date\nFROM course c\nJOIN course_arrange ca ON c.Course_ID = ca.Course_ID\nWHERE ca.Grade IN (1, 3) AND ca.Teacher_ID IN (\n    SELECT ca.Teacher_ID\n    FROM course_arrange ca\n    JOIN course c ON ca.Course_ID = c.Course_ID\n    WHERE c.Course = 'math'\n);"}]},
{"db_name": "poker_player", "turns": [{"isUser": true, "text": "What is the birth date of the poker player with the lowest earnings?"}, {"isUser": false, "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "predict": "SELECT p.Birth_Date\nFROM people p\nJOIN poker_player pp ON p.People_ID = pp.People_ID\nORDER BY pp.Earnings ASC\nLIMIT 1;"}, {"isUser": true, "text": "What is the name of the poker player with the lowest earnings?"}, {"isUser": false, "query": "SELECT name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "predict": "SELECT p.Name\nFROM people p\nJOIN poker_player pp ON p.People_ID = pp.People_ID\nORDER BY pp.Earnings ASC\nLIMIT 1;"}, {"isUser": true, "text": "What is the nationality of the poker player with the lowest earnings?"}, {"isUser": false, "query": "SELECT Nationality FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "predict": "SELECT p.Nationality\nFROM people p\nJOIN poker_player pp ON p.People_ID = pp.People_ID\nORDER BY pp.Earnings ASC\nLIMIT 1;"}]},
{"db_name": "poker_player", "turns": [{"isUser": true, "text": "how many poker players are on the table"}, {"isUser": false, "query": "SELECT count ( * )  FROM poker_player", "predict": "SELECT COUNT(*) AS Total_Poker_Players FROM poker_player;"}, {"isUser": true, "text": "how many have height higher than 200"}, {"isUser": false, "query": "SELECT count ( * )  FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T1.Height  >  200", "predict": "SELECT COUNT(*) AS Players_Over_200cm\nFROM poker_player\nJOIN people ON poker_player.People_ID = people.People_ID\nWHERE people.Height > 200;"}, {"isUser": true, "text": "what is the average earnings of poker players with height higher than 200"}, {"isUser": false, "query": "SELECT avg ( T2.Earnings )  FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T1.Height  >  200", "predict": "SELECT AVG(poker_player.Earnings) AS Average_Earnings\nFROM poker_player\nJOIN people ON poker_player.People_ID = people.People_ID\nWHERE people.Height > 200;"}]},
{"db_name": "pets_1", "turns": [{"isUser": true, "text": "Can you show me a list of all of the students IDs for students who have dogs as their pet type?"}, {"isUser": false, "query": "SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "predict": "SELECT DISTINCT s.StuID\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType = 'dog';"}, {"isUser": true, "text": "Which of those two students have a cat as their pet in addition also having a dog?"}, {"isUser": false, "query": "SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' intersect SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "predict": "SELECT s.StuID\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType = 'dog'\n\nINTERSECT\n\nSELECT s.StuID\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType = 'cat';"}, {"isUser": true, "text": "Thanks! Can you please list the first name and ages of the two students who have dogs as pets?"}, {"isUser": false, "query": "SELECT T1.Fname, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "predict": "SELECT s.Fname, s.Age\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType = 'dog';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "how many country there"}, {"isUser": false, "query": "SELECT count ( * )  from country", "predict": "SELECT COUNT(*) FROM country;"}, {"isUser": true, "text": "what is the Country Code of Herat | Do you mean the country code of city Herat? | yes sir"}, {"isUser": false, "query": "SELECT countrycode  from city where name  =  \"Herat\"", "predict": "SELECT CountryCode FROM city WHERE Name = 'Herat';"}, {"isUser": true, "text": "what is the Population of Qandahar"}, {"isUser": false, "query": "SELECT population  from city where name  =  \"Qandahar\"", "predict": "SELECT Population FROM city WHERE Name = 'Qandahar';"}]},
{"db_name": "tvshow", "turns": [{"isUser": true, "text": "find id of the tv channels that are from countries with more than two tv channels"}, {"isUser": false, "query": "select id from tv_channel where country in  ( SELECT country FROM tv_channel GROUP BY country HAVING count ( * )   >  2 ) ", "predict": "SELECT id\nFROM TV_Channel\nWHERE Country IN (\n    SELECT Country\n    FROM TV_Channel\n    GROUP BY Country\n    HAVING COUNT(id) > 2\n);"}, {"isUser": true, "text": "What is the package option for that channel?"}, {"isUser": false, "query": "select package_option from tv_channel where country in  ( SELECT country FROM tv_channel GROUP BY country HAVING count ( * )   >  2 ) ", "predict": "SELECT id, Package_Option\nFROM TV_Channel\nWHERE Country IN (\n    SELECT Country\n    FROM TV_Channel\n    GROUP BY Country\n    HAVING COUNT(id) > 2\n);"}, {"isUser": true, "text": "List all series names in alphabetical order"}, {"isUser": false, "query": "SELECT series_name FROM tv_channel order by series_name asc", "predict": "SELECT series_name\nFROM TV_Channel\nORDER BY series_name ASC;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "Hello, how many dogs have gone through treatments?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "predict": "SELECT COUNT(DISTINCT dog_id) AS NumberOfDogsTreated\nFROM Treatments;"}, {"isUser": true, "text": "What is the age of the youngest dog to go through treatment?"}, {"isUser": false, "query": "SELECT min ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "predict": "SELECT MIN(age) AS YoungestDogAge\nFROM Dogs\nWHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments);"}, {"isUser": true, "text": "What about the oldest?"}, {"isUser": false, "query": "SELECT max ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "predict": "SELECT MAX(age) AS OldestDogAge\nFROM Dogs\nWHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments);"}, {"isUser": true, "text": "How about the average age?"}, {"isUser": false, "query": "SELECT avg ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "predict": "SELECT AVG(CAST(age AS INTEGER)) AS AverageAge\nFROM Dogs\nWHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments);"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "LIST THE NATIONS WHICH DO NOT USE ENGLISH"}, {"isUser": false, "query": "SELECT Name FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" ) ", "predict": "SELECT DISTINCT c.Name\nFROM country c\nWHERE c.Code NOT IN (\n    SELECT cl.CountryCode\n    FROM countrylanguage cl\n    WHERE cl.Language = 'English'\n);"}, {"isUser": true, "text": "WHAT IS THE POPULATION OF THE PEOPLE LIVING IN THE NATIONS NOT USING ENGLISH | did you mean you want the Population of the country  DO NOT USE ENGLISH | YES, THE TOTAL NUMBER OF PEOPLE LIVING IN THE NATIONS THAT DO NOT USE ENGLISH"}, {"isUser": false, "query": "SELECT Name,sum ( Population )  FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" )  group by Name", "predict": "SELECT SUM(c.Population) AS TotalPopulation\nFROM country c\nWHERE c.Code NOT IN (\n    SELECT cl.CountryCode\n    FROM countrylanguage cl\n    WHERE cl.Language = 'English'\n);"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "What is the weight of make id 1? | Did you mean to ask for the weight of the car with make id 1? | Yes"}, {"isUser": false, "query": "SELECT T2.Weight FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id WHERE T1.MakeID  =  1", "predict": "SELECT Weight\nFROM cars_data\nWHERE Id = 1;"}, {"isUser": true, "text": "Which year launch the car model  buick? | Did you want to ask for the year on which the car model buick was launched? | Yes"}, {"isUser": false, "query": "SELECT T2.Year FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id WHERE T1.Model  =  \"buick\"", "predict": "SELECT Year\nFROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nWHERE car_names.Model LIKE 'buick%';"}, {"isUser": true, "text": "Find the horsepower of model plymouth."}, {"isUser": false, "query": "SELECT T2.Horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id WHERE T1.Model  =  \"plymouth\"", "predict": "SELECT Horsepower\nFROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nWHERE car_names.Model LIKE 'plymouth%';"}, {"isUser": true, "text": "For the cars with 4 cylinders, which model has the largest horspower?"}, {"isUser": false, "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "predict": "SELECT car_names.Model, MAX(cars_data.Horsepower) AS MaxHorsepower\nFROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nWHERE cars_data.Cylinders = 4\nGROUP BY car_names.Model\nORDER BY MaxHorsepower DESC\nLIMIT 1;"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "How many different cars on this list were produced in 1974?"}, {"isUser": false, "query": "select count ( * )  from cars_data where year = '1974'", "predict": "SELECT COUNT(DISTINCT cn.Model) AS NumberOfCars\nFROM cars_data cd\nJOIN car_names cn ON cd.Id = cn.MakeId\nWHERE cd.Year = 1974;"}, {"isUser": true, "text": "Can you list just the car IDs produced in 1974 with 8 cylinders?"}, {"isUser": false, "query": "select id  from cars_data where year = '1974' and Cylinders  =  '8'", "predict": "SELECT cd.Id\nFROM cars_data cd\nWHERE cd.Year = 1974 AND cd.Cylinders = 8;"}]},
{"db_name": "employee_hire_evaluation", "turns": [{"isUser": true, "text": "I'd like to see Shop names."}, {"isUser": false, "query": "select name from shop", "predict": "SELECT Name FROM shop;"}, {"isUser": true, "text": "Which of these are hiring?"}, {"isUser": false, "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t1.shop_id", "predict": "SELECT DISTINCT s.Name\nFROM shop s\nJOIN hiring h ON s.Shop_ID = h.Shop_ID;"}, {"isUser": true, "text": "Which shop is hiring the highest number of employees? | do you want the name of the shop ? | Yes"}, {"isUser": false, "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t1.shop_id ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT s.Name\nFROM shop s\nJOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Shop_ID\nORDER BY COUNT(h.Employee_ID) DESC\nLIMIT 1;"}]},
{"db_name": "singer", "turns": [{"isUser": true, "text": "how many singers are on the table?"}, {"isUser": false, "query": "select count ( distinct Singer_ID )  from Singer", "predict": "SELECT COUNT(*) FROM singer;"}, {"isUser": true, "text": "how many singers have songs with sales more than 300000?"}, {"isUser": false, "query": "SELECT count ( DISTINCT T1.Name )  FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales > 300000", "predict": "SELECT COUNT(DISTINCT Singer_ID) \nFROM song \nWHERE Sales > 300000;"}, {"isUser": true, "text": "show distinct names of singers that have songs with sales more than 300000"}, {"isUser": false, "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales > 300000", "predict": "SELECT DISTINCT s.Name \nFROM singer s \nJOIN song sg ON s.Singer_ID = sg.Singer_ID \nWHERE sg.Sales > 300000;"}]},
{"db_name": "voter_1", "turns": [{"isUser": true, "text": "who all are the contest | Did you mean  to ask for the names of all contestants? | yes."}, {"isUser": false, "query": "SELECT contestant_name FROM CONTESTANTS", "predict": "SELECT contestant_name FROM CONTESTANTS;"}, {"isUser": true, "text": "can you send the total contestant number?"}, {"isUser": false, "query": "SELECT COUNT ( contestant_name )  FROM CONTESTANTS", "predict": "SELECT COUNT(*) AS total_contestants FROM CONTESTANTS;"}, {"isUser": true, "text": "who is the first contestant? | Did you mean to ask for the name of the contestant with contestant number 1? | yes can tell me?"}, {"isUser": false, "query": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_number  =  1", "predict": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_number = 1;"}, {"isUser": true, "text": "who is the 2 contestant?"}, {"isUser": false, "query": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_number  =  2", "predict": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_number = 2;"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "hi, list out all airport name"}, {"isUser": false, "query": "SELECT airportname FROM airports", "predict": "SELECT AirportName FROM airports;"}, {"isUser": true, "text": "show me the total no of flight number"}, {"isUser": false, "query": "SELECT COUNT ( DISTINCT Flightno )  FROM flights", "predict": "SELECT COUNT(FlightNo) FROM flights;"}, {"isUser": true, "text": "how many country name are there"}, {"isUser": false, "query": "SELECT COUNT ( DISTINCT country )  FROM airports", "predict": "SELECT COUNT(DISTINCT Country) FROM airports;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "How many dog breeds are there?"}, {"isUser": false, "query": "SELECT count ( * )  from Breeds", "predict": "SELECT COUNT(*) FROM Breeds;"}, {"isUser": true, "text": "What is the biggest of those dog breeds?"}, {"isUser": false, "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT b.breed_name, s.size_description\nFROM Breeds b\nJOIN Dogs d ON b.breed_code = d.breed_code\nJOIN Sizes s ON d.size_code = s.size_code\nGROUP BY b.breed_name\nORDER BY s.size_description DESC\nLIMIT 1;"}, {"isUser": true, "text": "How big is the bulldog?"}, {"isUser": false, "query": "SELECT T2.size_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code where T1.breed_name = \"Bulldog\"", "predict": "SELECT s.size_description\nFROM Breeds b\nJOIN Dogs d ON b.breed_code = d.breed_code\nJOIN Sizes s ON d.size_code = s.size_code\nWHERE b.breed_name = 'Bulldog'\nLIMIT 1;"}, {"isUser": true, "text": "What is the name of the breed with the most dogs?"}, {"isUser": false, "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT b.breed_name, COUNT(d.dog_id) AS num_dogs\nFROM Breeds b\nJOIN Dogs d ON b.breed_code = d.breed_code\nGROUP BY b.breed_name\nORDER BY num_dogs DESC\nLIMIT 1;"}]},
{"db_name": "orchestra", "turns": [{"isUser": true, "text": "List the name of the conductor with the most years of work."}, {"isUser": false, "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "predict": "SELECT Name \nFROM conductor \nORDER BY Year_of_Work DESC \nLIMIT 1;"}, {"isUser": true, "text": "How many years did Robert Craft work?"}, {"isUser": false, "query": "SELECT Year_of_Work FROM conductor where name = 'Robert Craft'", "predict": "SELECT Year_of_Work \nFROM conductor \nWHERE Name = 'Robert Craft';"}, {"isUser": true, "text": "List the name of the conductor with the least years of work"}, {"isUser": false, "query": "SELECT Name FROM conductor ORDER BY Year_of_Work asc LIMIT 1", "predict": "SELECT Name \nFROM conductor \nORDER BY Year_of_Work ASC \nLIMIT 1;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "which professional has done  the most treatments?"}, {"isUser": false, "query": "SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id order by COUNT ( * )   desc limit 1", "predict": "SELECT Professionals.professional_id,\n    Professionals.first_name,\n    Professionals.last_name,\n    COUNT(Treatments.treatment_id) AS treatment_count\nFROM \n    Professionals\nJOIN \n    Treatments ON Professionals.professional_id = Treatments.professional_id\nGROUP BY \n    Professionals.professional_id\nORDER BY \n    treatment_count DESC\nLIMIT 1;"}, {"isUser": true, "text": "what about the least treatments?"}, {"isUser": false, "query": "SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id order by COUNT ( * )   limit 1", "predict": "SELECT Professionals.professional_id,\n    Professionals.first_name,\n    Professionals.last_name,\n    COUNT(Treatments.treatment_id) AS treatment_count\nFROM \n    Professionals\nLEFT JOIN \n    Treatments ON Professionals.professional_id = Treatments.professional_id\nGROUP BY \n    Professionals.professional_id\nORDER BY \n    treatment_count ASC\nLIMIT 1;"}, {"isUser": true, "text": "How many professionals have at most 3 treatments?"}, {"isUser": false, "query": "select count ( * )  from  ( SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 group by T2.professional_id having count ( * )  < =  3 ) ", "predict": "SELECT COUNT(*) AS professionals_with_at_most_3_treatments\nFROM (\n    SELECT Professionals.professional_id,\n        COUNT(Treatments.treatment_id) AS treatment_count\n    FROM \n        Professionals\n    LEFT JOIN \n        Treatments ON Professionals.professional_id = Treatments.professional_id\n    GROUP BY \n        Professionals.professional_id\n    HAVING \n        treatment_count <= 3\n) AS subquery;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "The given codes of country is not speak in English please tell | Did you mean the codes of countries that do not speak English? | Thanks! Which countries do not speak English please tell country names"}, {"isUser": false, "query": "select name from country where code not in  ( SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ", "predict": "SELECT c.Name\nFROM country c\nLEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language != 'English' OR cl.Language IS NULL\nGROUP BY c.Name;"}, {"isUser": true, "text": "Thanks! Whose government forms Republic | Did you want the names of countries that do not speak English and whose government forms are not Republic? | Thanks! yes"}, {"isUser": false, "query": "select name from country where code in  ( SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ", "predict": "SELECT c.Name\nFROM country c\nLEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE (cl.Language != 'English' OR cl.Language IS NULL)\nAND c.GovernmentForm NOT LIKE '%Republic%'\nGROUP BY c.Name;"}]},
{"db_name": "voter_1", "turns": [{"isUser": true, "text": "Can you tell me what the total number of votes are for the states of \"NY\" and \"CA\"?"}, {"isUser": false, "query": "SELECT count ( * )  FROM votes WHERE state   =   'NY' or  state   =   'CA'", "predict": "SELECT state, COUNT(*) AS total_votes\nFROM VOTES\nWHERE state IN ('NY', 'CA')\nGROUP BY state;"}, {"isUser": true, "text": "Thank you!  Can you provide me with a list of all of the different contestant numbers?"}, {"isUser": false, "query": "SELECT distinct contestant_number FROM votes", "predict": "SELECT DISTINCT contestant_number\nFROM CONTESTANTS;"}, {"isUser": true, "text": "Okay.  How many vote IDs correspond to contestant number 5?"}, {"isUser": false, "query": "SELECT count ( * )  from votes where contestant_number  =  '5'", "predict": "SELECT COUNT(vote_id) AS total_votes\nFROM VOTES\nWHERE contestant_number = 5;"}]},
{"db_name": "poker_player", "turns": [{"isUser": true, "text": "List all the nationalities in the table with no duplicate records"}, {"isUser": false, "query": "SELECT distinct Nationality FROM people", "predict": "SELECT DISTINCT Nationality FROM people;"}, {"isUser": true, "text": "List all the nationalities in the table"}, {"isUser": false, "query": "SELECT Nationality FROM people", "predict": "SELECT Nationality FROM people;"}, {"isUser": true, "text": "Count the number of records where nationality is Russia"}, {"isUser": false, "query": "SELECT count ( * )  FROM people where Nationality  =  'Russia'", "predict": "SELECT COUNT(*) FROM people WHERE Nationality = 'Russia';"}, {"isUser": true, "text": "Count the number of records where nationality is Bulgaria"}, {"isUser": false, "query": "SELECT count ( * )  FROM people where Nationality  =  'Bulgaria'", "predict": "SELECT COUNT(*) FROM people WHERE Nationality = 'Bulgaria';"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "list the makers who designed more than 3 car models"}, {"isUser": false, "query": "SELECT * FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id HAVING count ( * )   >  3", "predict": "SELECT car_makers.Maker, COUNT(model_list.Model) AS NumberOfModels\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Id\nGROUP BY car_makers.Maker\nHAVING COUNT(model_list.Model) > 3;"}, {"isUser": true, "text": "what is the id of these makers"}, {"isUser": false, "query": "SELECT T1.id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id HAVING count ( * )   >  3", "predict": "SELECT car_makers.Id, car_makers.Maker, COUNT(model_list.Model) AS NumberOfModels\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Id\nGROUP BY car_makers.Id, car_makers.Maker\nHAVING COUNT(model_list.Model) > 3;"}, {"isUser": true, "text": "make a list so that the full name and id of the makers who designed more than 3 car models appear in the same table"}, {"isUser": false, "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id HAVING count ( * )   >  3", "predict": "SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.Model) AS NumberOfModels\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Id\nGROUP BY car_makers.Id, car_makers.FullName\nHAVING COUNT(model_list.Model) > 3;"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "What is the average horsepower?"}, {"isUser": false, "query": "SELECT avg ( Horsepower )  FROM cars_data", "predict": "SELECT AVG(CAST(Horsepower AS INTEGER)) AS AverageHorsepower\nFROM cars_data\nWHERE Horsepower != 'NA';"}, {"isUser": true, "text": "Which car has the largest horsepower?"}, {"isUser": false, "query": "SELECT Id FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1", "predict": "SELECT Model, Make, MAX(CAST(Horsepower AS INTEGER)) AS MaxHorsepower\nFROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nWHERE Horsepower != 'NA';"}, {"isUser": true, "text": "What is the accelerate of car 39?"}, {"isUser": false, "query": "SELECT accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1", "predict": "SELECT Accelerate\nFROM cars_data\nWHERE Id = 39;"}, {"isUser": true, "text": "Which cars have an accelerate larger than 19.0?"}, {"isUser": false, "query": "SELECT COUNT ( * )  FROM CARS_DATA WHERE Accelerate  >  19.0", "predict": "SELECT car_names.Make, car_names.Model\nFROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nWHERE Accelerate > 19.0;"}]},
{"db_name": "concert_singer", "turns": [{"isUser": true, "text": "When was the Auditions concert?"}, {"isUser": false, "query": "SELECT year from concert where concert_name  =  \"Auditions\"", "predict": "SELECT Year FROM concert WHERE concert_Name = 'Auditions';"}, {"isUser": true, "text": "When was the Super bootcamp concert?"}, {"isUser": false, "query": "SELECT year from concert where concert_name  =  \"Super bootcamp\"", "predict": "SELECT Year FROM concert WHERE concert_Name = 'Super bootcamp';"}, {"isUser": true, "text": "When was the Home Visits concert?"}, {"isUser": false, "query": "SELECT year from concert where concert_name  =  \"Home Visits\"", "predict": "SELECT Year FROM concert WHERE concert_Name = 'Home Visits';"}, {"isUser": true, "text": "How many concerts were there total in 2014 or 2015?"}, {"isUser": false, "query": "SELECT count ( * )  FROM concert WHERE YEAR   =   2014 OR YEAR   =   2015", "predict": "SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015');"}, {"isUser": true, "text": "And how many concerts were there just in 2014?"}, {"isUser": false, "query": "SELECT count ( * )  FROM concert WHERE YEAR   =   2014", "predict": "SELECT COUNT(*) FROM concert WHERE Year = '2014';"}, {"isUser": true, "text": "And how many were there in 2015?"}, {"isUser": false, "query": "SELECT count ( * )  FROM concert WHERE YEAR   =   2015", "predict": "SELECT COUNT(*) FROM concert WHERE Year = '2015';"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "what are the names of the tourneys?"}, {"isUser": false, "query": "SELECT distinct tourney_name FROM matches", "predict": "SELECT DISTINCT tourney_name FROM matches;"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "How many graduates of the school are there?"}, {"isUser": false, "query": "SELECT count ( * )   from students", "predict": "SELECT COUNT(*) AS NumberOfGraduates\nFROM Students\nWHERE date_left IS NOT NULL;"}, {"isUser": true, "text": "Ok. Who graduated the earliest? | What attributes of this student who graduated the earliest would you like to know? | Please tell me the first name, middle name, and last name."}, {"isUser": false, "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "predict": "SELECT first_name, middle_name, last_name\nFROM Students\nWHERE date_left IS NOT NULL\nORDER BY date_left ASC\nLIMIT 1;"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "Can you show the SourceAirport FlightNo 28?"}, {"isUser": false, "query": "SELECT SourceAirport FROM Flights WHERE FlightNo = '28'", "predict": "SELECT SourceAirport\nFROM flights\nWHERE FlightNo = 28;"}, {"isUser": true, "text": "Can you show the City of Airportcode APG?"}, {"isUser": false, "query": "select city from airports where airportcode = 'APG'", "predict": "SELECT City\nFROM airports\nWHERE AirportCode = 'APG';"}, {"isUser": true, "text": "Can Show the names of airports which do not have any flight in and out?"}, {"isUser": false, "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN  ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights ) ", "predict": "SELECT AirportName\nFROM airports\nWHERE AirportCode NOT IN (\n    SELECT SourceAirport FROM flights\n    UNION\n    SELECT DestAirport FROM flights\n);"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "when is the first transcript released?"}, {"isUser": false, "query": "SELECT * FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "predict": "SELECT MIN(transcript_date) AS first_transcript_date\nFROM Transcripts;"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "Find the names of the 3 youngest winners across all matches"}, {"isUser": false, "query": "SELECT DISTINCT winner_name  FROM matches ORDER BY winner_age LIMIT 3", "predict": "SELECT winner_name, MIN(winner_age) AS youngest_age\nFROM matches\nGROUP BY winner_name\nORDER BY youngest_age ASC\nLIMIT 3;"}, {"isUser": true, "text": "What are points of the 3 youngest winners?"}, {"isUser": false, "query": "SELECT loser_rank_points FROM matches ORDER BY winner_age LIMIT 3", "predict": "SELECT m.winner_name,\n    m.winner_age,\n    r.ranking_points\nFROM \n    matches m\nJOIN \n    rankings r ON m.winner_id = r.player_id\nWHERE \n    m.winner_age IN (\n        SELECT \n            MIN(winner_age) AS youngest_age\n        FROM \n            matches\n        GROUP BY \n            winner_name\n        ORDER BY \n            youngest_age ASC\n        LIMIT 3\n    )\nORDER BY \n    m.winner_age ASC;"}, {"isUser": true, "text": "Give me the age of the 3 youngest winners across all matches"}, {"isUser": false, "query": "SELECT winner_age FROM matches ORDER BY winner_age LIMIT 3", "predict": "SELECT DISTINCT winner_name, winner_age\nFROM matches\nWHERE winner_age IS NOT NULL\nORDER BY winner_age ASC\nLIMIT 3;"}]},
{"db_name": "network_1", "turns": [{"isUser": true, "text": "How many friends in this table?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Friend", "predict": "SELECT COUNT(*) AS total_friends\nFROM Friend;"}, {"isUser": true, "text": "Find average grade of the students? | Do you want me to find the average grade of entries in the Highschooler table? | Yes?"}, {"isUser": false, "query": "SELECT avg ( grade )  FROM Highschooler", "predict": "SELECT AVG(grade) AS average_grade\nFROM Highschooler;"}, {"isUser": true, "text": "Show names of all high school students?"}, {"isUser": false, "query": "SELECT DISTINCT name  FROM Highschooler", "predict": "SELECT name\nFROM Highschooler;"}]},
{"db_name": "poker_player", "turns": [{"isUser": true, "text": "How many poker players are there ?"}, {"isUser": false, "query": "select count ( * )  from poker_player", "predict": "SELECT COUNT(*) AS Total_Poker_Players\nFROM poker_player;"}, {"isUser": true, "text": "How many of them earning more than 300000"}, {"isUser": false, "query": "SELECT count ( * )  FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T2.Earnings  >  300000", "predict": "SELECT COUNT(*) AS Players_Earning_Over_300000\nFROM poker_player\nWHERE Earnings > 300000;"}, {"isUser": true, "text": "May i get the name detail of both players"}, {"isUser": false, "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T2.Earnings  >  300000", "predict": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE pp.Earnings > 300000;"}]},
{"db_name": "museum_visit", "turns": [{"isUser": true, "text": "How many museums do you have?"}, {"isUser": false, "query": "SELECT count ( * )  from museum", "predict": "SELECT COUNT(*) FROM museum;"}, {"isUser": true, "text": "What is the number of staff members in each museum?"}, {"isUser": false, "query": "SELECT Num_of_Staff from museum", "predict": "SELECT Name, Num_of_Staff FROM museum;"}, {"isUser": true, "text": "Can you tell me the id and the name of the museum, which has the most staff members?"}, {"isUser": false, "query": "SELECT Museum_ID, Name from museum order by Num_of_Staff desc limit 1", "predict": "SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum);"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "Hello!  Can you tell me how many students in total there are on this list?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Students", "predict": "SELECT COUNT(*) AS total_students FROM Students;"}, {"isUser": true, "text": "Excellent!  Can you show me a list of all 15 students and list their first names, middle names, and last names?"}, {"isUser": false, "query": "SELECT first_name,middle_name,last_name  FROM Students", "predict": "SELECT first_name, middle_name, last_name FROM Students LIMIT 15;"}, {"isUser": true, "text": "Thanks!  Can you update this list to include the \"date first registered\" information associated with each student?"}, {"isUser": false, "query": "SELECT date_first_registered  FROM Students", "predict": "SELECT first_name, middle_name, last_name, date_first_registered FROM Students LIMIT 15;"}]},
{"db_name": "pets_1", "turns": [{"isUser": true, "text": "How many students are there?"}, {"isUser": false, "query": "SELECT count ( StuID )  FROM student", "predict": "SELECT COUNT(*) FROM Student;"}, {"isUser": true, "text": "How old is the student whose last name is 'Smith’?"}, {"isUser": false, "query": "SELECT Age  FROM student where LName = 'Smith'", "predict": "SELECT Age FROM Student WHERE LName = 'Smith';"}, {"isUser": true, "text": "Can you plsease include their pets' id too?"}, {"isUser": false, "query": "SELECT T2.petid ,age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid WHERE T1.Lname   =   'Smith'", "predict": "SELECT Student.Age, Has_Pet.PetID\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nWHERE Student.LName = 'Smith';"}]},
{"db_name": "pets_1", "turns": [{"isUser": true, "text": "Hello!  Can you show me a list of all of the student IDs for students who have pets?"}, {"isUser": false, "query": "SELECT distinct T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid", "predict": "SELECT DISTINCT StuID\nFROM Has_Pet;"}, {"isUser": true, "text": "Great!  Can you show me the name (first and last), major and age of those two students?"}, {"isUser": false, "query": "SELECT distinct T1.Fname, T1.Lname, T1.major, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid", "predict": "SELECT S.Fname, S.LName, S.Major, S.Age\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID;"}, {"isUser": true, "text": "Great!  Now can you filter this list to show me which student(s) have a pet other than a cat?"}, {"isUser": false, "query": "SELECT Fname, Lname, major, age FROM student WHERE stuid NOT IN  ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' ) ", "predict": "SELECT S.Fname, S.LName, S.Major, S.Age\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType != 'cat';"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "how many dogs on the table"}, {"isUser": false, "query": "SELECT count ( * )  FROM Dogs", "predict": "SELECT COUNT(*) FROM Dogs;"}, {"isUser": true, "text": "what is the age of Kacey"}, {"isUser": false, "query": "SELECT age FROM Dogs where name  =  \"Kacey\"", "predict": "SELECT age FROM Dogs WHERE name = 'Kacey';"}, {"isUser": true, "text": "which dog is highest weight on table | Do you want the name of the dog with the highest weight? | exactly"}, {"isUser": false, "query": "SELECT name FROM Dogs order by weight desc limit 1", "predict": "SELECT name FROM Dogs WHERE weight = (SELECT MAX(weight) FROM Dogs);"}, {"isUser": true, "text": "what is the size code of BUL | Did you mean the  size codes of dogs with a breed code BUL? | exactly"}, {"isUser": false, "query": "SELECT size_code FROM Dogs where breed_code  =  \"BUL\"", "predict": "SELECT DISTINCT size_code FROM Dogs WHERE breed_code = 'BUL';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What are the names of the nations with the 3 lowest populations?"}, {"isUser": false, "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "predict": "SELECT Name\nFROM country\nORDER BY Population ASC\nLIMIT 3;"}, {"isUser": true, "text": "Which nation has the largest surface area?"}, {"isUser": false, "query": "SELECT Name FROM country ORDER BY surfacearea desc LIMIT 1", "predict": "SELECT Name\nFROM country\nORDER BY SurfaceArea DESC\nLIMIT 1;"}, {"isUser": true, "text": "What is the total population of Antarctica?"}, {"isUser": false, "query": "SELECT population from country where name  =  \"Antarctica\"", "predict": "SELECT SUM(Population) AS TotalPopulation\nFROM country\nWHERE Continent = 'Antarctica';"}]},
{"db_name": "network_1", "turns": [{"isUser": true, "text": "what is the average of friend id?"}, {"isUser": false, "query": "SELECT AVG ( friend_id )  FROM friend", "predict": "SELECT AVG(friend_id) AS average_friend_id FROM Friend;"}, {"isUser": true, "text": "what is the average of grades?"}, {"isUser": false, "query": "SELECT AVG ( grade )  FROM Highschooler", "predict": "SELECT AVG(grade) AS average_grade FROM Highschooler;"}, {"isUser": true, "text": "what is the highest grade?"}, {"isUser": false, "query": "SELECT MAX ( grade )  FROM Highschooler", "predict": "SELECT MAX(grade) AS highest_grade FROM Highschooler;"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "how many students are enrolled in a bachelor degree program?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'", "predict": "SELECT COUNT(DISTINCT se.student_id) AS NumberOfStudents\nFROM Student_Enrolment se\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE dp.degree_summary_name LIKE '%Bachelor%'"}, {"isUser": true, "text": "what are their student IDs?"}, {"isUser": false, "query": "SELECT t1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'", "predict": "SELECT DISTINCT se.student_id\nFROM Student_Enrolment se\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE dp.degree_summary_name LIKE '%Bachelor%'"}, {"isUser": true, "text": "Who are the students with student id 9?"}, {"isUser": false, "query": "SELECT DISTINCT t1.first_name, t1.middle_name, t1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE t1.student_id  =  9", "predict": "SELECT *\nFROM Students\nWHERE student_id = 9;"}, {"isUser": true, "text": "what about id 7?"}, {"isUser": false, "query": "SELECT DISTINCT t1.first_name, t1.middle_name, t1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE t1.student_id  =  7", "predict": "SELECT *\nFROM Students\nWHERE student_id = 7;"}, {"isUser": true, "text": "what are the degrees of the students in the bachelor program?"}, {"isUser": false, "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name, T3.degree_summary_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'", "predict": "SELECT DISTINCT dp.degree_summary_name\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nWHERE dp.degree_summary_name LIKE '%Bachelor%';"}, {"isUser": true, "text": "what are the different degree descriptions available?"}, {"isUser": false, "query": "SELECT DISTINCT T3.degree_summary_description FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id", "predict": "SELECT DISTINCT degree_summary_description\nFROM Degree_Programs;"}, {"isUser": true, "text": "what were the student ids in the bachelor program again?"}, {"isUser": false, "query": "SELECT DISTINCT T1.student_ID FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'", "predict": "SELECT DISTINCT se.student_id\nFROM Student_Enrolment se\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE dp.degree_summary_name LIKE '%Bachelor%'"}, {"isUser": true, "text": "what are those students first name, middle name, and last names?"}, {"isUser": false, "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'", "predict": "SELECT s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE dp.degree_summary_name LIKE '%Bachelor%';"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "How many makes are there for Chevrolet?"}, {"isUser": false, "query": "SELECT count ( DISTINCT Make )  FROM CAR_NAMES WHERE Model  =  'chevrolet'", "predict": "SELECT COUNT(DISTINCT Model) AS NumberOfModels\nFROM car_names\nWHERE Make = 'Chevrolet';"}, {"isUser": true, "text": "How many models are in the list?"}, {"isUser": false, "query": "SELECT count ( DISTINCT Model )  FROM CAR_NAMES", "predict": "SELECT COUNT(*) AS TotalModels\nFROM model_list;"}, {"isUser": true, "text": "Can you tell me which model has the most makes of cars?"}, {"isUser": false, "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count ( DISTINCT Make )  DESC LIMIT 1", "predict": "SELECT Model, COUNT(Maker) AS NumberOfMakes\nFROM model_list\nGROUP BY Model\nORDER BY NumberOfMakes DESC\nLIMIT 1;"}]},
{"db_name": "course_teach", "turns": [{"isUser": true, "text": "Can you show me the names of teachers with the course id for the courses they teach?"}, {"isUser": false, "query": "SELECT T2.Name, T1.course_id FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID", "predict": "SELECT t.Name, ca.Course_ID\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID;"}, {"isUser": true, "text": "Show me the teacher id with the number of courses they teach."}, {"isUser": false, "query": "SELECT T2.Name ,  COUNT ( * )  FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID GROUP BY T2.Name", "predict": "SELECT Teacher_ID, COUNT(Course_ID) AS NumberOfCourses\nFROM course_arrange\nGROUP BY Teacher_ID;"}, {"isUser": true, "text": "I want to know the names of the teachers below age 30."}, {"isUser": false, "query": "SELECT name from teacher where age < 30", "predict": "SELECT Name\nFROM teacher\nWHERE Age < 30;"}]},
{"db_name": "orchestra", "turns": [{"isUser": true, "text": "When are the auditions? | Would you like to know the dates of all performances with the type audition? | Yes that's exactly it"}, {"isUser": false, "query": "SELECT date FROM performance WHERE TYPE LIKE \"%audition%\"", "predict": "SELECT Date \nFROM performance \nWHERE Type = 'audition';"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "Can you show the birth date of player id 200002?"}, {"isUser": false, "query": "SELECT birth_date FROM players where player_id = 200002", "predict": "SELECT birth_date FROM players WHERE player_id = 200002;"}, {"isUser": true, "text": "What is the first name of player id 200001?"}, {"isUser": false, "query": "SELECT first_name FROM players where player_id = 200001", "predict": "SELECT first_name FROM players WHERE player_id = 200001;"}, {"isUser": true, "text": "Can you show the codes of countries that have more than 50 players?"}, {"isUser": false, "query": "SELECT country_code FROM players GROUP BY country_code HAVING count ( * )  > 50", "predict": "SELECT country_code, COUNT(player_id) AS player_count\nFROM players\nGROUP BY country_code\nHAVING player_count > 50;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "which region is the city kabul located"}, {"isUser": false, "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Name   =   \"Kabul\"", "predict": "SELECT c.Region\nFROM city AS ci\nJOIN country AS c ON ci.CountryCode = c.Code\nWHERE ci.Name = 'Kabul';"}, {"isUser": true, "text": "which region is the city herat located"}, {"isUser": false, "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Name   =   \"Herat\"", "predict": "SELECT c.Region\nFROM city AS ci\nJOIN country AS c ON ci.CountryCode = c.Code\nWHERE ci.Name = 'Herat';"}, {"isUser": true, "text": "which region is the city quandahar"}, {"isUser": false, "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Name   =   \"Qandahar\"", "predict": "SELECT c.Region\nFROM city AS ci\nJOIN country AS c ON ci.CountryCode = c.Code\nWHERE ci.Name = 'Quandahar';"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "What year has the most number of matches, please?"}, {"isUser": false, "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT year, COUNT(*) AS num_matches\nFROM matches\nGROUP BY year\nORDER BY num_matches DESC\nLIMIT 1;"}, {"isUser": true, "text": "What year has the least number of matches, please?"}, {"isUser": false, "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count ( * )  LIMIT 1", "predict": "SELECT year, COUNT(*) AS num_matches\nFROM matches\nGROUP BY year\nORDER BY num_matches ASC\nLIMIT 1;"}, {"isUser": true, "text": "How many matches were there that year?"}, {"isUser": false, "query": "SELECT YEAR, count ( * )  FROM matches GROUP BY YEAR ORDER BY count ( * )  LIMIT 1", "predict": "SELECT year, COUNT(*) AS num_matches\nFROM matches\nGROUP BY year\nORDER BY num_matches ASC\nLIMIT 1;"}, {"isUser": true, "text": "What about in 2016?"}, {"isUser": false, "query": "SELECT year, count ( * )  from matches where year  =  2016", "predict": "SELECT COUNT(*) AS num_matches\nFROM matches\nWHERE year = 2016;"}, {"isUser": true, "text": "How many of those were played on a hard surface?"}, {"isUser": false, "query": "SELECT count ( * )  from matches where surface  =  \"Hard\"", "predict": "SELECT COUNT(*) AS num_matches_on_hard\nFROM matches\nWHERE year = 2016 AND surface = 'Hard';"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "How many models does each car maker make? | Here is the result table of the full name of car makers and the number of models they made. For example, the car maker \"American Motor Company\" made 1 model. | What are all the ids of car makers?"}, {"isUser": false, "query": "SELECT  Id  FROM CAR_MAKERS", "predict": "SELECT cm.FullName, COUNT(ml.ModelId) AS NumberOfModels\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nGROUP BY cm.FullName;"}, {"isUser": true, "text": "And what is their country ids?"}, {"isUser": false, "query": "SELECT  Country  FROM CAR_MAKERS", "predict": "SELECT cm.FullName, COUNT(ml.ModelId) AS NumberOfModels, c.CountryId\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nJOIN countries c ON cm.Country = c.CountryName\nGROUP BY cm.FullName, c.CountryId;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What is the average percent?"}, {"isUser": false, "query": "select avg ( percentage )  from countrylanguage", "predict": "SELECT AVG(Percentage) AS AveragePercentage\nFROM countrylanguage;"}, {"isUser": true, "text": "Which code of country has the highest dutch speaking population?"}, {"isUser": false, "query": "select countrycode from countrylanguage where language  =  \"Dutch\" order by percentage desc limit 1", "predict": "SELECT CountryCode, (Population * Percentage / 100) AS DutchSpeakingPopulation\nFROM countrylanguage\nJOIN country ON country.Code = countrylanguage.CountryCode\nWHERE Language = 'Dutch'\nORDER BY DutchSpeakingPopulation DESC\nLIMIT 1;"}, {"isUser": true, "text": "The difference of the overall percent | Do you mean average percent? | yes"}, {"isUser": false, "query": "select avg ( percentage )  from countrylanguage where language  =  \"Papiamento\"", "predict": "SELECT AVG(Percentage) AS AvgPerc\n    FROM countrylanguage\n)\n\n-- Calculate the difference from the average for each language\nSELECT \n    countrylanguage.Language, \n    countrylanguage.Percentage,\n    (countrylanguage.Percentage - (SELECT AvgPerc FROM AveragePercentage)) AS DifferenceFromAverage\nFROM countrylanguage;"}]},
{"db_name": "museum_visit", "turns": [{"isUser": true, "text": "What is the membership level of Gonzalo Higuaín ?"}, {"isUser": false, "query": "SELECT Level_of_membership FROM visitor WHERE name  =   \"Gonzalo Higuaín \"", "predict": "SELECT Level_of_membership\nFROM visitor\nWHERE Name = 'Gonzalo Higuaín';"}, {"isUser": true, "text": "whose membership level is 5?"}, {"isUser": false, "query": "SELECT name FROM visitor WHERE Level_of_membership =  5", "predict": "SELECT Name\nFROM visitor\nWHERE Level_of_membership = 5;"}, {"isUser": true, "text": "how many numbers of persons whose membership level is greater than 5?"}, {"isUser": false, "query": "SELECT count ( * )  FROM visitor WHERE Level_of_membership>5", "predict": "SELECT COUNT(*)\nFROM visitor\nWHERE Level_of_membership > 5;"}, {"isUser": true, "text": "What is the age of membership level 8?"}, {"isUser": false, "query": "SELECT age FROM visitor WHERE Level_of_membership   = 8", "predict": "SELECT Age\nFROM visitor\nWHERE Level_of_membership = 8;"}, {"isUser": true, "text": "how many persons who have membership level greater than 4?"}, {"isUser": false, "query": "SELECT count ( * )  FROM visitor WHERE Level_of_membership > 4", "predict": "SELECT COUNT(*)\nFROM visitor\nWHERE Level_of_membership > 4;"}, {"isUser": true, "text": "please sort the names of persons whose age from old to young according to the membership level?"}, {"isUser": false, "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "predict": "SELECT Name, Age\nFROM visitor\nORDER BY Age DESC, Level_of_membership;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "Which country speaks the largest number of languages?"}, {"isUser": false, "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode GROUP BY T1.Name ORDER BY COUNT ( * )  DESC LIMIT 1", "predict": "SELECT CountryCode, COUNT(Language) AS NumberOfLanguages\nFROM countrylanguage\nGROUP BY CountryCode\nORDER BY NumberOfLanguages DESC\nLIMIT 1;"}, {"isUser": true, "text": "How many languages are spoken in Canada?"}, {"isUser": false, "query": "SELECT count ( * )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode where T1.name  =  \"Canada\"", "predict": "SELECT COUNT(Language) AS NumberOfLanguages\nFROM countrylanguage\nWHERE CountryCode = 'CAN';"}, {"isUser": true, "text": "What are the names of those languages?"}, {"isUser": false, "query": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode where T1.name  =  \"Canada\"", "predict": "SELECT Language\nFROM countrylanguage\nWHERE CountryCode = 'CAN';"}, {"isUser": true, "text": "How many countries is Chinese spoken in?"}, {"isUser": false, "query": "SELECT count ( distinct CountryCode )  FROM countrylanguage WHERE Language  =  \"Chinese\"", "predict": "SELECT COUNT(DISTINCT CountryCode) AS NumberOfCountries\nFROM countrylanguage\nWHERE Language = 'Chinese';"}, {"isUser": true, "text": "Which countries are in North America?"}, {"isUser": false, "query": "SELECT NAME FROM country WHERE Continent  =  \"North America\"", "predict": "SELECT Name\nFROM country\nWHERE Continent = 'North America';"}, {"isUser": true, "text": "What are the official languages of these countries?"}, {"isUser": false, "query": "SELECT LANGUAGE FROM countrylanguage WHERE countrycode in  ( SELECT Code FROM country WHERE Continent  =  \"North America\" )  and IsOfficial  =  \"T\"", "predict": "SELECT c.Name AS CountryName, cl.Language\nFROM country AS c\nJOIN countrylanguage AS cl ON c.Code = cl.CountryCode\nWHERE c.Continent = 'North America' AND cl.IsOfficial = 'T';"}, {"isUser": true, "text": "What is the life expectancy in Canada?"}, {"isUser": false, "query": "SELECT LifeExpectancy FROM country WHERE name  =  \"Canada\"", "predict": "SELECT LifeExpectancy\nFROM country\nWHERE Name = 'Canada';"}]},
{"db_name": "pets_1", "turns": [{"isUser": true, "text": "How many students have more than one pet?"}, {"isUser": false, "query": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid GROUP BY T1.stuid HAVING count ( * )   >  1", "predict": "SELECT COUNT(DISTINCT StuID) AS NumberOfStudents\nFROM (\n    SELECT StuID, COUNT(PetID) AS PetCount\n    FROM Has_Pet\n    GROUP BY StuID\n    HAVING PetCount > 1\n) AS StudentsWithMultiplePets;"}, {"isUser": true, "text": "What are their names?"}, {"isUser": false, "query": "SELECT T1.lname, T1.fname  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid GROUP BY T1.stuid HAVING count ( * )   >  1", "predict": "SELECT S.Fname, S.LName\nFROM Student S\nJOIN (\n    SELECT StuID\n    FROM Has_Pet\n    GROUP BY StuID\n    HAVING COUNT(PetID) > 1\n) AS MultiplePets ON S.StuID = MultiplePets.StuID;"}, {"isUser": true, "text": "What gender is Kim Tracy?"}, {"isUser": false, "query": "SELECT T1.lname, T1.fname, T1.sex  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid GROUP BY T1.stuid HAVING count ( * )   >  1", "predict": "SELECT Sex\nFROM Student\nWHERE Fname = 'Kim' AND LName = 'Tracy';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "HOw many regions are there in ASia?"}, {"isUser": false, "query": "select count ( * )  from  ( SELECT region FROM country WHERE Continent   =   \"Asia\" group by region ) ", "predict": "SELECT COUNT(DISTINCT Region) AS NumberOfRegions\nFROM country\nWHERE Continent = 'Asia';"}, {"isUser": true, "text": "What about in Europe?"}, {"isUser": false, "query": "select count ( * )  from  ( SELECT region FROM country WHERE Continent   =   \"Europe\" group by region ) ", "predict": "SELECT COUNT(DISTINCT Region) AS NumberOfRegions\nFROM country\nWHERE Continent = 'Europe';"}, {"isUser": true, "text": "What is the surface area of all 10 of them?"}, {"isUser": false, "query": "SELECT sum ( SurfaceArea )  FROM country WHERE Continent   =   \"Asia\" OR Continent   =   \"Europe\"", "predict": "SELECT SUM(SurfaceArea) AS TotalSurfaceArea\nFROM country\nWHERE Continent = 'Europe';"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "Hello!  How many template IDs have the description of \"Presentation\"?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code   =  T2.template_type_code WHERE T1.template_type_description   =   \"Presentation\"", "predict": "SELECT COUNT(DISTINCT Templates.Template_ID) AS NumberOfTemplates\nFROM Templates\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation';"}, {"isUser": true, "text": "Thank you!  Can you please provide me with the list of the template ids with the template type description of \"Presentation\"?"}, {"isUser": false, "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code   =  T2.template_type_code WHERE T1.template_type_description   =   \"Presentation\"", "predict": "SELECT DISTINCT Templates.Template_ID\nFROM Templates\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation';"}, {"isUser": true, "text": "Can you provide me with the template type code for these three Temple ids?"}, {"isUser": false, "query": "SELECT T2.template_id, T2.Template_Type_Code FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code   =  T2.template_type_code WHERE T1.template_type_description   =   \"Presentation\"", "predict": "SELECT Template_ID, Template_Type_Code\nFROM Templates\nWHERE Template_ID IN (1, 2, 3);"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "How many times at most can a course enrollment result show in different transcripts?"}, {"isUser": false, "query": "SELECT count ( * )   FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT MAX(count) AS max_times_in_transcripts\nFROM (\n    SELECT student_course_id, COUNT(transcript_id) AS count\n    FROM Transcript_Contents\n    GROUP BY student_course_id\n) AS counts;"}, {"isUser": true, "text": "What are the course enrollment ids for those, please?"}, {"isUser": false, "query": "SELECT student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT student_course_id, COUNT(DISTINCT transcript_id) AS transcript_count\n    FROM Transcript_Contents\n    GROUP BY student_course_id\n),\nMaxCount AS (\n    SELECT MAX(transcript_count) AS max_count\n    FROM EnrollmentCounts\n)\n-- Now, select the course enrollment IDs that match the maximum count\nSELECT student_course_id\nFROM EnrollmentCounts\nJOIN MaxCount ON EnrollmentCounts.transcript_count = MaxCount.max_count;"}, {"isUser": true, "text": "What is the least number of times of a course enrollment result shows in different transcripts?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  LIMIT 1", "predict": "SELECT MIN(count) AS min_times_in_transcripts\nFROM (\n    SELECT student_course_id, COUNT(transcript_id) AS count\n    FROM Transcript_Contents\n    GROUP BY student_course_id\n) AS counts;"}, {"isUser": true, "text": "What are the course enrollment ids for those, please?"}, {"isUser": false, "query": "SELECT  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  LIMIT 1", "predict": "SELECT student_course_id, COUNT(DISTINCT transcript_id) AS transcript_count\n    FROM Transcript_Contents\n    GROUP BY student_course_id\n),\n-- Find the minimum count of appearances\nMinCount AS (\n    SELECT MIN(transcript_count) AS min_count\n    FROM EnrollmentCounts\n)\n-- Now, select the course enrollment IDs that match the minimum count\nSELECT student_course_id\nFROM EnrollmentCounts\nJOIN MinCount ON EnrollmentCounts.transcript_count = MinCount.min_count;"}, {"isUser": true, "text": "What is the average student course id?"}, {"isUser": false, "query": "SELECT avg ( student_course_id )  FROM Transcript_Contents", "predict": "SELECT AVG(student_course_id) AS average_student_course_id\nFROM Student_Enrolment_Courses;"}]},
{"db_name": "real_estate_properties", "turns": [{"isUser": true, "text": "What are the names of the properties with more that one room?"}, {"isUser": false, "query": "SELECT property_name FROM Properties WHERE room_count  >  1", "predict": "SELECT property_name\nFROM Properties\nWHERE room_count > 1;"}, {"isUser": true, "text": "What are the names of the properties that are either houses or apartments with more than one room?"}, {"isUser": false, "query": "SELECT property_name FROM Properties WHERE property_type_code   =   \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code   =   \"Apartment\" AND room_count  >  1", "predict": "SELECT property_name\nFROM Properties\nWHERE room_count > 1 AND (property_type_code = 'HSE' OR property_type_code = 'APT');"}, {"isUser": true, "text": "How many rooms do each of those have?"}, {"isUser": false, "query": "SELECT property_name, room_count FROM Properties WHERE property_type_code   =   \"House\" UNION SELECT property_name, room_count FROM Properties WHERE property_type_code   =   \"Apartment\" AND room_count  >  1", "predict": "SELECT property_name, room_count\nFROM Properties\nWHERE room_count > 1 AND (property_type_code = 'HSE' OR property_type_code = 'APT');"}, {"isUser": true, "text": "What is the average agreed selling price of all houses with more than one room?"}, {"isUser": false, "query": "SELECT avg ( agreed_selling_price )  FROM Properties WHERE property_type_code   =   \"House\" AND room_count  >  1", "predict": "SELECT AVG(agreed_selling_price) AS average_selling_price\nFROM Properties\nWHERE room_count > 1 AND property_type_code = 'HSE';"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "How many airports are there?"}, {"isUser": false, "query": "SELECT count ( * )  from airports", "predict": "SELECT COUNT(*) FROM airports;"}, {"isUser": true, "text": "How many have departing flights?"}, {"isUser": false, "query": "SELECT count ( distinct sourceairport )  from flights", "predict": "SELECT COUNT(DISTINCT SourceAirport) FROM flights;"}, {"isUser": true, "text": "How many will arrive in ASY?"}, {"isUser": false, "query": "SELECT count ( * )  from flights where destairport like \"%ASY%\"", "predict": "SELECT COUNT(DISTINCT DestAirport) FROM flights WHERE DestAirport = 'ASY';"}, {"isUser": true, "text": "Of those flights, how many come from APG and ABR?"}, {"isUser": false, "query": "SELECT count ( * )  from flights where destairport like \"%ASY%\" and sourceairport like \"%APG%\" UNION SELECT count ( * )  from flights where destairport like \"%ASY%\" and sourceairport like \"%ABR%\"", "predict": "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ASY' AND SourceAirport IN ('APG', 'ABR');"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "how many car makers are their in germany"}, {"isUser": false, "query": "SELECT count ( * )  FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'germany'", "predict": "SELECT COUNT(*) AS NumberOfCarMakers\nFROM car_makers\nWHERE Country = 'Germany';"}, {"isUser": true, "text": "what are their names"}, {"isUser": false, "query": "SELECt T1.maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'germany'", "predict": "SELECT Maker, FullName\nFROM car_makers\nWHERE Country = 'Germany';"}, {"isUser": true, "text": "how many cars are their in usa | do you mean car makers? | yes"}, {"isUser": false, "query": "SELECt count ( T1.maker )  FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'usa'", "predict": "SELECT COUNT(*) AS NumberOfCarMakers\nFROM car_makers\nWHERE Country = 'USA';"}, {"isUser": true, "text": "what are their names"}, {"isUser": false, "query": "SELECt T1.maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'usa'", "predict": "SELECT Maker, FullName\nFROM car_makers\nWHERE Country = 'USA';"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "Can you show the names of owners and the states they live in? | Do you want the first and last names of owners and the states they live in? | Yes please."}, {"isUser": false, "query": "SELECT first_name ,  last_name, state FROM Owners", "predict": "SELECT first_name, last_name, state\nFROM Owners;"}, {"isUser": true, "text": "Hmm, I want to know the first and last names of owners and also their emails."}, {"isUser": false, "query": "SELECT first_name ,  last_name, email_address FROM Owners", "predict": "SELECT first_name, last_name, email_address\nFROM Owners;"}, {"isUser": true, "text": "Can you list the first and last name with emails of owners living in the state whose name contains the substring \"North\"?"}, {"isUser": false, "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "predict": "SELECT first_name, last_name, email_address\nFROM Owners\nWHERE state LIKE '%North%';"}]},
{"db_name": "employee_hire_evaluation", "turns": [{"isUser": true, "text": "Which cities do more than one employee under age 30 come from?"}, {"isUser": false, "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count ( * )   >  1", "predict": "SELECT City, COUNT(*) AS Num_Employees\nFROM employee\nWHERE Age < 30\nGROUP BY City\nHAVING COUNT(*) > 1;"}, {"isUser": true, "text": "Which cities do more than one employee over age 30 come from?"}, {"isUser": false, "query": "SELECT city FROM employee WHERE age  >  30 GROUP BY city HAVING count ( * )   >  1", "predict": "SELECT City, COUNT(*) AS Num_Employees\nFROM employee\nWHERE Age > 30\nGROUP BY City\nHAVING COUNT(*) > 1;"}, {"isUser": true, "text": "What are the names and ages of all employees over age 30?"}, {"isUser": false, "query": "SELECT Name, Age FROM employee WHERE age  >  30", "predict": "SELECT Name, Age\nFROM employee\nWHERE Age > 30;"}, {"isUser": true, "text": "What are the names and ages of all employees under age 30?"}, {"isUser": false, "query": "SELECT Name, Age FROM employee WHERE age  <  30", "predict": "SELECT Name, Age\nFROM employee\nWHERE Age < 30;"}, {"isUser": true, "text": "What cities are all employees under age 29 from?"}, {"isUser": false, "query": "SELECT City FROM employee WHERE age  <  29", "predict": "SELECT City\nFROM employee\nWHERE Age < 29\nGROUP BY City;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "How many dog owner's are there?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Owners", "predict": "SELECT COUNT(DISTINCT owner_id) AS NumberOfOwners FROM Owners;"}, {"isUser": true, "text": "What is the age of the youngest dog?"}, {"isUser": false, "query": "SELECT age FROM Dogs ORDER BY age ASC LIMIT 1", "predict": "SELECT MIN(age) AS YoungestDogAge FROM Dogs;"}, {"isUser": true, "text": "What is the name of the dog who is 1 year old?"}, {"isUser": false, "query": "SELECT name FROM Dogs ORDER BY age ASC LIMIT 1", "predict": "SELECT name FROM Dogs WHERE age = '1';"}, {"isUser": true, "text": "Of the 15 owners, what is the name of the owner who owns Evangeline?"}, {"isUser": false, "query": "SELECT T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Evangeline\"", "predict": "SELECT Owners.first_name, Owners.last_name\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nWHERE Dogs.name = 'Evangeline';"}]},
{"db_name": "singer", "turns": [{"isUser": true, "text": "Can you list all the singer ids that aren't present in the song table?"}, {"isUser": false, "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN  ( SELECT Singer_ID FROM song ) ", "predict": "SELECT Singer_ID\nFROM singer s\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM song\n    WHERE song.Singer_ID = s.Singer_ID\n);"}]},
{"db_name": "singer", "turns": [{"isUser": true, "text": "What are the names of the singers who were born in either 1948 or 1949?"}, {"isUser": false, "query": "SELECT Name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949", "predict": "SELECT Name \nFROM singer \nWHERE Birth_Year IN (1948, 1949);"}, {"isUser": true, "text": "What is their citizenship?"}, {"isUser": false, "query": "SELECT Citizenship FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949", "predict": "SELECT Name, Citizenship \nFROM singer \nWHERE Birth_Year IN (1948, 1949);"}, {"isUser": true, "text": "Of the singers that were born in 1948 or 1949, which had the highest net worth?"}, {"isUser": false, "query": "SELECT name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions desc limit 1", "predict": "SELECT Name, MAX(Net_Worth_Millions) AS Highest_Net_Worth\nFROM singer\nWHERE Birth_Year IN (1948, 1949);"}, {"isUser": true, "text": "Did she have a net worth that was over 30 million?"}, {"isUser": false, "query": "SELECT name,Net_Worth_Millions FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions desc limit 1", "predict": "SELECT Name, Net_Worth_Millions\nFROM singer\nWHERE Birth_Year IN (1948, 1949)\nORDER BY Net_Worth_Millions DESC\nLIMIT 1;"}, {"isUser": true, "text": "What was the lowest net worth of any singer who was born between 1948 and 1949?"}, {"isUser": false, "query": "SELECT name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions limit 1", "predict": "SELECT MIN(Net_Worth_Millions) AS Lowest_Net_Worth\nFROM singer\nWHERE Birth_Year IN (1948, 1949);"}]},
{"db_name": "battle_death", "turns": [{"isUser": true, "text": "How many battles did not lose any ship with tonnage 225?"}, {"isUser": false, "query": "SELECT count ( * )  FROM battle WHERE id NOT IN  (  SELECT lost_in_battle FROM ship WHERE tonnage   =   '225'  ) ", "predict": "SELECT COUNT(DISTINCT b.id)\nFROM battle b\nWHERE b.id NOT IN (\n    SELECT DISTINCT s.lost_in_battle\n    FROM ship s\n    WHERE s.tonnage = '225'\n);"}, {"isUser": true, "text": "How many battles did lose a ship with tonnage 225?"}, {"isUser": false, "query": "SELECT count ( * )  FROM battle WHERE id IN  (  SELECT lost_in_battle FROM ship WHERE tonnage   =   '225'  ) ", "predict": "SELECT COUNT(DISTINCT b.id)\nFROM battle b\nWHERE b.id IN (\n    SELECT DISTINCT s.lost_in_battle\n    FROM ship s\n    WHERE s.tonnage = '225'\n);"}, {"isUser": true, "text": "How many ships have a tonnage of 225?"}, {"isUser": false, "query": "SELECT count ( * )  FROM ship WHERE tonnage   =   '225'", "predict": "SELECT COUNT(*)\nFROM ship\nWHERE tonnage = '225';"}, {"isUser": true, "text": "Who won in the battle when the ship with a tonnage of 225 was sunk?"}, {"isUser": false, "query": "SELECT result FROM battle WHERE id IN  (  SELECT lost_in_battle FROM ship WHERE tonnage   =   '225'  ) ", "predict": "SELECT b.result\nFROM battle b\nJOIN ship s ON b.id = s.lost_in_battle\nWHERE s.tonnage = '225';"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "tell me the FullName of the maker amc"}, {"isUser": false, "query": "SELECT Fullname FROM car_makers WHERE maker  =  \"amc\"", "predict": "SELECT FullName FROM car_makers WHERE Maker = 'amc';"}, {"isUser": true, "text": "Tell me CountryName for Countryid  1, 2, and 3."}, {"isUser": false, "query": "SELECT countryname FROM countries WHERE countryid = 1 or countryid = 2 or countryid = 3 ) ", "predict": "SELECT CountryName FROM countries WHERE CountryId IN (1, 2, 3);"}, {"isUser": true, "text": "Tell me the model id made by amc..."}, {"isUser": false, "query": "SELECT modelid FROM model_list WHERE model  =  \"amc\"", "predict": "SELECT ModelId FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'amc');"}, {"isUser": true, "text": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model ?"}, {"isUser": false, "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country GROUP BY T1.countryId HAVING count ( * )   >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T3.Model   =   'fiat'", "predict": "SELECT DISTINCT c.CountryId, c.CountryName\nFROM countries c\nJOIN car_makers cm ON c.CountryId = cm.Country\nLEFT JOIN model_list ml ON cm.Id = ml.Maker\nWHERE cm.Maker IN (SELECT Maker FROM model_list WHERE Model = 'fiat')\n   OR c.CountryId IN (\n       SELECT Country\n       FROM car_makers\n       GROUP BY Country\n       HAVING COUNT(Id) > 3\n   );"}]},
{"db_name": "poker_player", "turns": [{"isUser": true, "text": "What is the money rank of the poker player with the highest earnings?"}, {"isUser": false, "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "predict": "SELECT Money_Rank\nFROM poker_player\nORDER BY Earnings DESC\nLIMIT 1;"}, {"isUser": true, "text": "What is the highest earner's people ID?"}, {"isUser": false, "query": "SELECT People_ID FROM poker_player ORDER BY Earnings DESC LIMIT 1", "predict": "SELECT People_ID\nFROM poker_player\nORDER BY Earnings DESC\nLIMIT 1;"}, {"isUser": true, "text": "What was their best finish?"}, {"isUser": false, "query": "SELECT Best_Finish FROM poker_player ORDER BY Earnings DESC LIMIT 1", "predict": "SELECT Best_Finish\nFROM poker_player\nWHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);"}, {"isUser": true, "text": "And what is the highest earning?"}, {"isUser": false, "query": "SELECT Earnings FROM poker_player order by Earnings desc limit 1", "predict": "SELECT MAX(Earnings) AS Highest_Earning\nFROM poker_player;"}]},
{"db_name": "orchestra", "turns": [{"isUser": true, "text": "How many orchestras are there?"}, {"isUser": false, "query": "SELECT COUNT ( DISTINCT Orchestra )  FROM orchestra", "predict": "SELECT COUNT(*) FROM orchestra;"}, {"isUser": true, "text": "How many of them are there have no performance? | Did you mean to ask for the number of orchestras that have no performance? | Yes"}, {"isUser": false, "query": "SELECT COUNT ( Orchestra )  FROM orchestra WHERE Orchestra_ID NOT IN  ( SELECT Orchestra_ID FROM performance ) ", "predict": "SELECT COUNT(*) \nFROM orchestra \nLEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID\nWHERE performance.Performance_ID IS NULL;"}, {"isUser": true, "text": "Can you show me its id and its name please?"}, {"isUser": false, "query": "SELECT Orchestra_ID, Orchestra FROM orchestra WHERE Orchestra_ID NOT IN  ( SELECT Orchestra_ID FROM performance ) ", "predict": "SELECT orchestra.Orchestra_ID, orchestra.Orchestra\nFROM orchestra \nLEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID\nWHERE performance.Performance_ID IS NULL;"}]},
{"db_name": "concert_singer", "turns": [{"isUser": true, "text": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015."}, {"isUser": false, "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id   =   T2.stadium_id WHERE T1.Year   =   2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id   =   T2.stadium_id WHERE T1.Year   =   2015", "predict": "SELECT DISTINCT s.Name, s.Location\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year IN ('2014', '2015')\nGROUP BY s.Stadium_ID\nHAVING COUNT(DISTINCT c.Year) = 2;"}, {"isUser": true, "text": "Which year did the concert Super bootcamp happen in?"}, {"isUser": false, "query": "SELECT year from concert where concert_name like \"%Super bootcamp%\"", "predict": "SELECT Year\nFROM concert\nWHERE concert_Name = 'Super bootcamp';"}, {"isUser": true, "text": "And the concert named Auditions?"}, {"isUser": false, "query": "SELECT year from concert where concert_name like \"%Auditions%\"", "predict": "SELECT Year\nFROM concert\nWHERE concert_Name = 'Auditions';"}, {"isUser": true, "text": "What stadium did it happen in?"}, {"isUser": false, "query": "SELECT T1.name from stadium as T1 join  concert as T2 on T1.stadium_id  =  T2.stadium_id where T2.concert_name like \"%Auditions%\"", "predict": "SELECT s.Name, s.Location\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.concert_Name = 'Auditions';"}, {"isUser": true, "text": "What are the names and locations of stadiums which had some concerts in either 2014 or 2015?"}, {"isUser": false, "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 or T1.Year  =  2015", "predict": "SELECT DISTINCT s.Name, s.Location\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year IN ('2014', '2015');"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "how many flights does United Airlines operate in USA? | What do you mean by operate in USA? | how many flights does United Airlines have?"}, {"isUser": false, "query": "SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\"", "predict": "SELECT COUNT(*) AS FlightsInUSA\n   FROM flights\n   JOIN airlines ON flights.Airline = airlines.uid\n   JOIN airports AS source ON flights.SourceAirport = source.AirportCode\n   JOIN airports AS dest ON flights.DestAirport = dest.AirportCode\n   WHERE airlines.Airline = 'United Airlines' AND source.Country = 'USA' AND dest.Country = 'USA';"}, {"isUser": true, "text": "and how many destination airports do these flights have?"}, {"isUser": false, "query": "SELECT count ( distinct T2.DestAirport )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\"", "predict": "SELECT COUNT(DISTINCT DestAirport) AS UniqueDestinationAirports\n   FROM flights\n   JOIN airlines ON flights.Airline = airlines.uid\n   JOIN airports AS source ON flights.SourceAirport = source.AirportCode\n   JOIN airports AS dest ON flights.DestAirport = dest.AirportCode\n   WHERE airlines.Airline = 'United Airlines' AND source.Country = 'USA' AND dest.Country = 'USA';"}, {"isUser": true, "text": "how many of those flights go to airport \"ASY\"?"}, {"isUser": false, "query": "SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\" AND T2.DestAirport   =   \"ASY\"", "predict": "SELECT COUNT(*) AS FlightsToASY\n   FROM flights\n   JOIN airlines ON flights.Airline = airlines.uid\n   JOIN airports AS source ON flights.SourceAirport = source.AirportCode\n   JOIN airports AS dest ON flights.DestAirport = dest.AirportCode\n   WHERE airlines.Airline = 'United Airlines' AND source.Country = 'USA' AND dest.AirportCode = 'ASY';"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "what are the degree_program_id in the Table Name: Student_Enrolment?"}, {"isUser": false, "query": "SELECT degree_program_id from Student_Enrolment", "predict": "SELECT DISTINCT degree_program_id FROM Student_Enrolment;"}, {"isUser": true, "text": "what are the semester_id in the Table Name: Student_Enrolment?"}, {"isUser": false, "query": "SELECT semester_id from Student_Enrolment", "predict": "SELECT DISTINCT semester_id FROM Student_Enrolment;"}, {"isUser": true, "text": "what are the semester_name in the Table Name: Semesters?"}, {"isUser": false, "query": "SELECT semester_name from semesters", "predict": "SELECT DISTINCT semester_name FROM Semesters;"}, {"isUser": true, "text": "what is the semester which most student registered in? show both the name and the id."}, {"isUser": false, "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id   =   T2.semester_id GROUP BY T1.semester_id ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT Semesters.semester_id, Semesters.semester_name, COUNT(Student_Enrolment.student_id) AS student_count\nFROM Student_Enrolment\nJOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id\nGROUP BY Semesters.semester_id, Semesters.semester_name\nORDER BY student_count DESC\nLIMIT 1;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What is the average life expectancy for each government form?"}, {"isUser": false, "query": "SELECT GovernmentForm, avg ( LifeExpectancy )  FROM country GROUP BY GovernmentForm", "predict": "SELECT GovernmentForm, AVG(LifeExpectancy) AS AverageLifeExpectancy\nFROM country\nGROUP BY GovernmentForm;"}, {"isUser": true, "text": "Can you show me only those government forms whose average life expectancy is greater than 72?"}, {"isUser": false, "query": "SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72", "predict": "SELECT GovernmentForm, AVG(LifeExpectancy) AS AverageLifeExpectancy\nFROM country\nGROUP BY GovernmentForm\nHAVING AVG(LifeExpectancy) > 72;"}, {"isUser": true, "text": "What is the population of each of those?"}, {"isUser": false, "query": "SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72", "predict": "SELECT GovernmentForm, SUM(Population) AS TotalPopulation\nFROM country\nGROUP BY GovernmentForm\nHAVING AVG(LifeExpectancy) > 72;"}]},
{"db_name": "tvshow", "turns": [{"isUser": true, "text": "Which TV channels do not play any cartoons by Ben Jones?  List the ids."}, {"isUser": false, "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by   =   'Ben Jones'", "predict": "SELECT id \nFROM TV_Channel\nWHERE id NOT IN (\n    SELECT Channel \n    FROM Cartoon \n    WHERE Directed_by = 'Ben Jones'\n);"}, {"isUser": true, "text": "And which channels play Ben Jones's cartoons?"}, {"isUser": false, "query": "SELECT id FROM TV_Channel where id in  ( SELECT channel FROM cartoon WHERE directed_by   =   'Ben Jones' ) ", "predict": "SELECT DISTINCT Channel \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones';"}, {"isUser": true, "text": "What cartoon titles do channels play?"}, {"isUser": false, "query": "SELECT Title FROM Cartoon where directed_by   =   'Ben Jones'", "predict": "SELECT Channel, Title \nFROM Cartoon;"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "Can you show me document ids?"}, {"isUser": false, "query": "SELECT document_id FROM Paragraphs", "predict": "SELECT Document_ID FROM Documents;"}, {"isUser": true, "text": "Can you show the number of paragraphs in each document?"}, {"isUser": false, "query": "SELECT document_id ,  count ( * )  FROM Paragraphs GROUP BY document_id", "predict": "SELECT Document_ID, COUNT(Paragraph_ID) AS NumberOfParagraphs\nFROM Paragraphs\nGROUP BY Document_ID;"}, {"isUser": true, "text": "Can you order it by document id?"}, {"isUser": false, "query": "SELECT document_id ,  count ( * )  FROM Paragraphs GROUP BY document_id ORDER BY document_id", "predict": "SELECT Document_ID, COUNT(Paragraph_ID) AS NumberOfParagraphs\nFROM Paragraphs\nGROUP BY Document_ID\nORDER BY Document_ID;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "Can you show me a list of owner ids and zip codes? | can  you  give more infor  about  this question? | I want you to extract just the owner ids and zip codes from the table. Does it make sense?"}, {"isUser": false, "query": "SELECT  \nowner_id,zip_code from Owners", "predict": "SELECT owner_id, zip_code FROM Owners;"}, {"isUser": true, "text": "Hmm, can you put the owner ids, dog ids and the cost of treatment in a table?"}, {"isUser": false, "query": "SELECT T1.owner_id , T2.dog_id ,T3.cost_of_treatment  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id", "predict": "SELECT Owners.owner_id, Dogs.dog_id, Treatments.cost_of_treatment\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id;"}, {"isUser": true, "text": "Which owner name and id has paid the largest amount of money in total for their dogs? | Did  you mean  the  full name? | Just the first name will be fine."}, {"isUser": false, "query": "SELECT  T1.first_name,T1.owner_id  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum ( T3.cost_of_treatment )  DESC LIMIT 1", "predict": "SELECT Owners.owner_id, Owners.first_name, SUM(Treatments.cost_of_treatment) AS total_cost\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nGROUP BY Owners.owner_id, Owners.first_name\nORDER BY total_cost DESC\nLIMIT 1;"}, {"isUser": true, "text": "To make sure, can you also show me the last name of Jaclyn?"}, {"isUser": false, "query": "SELECT last_name  from Owners where first_name = \"Jaclyn\"", "predict": "SELECT last_name FROM Owners WHERE first_name = 'Jaclyn';"}, {"isUser": true, "text": "As a last thing, can you also tell me the owner id and zip code of Jaclyn Stoltenberg, who has paid the largest amount of money in total for their dogs?"}, {"isUser": false, "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum ( T3.cost_of_treatment )  DESC LIMIT 1", "predict": "SELECT Owners.owner_id, Owners.zip_code, SUM(Treatments.cost_of_treatment) AS total_cost\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nWHERE Owners.first_name = 'Jaclyn' AND Owners.last_name = 'Stoltenberg'\nGROUP BY Owners.owner_id, Owners.zip_code\nORDER BY total_cost DESC\nLIMIT 1;"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "Howdy!  Can you show me a list of all flight numbers?"}, {"isUser": false, "query": "SELECT FlightNo FROM Flights", "predict": "SELECT FlightNo FROM flights;"}, {"isUser": true, "text": "Excellent!  Can you update this list to include a column with the destination airport code for each of these?"}, {"isUser": false, "query": "SELECT FlightNo,DestAirport FROM Flights", "predict": "SELECT FlightNo, DestAirport FROM flights;"}, {"isUser": true, "text": "Nice!  Can you tell the quantity of flights that had Aberdeen or Abilene as their destination cities?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport   =   T2.AirportCode WHERE T2.city   =   \"Aberdeen\" OR T2.city   =   \"Abilene\"", "predict": "SELECT COUNT(*) FROM flights \nWHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City IN ('Aberdeen', 'Abilene'));"}, {"isUser": true, "text": "Okay!  Can you tell me the airport city that has the most flights landing in it?"}, {"isUser": false, "query": "SELECT DESTAIRPORT FROM Flights GROUP BY DESTAIRPORT order by count ( * )  desc limit 1", "predict": "SELECT City, COUNT(*) AS FlightCount\nFROM airports\nJOIN flights ON airports.AirportCode = flights.DestAirport\nGROUP BY City\nORDER BY FlightCount DESC\nLIMIT 1;"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "How many flights are arriving in the city called Aberdeen?"}, {"isUser": false, "query": "SELECT count ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =   T2.AirportCode WHERE T2.City   =   \"Aberdeen\"", "predict": "SELECT COUNT(*) AS NumberOfFlights\nFROM flights\nJOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE airports.City = 'Aberdeen';"}, {"isUser": true, "text": "How many flights are there departing Aberdeen?"}, {"isUser": false, "query": "SELECT count ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.sourceAirport   =   T2.AirportCode WHERE T2.City   =   \"Aberdeen\"", "predict": "SELECT COUNT(*) AS NumberOfFlights\nFROM flights\nJOIN airports ON flights.SourceAirport = airports.AirportCode\nWHERE airports.City = 'Aberdeen';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "WHAT ARE THE AFRICAN COUNTRIES THAT HAVE POPULATION LESS THAN ANY COUNTRY IN ASIA"}, {"isUser": false, "query": "SELECT Name FROM country WHERE Continent   =   \"Africa\"  AND population  <   ( SELECT max ( population )  FROM country WHERE Continent   =   \"Asia\" ) ", "predict": "SELECT A.Name\nFROM country A\nWHERE A.Continent = 'Africa' AND A.Population < (\n    SELECT MIN(B.Population)\n    FROM country B\n    WHERE B.Continent = 'Asia'\n);"}, {"isUser": true, "text": "FROM WHICH CONTINENT IS ARUBA"}, {"isUser": false, "query": "SELECT continent FROM country WHERE name  =  \"Aruba\"", "predict": "SELECT Continent\nFROM country\nWHERE Name = 'Aruba';"}, {"isUser": true, "text": "WHAT IS THE LOCAL NAME OF ANGOLA"}, {"isUser": false, "query": "SELECT localname FROM country WHERE name  =  \"Angola\"", "predict": "SELECT LocalName\nFROM country\nWHERE Name = 'Angola';"}, {"isUser": true, "text": "SURFACE AREA  OF AFGHANISTAN"}, {"isUser": false, "query": "SELECT SurfaceArea FROM country WHERE name  =  \"Afghanistan\"", "predict": "SELECT SurfaceArea\nFROM country\nWHERE Name = 'Afghanistan';"}, {"isUser": true, "text": "WHAT IS THE CODE OF ARUBA"}, {"isUser": false, "query": "SELECT Code FROM country WHERE name  =  \"Aruba\"", "predict": "SELECT Code\nFROM country\nWHERE Name = 'Aruba';"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "kindly give me the names that might be used for professionals or owners but cannot be use for dog names"}, {"isUser": false, "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "predict": "SELECT DISTINCT first_name, last_name\nFROM (\n    SELECT first_name, last_name FROM Owners\n    UNION\n    SELECT first_name, last_name FROM Professionals\n)\nWHERE (first_name, last_name) NOT IN (\n    SELECT name AS first_name, '' AS last_name FROM Dogs\n)\nORDER BY first_name, last_name;"}, {"isUser": true, "text": "What email can i use to contact Taryn | Would you like the email address of professionals with name Taryn? | Yes"}, {"isUser": false, "query": "SELECT email_address FROM Professionals WHERE First_Name  =  \"Taryn\"", "predict": "SELECT email_address\nFROM Professionals\nWHERE first_name = 'Taryn';"}, {"isUser": true, "text": "In what state can i find Jayson"}, {"isUser": false, "query": "SELECT state FROM Professionals WHERE First_Name  =  \"Jayson\"", "predict": "SELECT state\nFROM Owners\nWHERE first_name = 'Jayson'\nUNION\nSELECT state\nFROM Professionals\nWHERE first_name = 'Jayson';"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "What are the names of the makers who produced some cars in the year 1970?"}, {"isUser": false, "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker JOIN CAR_NAMES AS T3 ON T2.model   =   T3.model JOIN CARS_DATA AS T4 ON T3.MakeId   =   T4.id WHERE T4.year   =   '1970'", "predict": "SELECT DISTINCT cm.Maker\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nJOIN car_names cn ON ml.Model = cn.Model\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.Year = 1970;"}, {"isUser": true, "text": "What are the models and makes of the cars produced that year?"}, {"isUser": false, "query": "SELECT T3.model, T3.make FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker JOIN CAR_NAMES AS T3 ON T2.model   =   T3.model JOIN CARS_DATA AS T4 ON T3.MakeId   =   T4.id WHERE T4.year   =   '1970'", "predict": "SELECT cn.Model, cn.Make\nFROM car_names cn\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.Year = 1970;"}, {"isUser": true, "text": "What is the full name of the maker that produced the heaviest car in the year 1970?"}, {"isUser": false, "query": "SELECT T1.Fullname FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970' ORDER BY T4.weight DESC limit 1", "predict": "SELECT cm.FullName\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nJOIN car_names cn ON ml.Model = cn.Model\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.Year = 1970\nORDER BY cd.Weight DESC\nLIMIT 1;"}]},
{"db_name": "tvshow", "turns": [{"isUser": true, "text": "List the cartoons that are directed by Ben Jones. | Here are the titles of cartoons that are directed by Ben Jones | List all tv channels with their id's....."}, {"isUser": false, "query": "SELECT channel, id FROM cartoon", "predict": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';"}, {"isUser": true, "text": "Is there any other tv channel other than italian language ?"}, {"isUser": false, "query": "SELECT series_name FROM TV_Channel EXCEPT SELECT series_name FROM TV_channel WHERE language  =  'Italian'", "predict": "SELECT * FROM TV_Channel WHERE Language != 'Italian';"}, {"isUser": true, "text": "Find the id of tv channels that do not play any cartoon directed by Ben Jones."}, {"isUser": false, "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "predict": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');"}]},
{"db_name": "employee_hire_evaluation", "turns": [{"isUser": true, "text": "What is the average number of products of all stores?"}, {"isUser": false, "query": "select avg ( Number_products )  from shop", "predict": "SELECT AVG(Number_products) AS Average_Products FROM shop;"}, {"isUser": true, "text": "what are the names of stores whose number of products is bigger than 6685?"}, {"isUser": false, "query": "select Name from shop where Number_products > 6685", "predict": "SELECT Name FROM shop WHERE Number_products > 6685;"}, {"isUser": true, "text": "how many stores in total?"}, {"isUser": false, "query": "select count ( * )  from shop", "predict": "SELECT COUNT(*) AS Total_Stores FROM shop;"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "How many flights in this table?"}, {"isUser": false, "query": "SELECT count ( * )  FROM flights", "predict": "SELECT COUNT(*) FROM flights;"}, {"isUser": true, "text": "Which city has least number of departing flights?"}, {"isUser": false, "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode   =   T2.SourceAirport GROUP BY T1.City ORDER BY count ( * )  ASC LIMIT 1", "predict": "SELECT City, COUNT(*) AS DepartingFlights\nFROM flights\nJOIN airports ON flights.SourceAirport = airports.AirportCode\nGROUP BY City\nORDER BY DepartingFlights ASC\nLIMIT 1;"}, {"isUser": true, "text": "Find the flight number of APG?"}, {"isUser": false, "query": "SELECT FlightNo FROM flights WHERE SourceAirport = \"APG\"", "predict": "SELECT FlightNo\nFROM flights\nJOIN airlines ON flights.Airline = airlines.uid\nWHERE airlines.Abbreviation = 'APG';"}, {"isUser": true, "text": "Find the airport names of DYS?"}, {"isUser": false, "query": "SELECT AirportName FROM airports WHERE AirportCode = \"DYS\"", "predict": "SELECT AirportName\nFROM airports\nWHERE AirportCode = 'DYS';"}, {"isUser": true, "text": "Fin the city of ABR?"}, {"isUser": false, "query": "SELECT CITY FROM airports WHERE AirportCode = \"ABR\"", "predict": "SELECT City\nFROM airports\nWHERE AirportCode = 'ABR';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What are the countries where either English or Dutch is the official language?"}, {"isUser": false, "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" AND IsOfficial   =   \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"Dutch\" AND IsOfficial   =   \"T\"", "predict": "SELECT DISTINCT country.Name\nFROM country\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch')\n  AND countrylanguage.IsOfficial = 'T';"}, {"isUser": true, "text": "What is the official language in Belgium?"}, {"isUser": false, "query": "SELECT T2.language FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T1.name  =  \"Belgium\" and T2.isofficial  =  \"T\"", "predict": "SELECT Language\nFROM countrylanguage\nWHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Belgium')\n  AND IsOfficial = 'T';"}, {"isUser": true, "text": "What are the countries where arabic language is spoken"}, {"isUser": false, "query": "SELECT T1.name FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.language  =  \"Arabic\"", "predict": "SELECT country.Name\nFROM country\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE countrylanguage.Language = 'Arabic';"}, {"isUser": true, "text": "Please tell me all the languages spoken in Egypt."}, {"isUser": false, "query": "SELECT T2.language FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T1.name  =  \"Egypt\"", "predict": "SELECT Language\nFROM countrylanguage\nWHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Egypt');"}, {"isUser": true, "text": "Can you tell me the number of countries where Arabic is the official language."}, {"isUser": false, "query": "SELECT count ( T1.name )  FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.Language  =  \"Arabic\" and T2.isOfficial  =  \"T\"", "predict": "SELECT COUNT(DISTINCT CountryCode) AS NumberOfCountries\nFROM countrylanguage\nWHERE Language = 'Arabic' AND IsOfficial = 'T';"}, {"isUser": true, "text": "Can you please give me the names of these countries?"}, {"isUser": false, "query": "SELECT T1.name FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.Language  =  \"Arabic\" and T2.isOfficial  =  \"T\"", "predict": "SELECT country.Name\nFROM country\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE countrylanguage.Language = 'Arabic' AND countrylanguage.IsOfficial = 'T';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What are the populations of every country in Africa?"}, {"isUser": false, "query": "SELECT name,population FROM country WHERE Continent   =   \"Africa\"", "predict": "SELECT Name, Population\nFROM country\nWHERE Continent = 'Africa';"}, {"isUser": true, "text": "What are the names and populations of every country in Asia?"}, {"isUser": false, "query": "SELECT name,population FROM country WHERE Continent   =   \"Asia\"", "predict": "SELECT Name, Population\nFROM country\nWHERE Continent = 'Asia';"}, {"isUser": true, "text": "What are the names of the Asian countries that have a larger population than that of any country in Africa?"}, {"isUser": false, "query": "SELECT Name FROM country WHERE Continent   =   \"Asia\"  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Africa\" ) ", "predict": "SELECT c_asia.Name\nFROM country AS c_asia\nJOIN (\n    SELECT MAX(Population) AS MaxPopulation\n    FROM country\n    WHERE Continent = 'Africa'\n) AS c_africa\nON c_asia.Population > c_africa.MaxPopulation\nWHERE c_asia.Continent = 'Asia';"}, {"isUser": true, "text": "What are the populations of those countries?"}, {"isUser": false, "query": "SELECT Name,population FROM country WHERE Continent   =   \"Asia\"  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Africa\" ) ", "predict": "SELECT c_asia.Name, c_asia.Population\nFROM country AS c_asia\nJOIN (\n    SELECT MAX(Population) AS MaxPopulation\n    FROM country\n    WHERE Continent = 'Africa'\n) AS c_africa\nON c_asia.Population > c_africa.MaxPopulation\nWHERE c_asia.Continent = 'Asia';"}, {"isUser": true, "text": "What are the government forms of those countries?"}, {"isUser": false, "query": "SELECT Name,GovernmentForm FROM country WHERE Continent   =   \"Asia\"  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Africa\" ) ", "predict": "SELECT c_asia.Name, c_asia.GovernmentForm\nFROM country AS c_asia\nJOIN (\n    SELECT MAX(Population) AS MaxPopulation\n    FROM country\n    WHERE Continent = 'Africa'\n) AS c_africa\nON c_asia.Population > c_africa.MaxPopulation\nWHERE c_asia.Continent = 'Asia';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What is the name of the country with the shortest life expectancy in Asia?"}, {"isUser": false, "query": "SELECT Name FROM country WHERE Continent   =   \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "predict": "SELECT Name \nFROM country \nWHERE Continent = 'Asia' \nORDER BY LifeExpectancy ASC \nLIMIT 1;"}, {"isUser": true, "text": "And in Africa? | Do you mean among country in Africa, or among the country in Africa and in Asia. | Among country in Africa"}, {"isUser": false, "query": "SELECT Name FROM country WHERE Continent   =   \"Africa\" ORDER BY LifeExpectancy LIMIT 1", "predict": "SELECT Name \nFROM country \nWHERE Continent = 'Africa' \nORDER BY LifeExpectancy ASC \nLIMIT 1;"}, {"isUser": true, "text": "What is the GNP of Afghanistan?"}, {"isUser": false, "query": "SELECT GNP FROM country WHERE name = \"Afghanistan\"", "predict": "SELECT GNP \nFROM country \nWHERE Name = 'Afghanistan';"}, {"isUser": true, "text": "What is the population of Afghanistan?"}, {"isUser": false, "query": "SELECT Population FROM country WHERE name = \"Afghanistan\"", "predict": "SELECT Population \nFROM country \nWHERE Name = 'Afghanistan';"}]},
{"db_name": "poker_player", "turns": [{"isUser": true, "text": "How much did the winning poker player make?"}, {"isUser": false, "query": "SELECT Earnings FROM poker_player", "predict": "SELECT Earnings\nFROM poker_player\nWHERE Best_Finish = 1;"}, {"isUser": true, "text": "Can you rank the poker players earnings from highest to lowest?"}, {"isUser": false, "query": "SELECT Earnings FROM poker_player order by Earnings desc", "predict": "SELECT Poker_Player_ID, Earnings\nFROM poker_player\nORDER BY Earnings DESC;"}, {"isUser": true, "text": "How many final tables did the poker player with the least amount of earnings make?"}, {"isUser": false, "query": "SELECT Final_Table_Made FROM poker_player order by Earnings asc limit 1", "predict": "SELECT Final_Table_Made\nFROM poker_player\nWHERE Earnings = (SELECT MIN(Earnings) FROM poker_player);"}, {"isUser": true, "text": "What about the poker player with the most earnings how many final table did they make?"}, {"isUser": false, "query": "SELECT Final_Table_Made FROM poker_player order by Earnings desc limit 1", "predict": "SELECT Final_Table_Made\nFROM poker_player\nWHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "Hello there!  Can you please list all the template IDs and which document IDs they are associated with?"}, {"isUser": false, "query": "SELECT template_id FROM Documents", "predict": "SELECT Templates.Template_ID, Documents.Document_ID\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID;"}, {"isUser": true, "text": "Thanks!  Unfortunately, I am seeing only the Template_IDs.  Can you update the list to show the document IDs as well?"}, {"isUser": false, "query": "SELECT template_id ,Document_ID FROM Documents", "predict": "SELECT Templates.Template_ID, Documents.Document_ID\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID;"}, {"isUser": true, "text": "Alright!  Can you show me a list of the Template_IDs for each template that is not associated with a Document_ID?"}, {"isUser": false, "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "predict": "SELECT clause. Here's the corrected SQL query:"}, {"isUser": true, "text": "Nice!  Finally, can you update that list to show the associated template type code for each of these?"}, {"isUser": false, "query": "SELECT T1.template_id ,T1.Template_Type_Code FROM Templates as T1 join Documents as T2 on T1.Template_ID = T2.Template_ID", "predict": "SELECT Templates.Template_ID, Templates.Template_Type_Code\nFROM Templates\nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Documents.Document_ID IS NULL;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "Tell me how many dogs have gone through any treatments."}, {"isUser": false, "query": "SELECT count ( * )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "predict": "SELECT COUNT(DISTINCT dog_id) AS NumberOfDogsTreated\nFROM Treatments;"}, {"isUser": true, "text": "Tell me how old the youngest is. | Do you mean the youngest among those that have gone through any treatment? | yes"}, {"isUser": false, "query": "SELECT min ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "predict": "SELECT MIN(age) AS YoungestAge\nFROM Dogs\nWHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments);"}, {"isUser": true, "text": "And how old is the oldest that has gone through any treatment?"}, {"isUser": false, "query": "SELECT max ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "predict": "SELECT MAX(age) AS OldestAge\nFROM Dogs\nWHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments);"}, {"isUser": true, "text": "How about the average age? | Do you mean the average age of those that have gone through any treatment? | yes"}, {"isUser": false, "query": "SELECT avg ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "predict": "SELECT AVG(age) AS AverageAge\nFROM Dogs\nWHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments);"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "Hi there! How many different semesters does this list have? | Do  you  mean  the type of  semester name？ | Yes!  My apologies for being unclear.  How many different semester name types are on this list?"}, {"isUser": false, "query": "SELECT distinct semester_name FROM Semesters", "predict": "SELECT COUNT(DISTINCT semester_name) FROM Semesters;"}, {"isUser": true, "text": "Awesome!  Much appreciated!  Can you filter this list to show just the semester names which do not have any \nstudent enrolment ids associated, or in other words semesters which do not have any students enrolled?"}, {"isUser": false, "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ", "predict": "SELECT DISTINCT s.semester_name\nFROM Semesters s\nLEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id\nWHERE se.student_enrolment_id IS NULL;"}, {"isUser": true, "text": "Thank you!  Can you update this list to show the associated semester IDs and semester descriptions?"}, {"isUser": false, "query": "SELECT semester_id,semester_name,semester_description FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ", "predict": "SELECT DISTINCT s.semester_id, s.semester_name, s.semester_description\nFROM Semesters s\nLEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id\nWHERE se.student_enrolment_id IS NULL;"}]},
{"db_name": "pets_1", "turns": [{"isUser": true, "text": "How many female students are on the list?"}, {"isUser": false, "query": "SELECT count ( * ) FROM student WHERE Sex = \"F\"", "predict": "SELECT COUNT(*) AS FemaleStudentsCount\nFROM Student\nWHERE Sex = 'Female';"}, {"isUser": true, "text": "What is the full names of least aged students on the list?"}, {"isUser": false, "query": "SELECT LName,Fname  FROM student order  by  Age  limit 1", "predict": "SELECT Fname || ' ' || LName AS FullName\nFROM Student\nWHERE Age = (SELECT MIN(Age) FROM Student);"}, {"isUser": true, "text": "Find the average age of students who do not have any pet?"}, {"isUser": false, "query": "SELECT avg ( age )  FROM student WHERE stuid NOT IN  ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid ) ", "predict": "SELECT AVG(Age) AS AverageAge\nFROM Student\nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet);"}, {"isUser": true, "text": "What is the city code of student id 1003?"}, {"isUser": false, "query": "SELECT city_code  FROM student WHERE \nStuID = 1003", "predict": "SELECT city_code\nFROM Student\nWHERE StuID = 1003;"}]},
{"db_name": "tvshow", "turns": [{"isUser": true, "text": "Which country tv channels some cartoon written by todd casey?"}, {"isUser": false, "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.written_by   =   'Todd Casey'", "predict": "SELECT DISTINCT TV_Channel.Country\nFROM Cartoon\nJOIN TV_Channel ON Cartoon.Channel = TV_Channel.id\nWHERE Cartoon.Written_by = 'Todd Casey';"}, {"isUser": true, "text": "What is the title of cartoon written by todd casey?"}, {"isUser": false, "query": "SELECT title FROM cartoon  WHERE written_by   =   'Todd Casey'", "predict": "SELECT Title\nFROM Cartoon\nWHERE Written_by = 'Todd Casey';"}, {"isUser": true, "text": "Who directed the cartoon titled enter the outsiders?"}, {"isUser": false, "query": "SELECT directed_by FROM cartoon WHERE title  =  \"Enter the Outsiders!\"", "predict": "SELECT Directed_by\nFROM Cartoon\nWHERE Title = 'Enter the Outsiders';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "HOW MANY LANGUAGE ARE THERE?"}, {"isUser": false, "query": "SELECT count ( distinct language )  from countrylanguage", "predict": "SELECT COUNT(DISTINCT Language) AS TotalLanguages FROM countrylanguage;"}, {"isUser": true, "text": "WHAT IS THE POPULATION OF Aruba"}, {"isUser": false, "query": "SELECT population from country where name  =  \"Aruba\"", "predict": "SELECT Population FROM country WHERE Name = 'Aruba';"}, {"isUser": true, "text": "WHAT IS Afghanistan GNPOld?"}, {"isUser": false, "query": "SELECT GNPOLD from country where name  =  \"Afghanistan\"", "predict": "SELECT GNPOld FROM country WHERE Name = 'Afghanistan';"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "What are the codes of countries that have more than 50 players?"}, {"isUser": false, "query": "SELECT country_code FROM players GROUP BY country_code HAVING count ( * )   >  50", "predict": "SELECT country_code, COUNT(player_id) AS player_count\nFROM players\nGROUP BY country_code\nHAVING player_count > 50;"}, {"isUser": true, "text": "What are the codes of countries that have less than 40 players?"}, {"isUser": false, "query": "SELECT country_code FROM players GROUP BY country_code HAVING count ( * )   <  40", "predict": "SELECT country_code, COUNT(player_id) AS player_count\nFROM players\nGROUP BY country_code\nHAVING player_count < 40;"}, {"isUser": true, "text": "What are the player names from the country code AHO? | Do you want first name and last name? | yes"}, {"isUser": false, "query": "SELECT first_name,last_name FROM players where country_code = 'AHO'", "predict": "SELECT first_name, last_name\nFROM players\nWHERE country_code = 'AHO';"}, {"isUser": true, "text": "What are their player IDs?"}, {"isUser": false, "query": "SELECT player_id FROM players where country_code = 'AHO'", "predict": "SELECT player_id, first_name, last_name\nFROM players\nWHERE country_code = 'AHO';"}, {"isUser": true, "text": "What hand is player id 206449?"}, {"isUser": false, "query": "SELECT hand FROM players where player_id = 206449", "predict": "SELECT hand\nFROM players\nWHERE player_id = 206449;"}, {"isUser": true, "text": "How many other players have that?"}, {"isUser": false, "query": "SELECT count ( * )  FROM players where hand = 'U'", "predict": "SELECT COUNT(*) AS same_hand_count\nFROM players\nWHERE hand = (SELECT hand FROM players WHERE player_id = 206449)\n  AND player_id != 206449;"}]},
{"db_name": "battle_death", "turns": [{"isUser": true, "text": "Can you please show the names of the battles that had no ships lost in the 'English Channel'?"}, {"isUser": false, "query": "SELECT name FROM battle EXCEPT SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel'", "predict": "SELECT name\nFROM battle\nWHERE id NOT IN (\n    SELECT lost_in_battle\n    FROM ship\n    WHERE location = 'English Channel'\n);"}, {"isUser": true, "text": "What are the results of those battles?"}, {"isUser": false, "query": "SELECT RESULT  FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ", "predict": "SELECT name, result\nFROM battle\nWHERE id NOT IN (\n    SELECT lost_in_battle\n    FROM ship\n    WHERE location = 'English Channel'\n);"}, {"isUser": true, "text": "Who are the Bulgarian commanders of those battles, please?"}, {"isUser": false, "query": "SELECT bulgarian_commander FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ", "predict": "SELECT name, bulgarian_commander\nFROM battle\nWHERE id NOT IN (\n    SELECT lost_in_battle\n    FROM ship\n    WHERE location = 'English Channel'\n);"}, {"isUser": true, "text": "What were the dates of those battles?"}, {"isUser": false, "query": "SELECT date FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ", "predict": "SELECT name, date\nFROM battle\nWHERE id NOT IN (\n    SELECT lost_in_battle\n    FROM ship\n    WHERE location = 'English Channel'\n);"}, {"isUser": true, "text": "Who were the latin commanders of those battles?"}, {"isUser": false, "query": "SELECT  latin_commander  FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ", "predict": "SELECT name, latin_commander\nFROM battle\nWHERE id NOT IN (\n    SELECT lost_in_battle\n    FROM ship\n    WHERE location = 'English Channel'\n);"}]},
{"db_name": "employee_hire_evaluation", "turns": [{"isUser": true, "text": "How many stores are there? | Did you mean to ask for the number of shops? | Yes"}, {"isUser": false, "query": "SELECT COUNT ( * )  FROM shop", "predict": "SELECT COUNT(*) FROM shop;"}, {"isUser": true, "text": "What is the most products that one shop has?"}, {"isUser": false, "query": "SELECT MAX ( Number_products )  FROM shop", "predict": "SELECT MAX(Number_products) FROM shop;"}, {"isUser": true, "text": "What about the minimum number or products that one shop has?"}, {"isUser": false, "query": "SELECT MIN ( Number_products )  FROM shop", "predict": "SELECT MIN(Number_products) FROM shop;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "which breed is the top ranked?"}, {"isUser": false, "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT Breeds.breed_name, COUNT(Dogs.dog_id) AS number_of_dogs\nFROM Breeds\nJOIN Dogs ON Breeds.breed_code = Dogs.breed_code\nGROUP BY Breeds.breed_name\nORDER BY number_of_dogs DESC\nLIMIT 1;"}, {"isUser": true, "text": "what is the total count for bulldog?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code where T1.breed_name  =  \"Bulldog\"", "predict": "SELECT COUNT(Dogs.dog_id) AS bulldog_count\nFROM Dogs\nJOIN Breeds ON Dogs.breed_code = Breeds.breed_code\nWHERE Breeds.breed_name = 'Bulldog';"}]},
{"db_name": "pets_1", "turns": [{"isUser": true, "text": "What are the names of all students who have cat pets? | Linda is the first name of the student who has a cat pet. | What are the first names of all students who have dog pets?"}, {"isUser": false, "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'dog'", "predict": "SELECT S.Fname, S.LName\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType = 'cat';"}, {"isUser": true, "text": "How many students have any type of pet?"}, {"isUser": false, "query": "SELECT count ( T2.StuId )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid", "predict": "SELECT COUNT(DISTINCT S.StuID)\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID;"}, {"isUser": true, "text": "What is the age of Linda's pet?"}, {"isUser": false, "query": "SELECT T3.pet_age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T1.Fname  =  \"Linda\"", "predict": "SELECT P.pet_age\nFROM Pets P\nJOIN Has_Pet HP ON P.PetID = HP.PetID\nJOIN Student S ON HP.StuID = S.StuID\nWHERE S.Fname = 'Linda';"}]},
{"db_name": "museum_visit", "turns": [{"isUser": true, "text": "What are the names who have a membership level higher than 4?"}, {"isUser": false, "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4", "predict": "SELECT Name\nFROM visitor\nWHERE Level_of_membership > 4;"}, {"isUser": true, "text": "And can you add a column showing their age?"}, {"isUser": false, "query": "SELECT name, age FROM visitor WHERE Level_of_membership  >  4", "predict": "SELECT Name, Age\nFROM visitor\nWHERE Level_of_membership > 4;"}, {"isUser": true, "text": "And now sort the list by age with oldest first."}, {"isUser": false, "query": "SELECT name ,  age FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "predict": "SELECT Name, Age\nFROM visitor\nWHERE Level_of_membership > 4\nORDER BY Age DESC;"}, {"isUser": true, "text": "OK...what are their customer IDs?"}, {"isUser": false, "query": "SELECT id FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "predict": "SELECT ID, Name, Age\nFROM visitor\nWHERE Level_of_membership > 4\nORDER BY Age DESC;"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "who are the students enrolled in 2 degree programs in one semester? | did you want to return their first, middle and last names? | yes"}, {"isUser": false, "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id GROUP BY T1.student_id HAVING count ( * )    =   2", "predict": "SELECT s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Semesters sm ON se.semester_id = sm.semester_id\nGROUP BY s.student_id, sm.semester_id\nHAVING COUNT(DISTINCT se.degree_program_id) = 2;"}, {"isUser": true, "text": "what are their student_id?"}, {"isUser": false, "query": "SELECT T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id GROUP BY T1.student_id HAVING count ( * )    =   2", "predict": "SELECT s.student_id, s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Semesters sm ON se.semester_id = sm.semester_id\nGROUP BY s.student_id, sm.semester_id\nHAVING COUNT(DISTINCT se.degree_program_id) = 2;"}, {"isUser": true, "text": "what is student_id 4 email address"}, {"isUser": false, "query": "SELECT email_address FROM Students where student_id  =  4", "predict": "SELECT email_address\nFROM Students\nWHERE student_id = 4;"}, {"isUser": true, "text": "what is Timothy Anna Ward's date first registered?"}, {"isUser": false, "query": "SELECT date_first_registered FROM Students where first_name  =  'Timmothy' and middle_name  =  'Anna' and last_name  =  'Ward'", "predict": "SELECT date_first_registered\nFROM Students\nWHERE first_name = 'Timothy' AND middle_name = 'Anna' AND last_name = 'Ward';"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "How many dog owners live in Virginia?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   =   'Virginia'", "predict": "SELECT COUNT(DISTINCT owner_id) AS NumberOfOwnersInVirginia\nFROM Owners\nWHERE state = 'Virginia';"}, {"isUser": true, "text": "What is their name?"}, {"isUser": false, "query": "SELECT T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   =   'Virginia'", "predict": "SELECT first_name, last_name\nFROM Owners\nWHERE state = 'Virginia';"}, {"isUser": true, "text": "And the name of their dog?"}, {"isUser": false, "query": "SELECT T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   =   'Virginia'", "predict": "SELECT Owners.first_name, Owners.last_name, Dogs.name AS DogName\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nWHERE Owners.state = 'Virginia';"}, {"isUser": true, "text": "What breed of dog is bessie?"}, {"isUser": false, "query": "SELECT T2.breed_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Bessie\"", "predict": "SELECT Breeds.breed_name\nFROM Dogs\nJOIN Breeds ON Dogs.breed_code = Breeds.breed_code\nWHERE Dogs.name = 'Bessie';"}, {"isUser": true, "text": "And what size dog is she?"}, {"isUser": false, "query": "SELECT T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Bessie\"", "predict": "SELECT Sizes.size_description\nFROM Dogs\nJOIN Sizes ON Dogs.size_code = Sizes.size_code\nWHERE Dogs.name = 'Bessie';"}]},
{"db_name": "orchestra", "turns": [{"isUser": true, "text": "How many record companies are there?"}, {"isUser": false, "query": "SELECT count ( Record_Company )  FROM orchestra", "predict": "SELECT COUNT(DISTINCT Record_Company) FROM orchestra;"}, {"isUser": true, "text": "How many orchestras are there?"}, {"isUser": false, "query": "SELECT count ( Orchestra_ID )  FROM orchestra", "predict": "SELECT COUNT(*) FROM orchestra;"}, {"isUser": true, "text": "Can you list the orchestras by the date they were founded for me starting with the oldest? | Do you mean listing the names of the orchestras by the date they were founded starting with the oldest? | yes."}, {"isUser": false, "query": "select orchestra from orchestra order by Year_of_Founded", "predict": "SELECT Orchestra, Year_of_Founded FROM orchestra ORDER BY Year_of_Founded ASC;"}, {"isUser": true, "text": "What year was the Royal Danish Orchestra founded?"}, {"isUser": false, "query": "select year_of_founded  from orchestra where orchestra = 'Royal Danish Orchestra'", "predict": "SELECT Year_of_Founded FROM orchestra WHERE Orchestra = 'Royal Danish Orchestra';"}, {"isUser": true, "text": "What record company is shared by the most orchestras?"}, {"isUser": false, "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT ( * )  DESC LIMIT 1", "predict": "SELECT Record_Company, COUNT(*) AS NumberOfOrchestras \nFROM orchestra \nGROUP BY Record_Company \nORDER BY NumberOfOrchestras DESC \nLIMIT 1;"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "How many 'United Airlines' flights go to the Airport 'ASY'?"}, {"isUser": false, "query": "SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\" AND T2.DestAirport   =   \"ASY\"", "predict": "SELECT COUNT(*) AS NumberOfFlights\nFROM flights\nJOIN airlines ON flights.Airline = airlines.uid\nWHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = 'ASY';"}, {"isUser": true, "text": "What is the airline ID of United Airlines?"}, {"isUser": false, "query": "select uid from airlines where airline  =  \"United Airlines\"", "predict": "SELECT uid\nFROM airlines\nWHERE Airline = 'United Airlines';"}, {"isUser": true, "text": "How many airlines with airline id 1 go to the destination airport ASY?"}, {"isUser": false, "query": "SELECT count ( * )  FROM FLIGHTS WHERE airline  =  1 and DestAirport   =   \" ASY\"", "predict": "SELECT COUNT(*) AS NumberOfFlights\nFROM flights\nWHERE Airline = 1 AND DestAirport = 'ASY';"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "How many Volvo cars are there?"}, {"isUser": false, "query": "SELECT count ( * )  FROM CAR_names where model  =  \"volvo\"", "predict": "SELECT COUNT(*) AS VolvoCarCount\nFROM car_names\nWHERE Make = 'Volvo';"}, {"isUser": true, "text": "Which Volvo car has the least accelerate? | Do you want its car id? | Yes"}, {"isUser": false, "query": "SELECT T1.id FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "predict": "SELECT Id\nFROM cars_data\nWHERE MakeId IN (\n    SELECT MakeId\n    FROM car_names\n    WHERE Make = 'Volvo'\n)\nORDER BY Accelerate ASC\nLIMIT 1;"}, {"isUser": true, "text": "How many cylinders does that car have?"}, {"isUser": false, "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "predict": "SELECT Cylinders\nFROM cars_data\nWHERE Id = (\n    SELECT cars_data.Id\n    FROM cars_data\n    JOIN car_names ON cars_data.Id = car_names.MakeId\n    WHERE car_names.Make = 'Volvo'\n    ORDER BY cars_data.Accelerate ASC\n    LIMIT 1\n);"}]},
{"db_name": "network_1", "turns": [{"isUser": true, "text": "How many students are there?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Highschooler", "predict": "SELECT COUNT(*) FROM Highschooler;"}, {"isUser": true, "text": "What about friends?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Friend", "predict": "SELECT COUNT(*) FROM Friend;"}, {"isUser": true, "text": "What are the names of all the highschoolers who have friends ?"}, {"isUser": false, "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id", "predict": "SELECT DISTINCT H.name\nFROM Highschooler H\nJOIN Friend F ON H.ID = F.student_id;"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "Which semester did bachelor students enroll? List the id."}, {"isUser": false, "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id WHERE degree_summary_name   =   'Master'", "predict": "SELECT DISTINCT se.semester_id\nFROM Semesters se\nJOIN Student_Enrolment sen ON se.semester_id = sen.semester_id\nJOIN Degree_Programs dp ON sen.degree_program_id = dp.degree_program_id\nWHERE dp.degree_summary_name LIKE '%Bachelor%'"}, {"isUser": true, "text": "What is the degree summary description of student with id 14?"}, {"isUser": false, "query": "SELECT T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.student_id  =  14", "predict": "SELECT dp.degree_summary_description\nFROM Degree_Programs dp\nJOIN Student_Enrolment sen ON dp.degree_program_id = sen.degree_program_id\nWHERE sen.student_id = 14;"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon?"}, {"isUser": false, "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id ORDER BY T2.mpg DESC LIMIT 1", "predict": "SELECT cn.Model, cd.MPG\nFROM cars_data cd\nJOIN car_names cn ON cd.Id = cn.MakeId\nWHERE cd.MPG = (SELECT MAX(MPG) FROM cars_data WHERE MPG != 'NA')"}, {"isUser": true, "text": "Which model has the highest horsepower?"}, {"isUser": false, "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id ORDER BY T2.horsepower DESC LIMIT 1", "predict": "SELECT cn.Model, cd.Horsepower\nFROM cars_data cd\nJOIN car_names cn ON cd.Id = cn.MakeId\nWHERE cd.Horsepower = (SELECT MAX(Horsepower) FROM cars_data WHERE Horsepower != 'NA');"}]},
{"db_name": "employee_hire_evaluation", "turns": [{"isUser": true, "text": "what is the age of George Chuter?"}, {"isUser": false, "query": "SELECT Age from employee where Name = 'George Chuter'", "predict": "SELECT Age FROM employee WHERE Name = 'George Chuter';"}, {"isUser": true, "text": "what is the age of lee mears?"}, {"isUser": false, "query": "SELECT Age from employee where Name = 'Lee Mears'", "predict": "SELECT Age FROM employee WHERE Name = 'Lee Mears';"}, {"isUser": true, "text": "find the name of the employee who got the highest one time bonus?"}, {"isUser": false, "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "predict": "SELECT Name FROM employee WHERE Employee_ID = (SELECT Employee_ID FROM evaluation ORDER BY Bonus DESC LIMIT 1);"}]},
{"db_name": "poker_player", "turns": [{"isUser": true, "text": "What are the names of non poker players?"}, {"isUser": false, "query": "SELECT Name FROM people WHERE People_ID NOT IN  ( SELECT People_ID FROM poker_player ) ", "predict": "SELECT p.Name\nFROM people p\nLEFT JOIN poker_player pp ON p.People_ID = pp.People_ID\nWHERE pp.Poker_Player_ID IS NULL;"}, {"isUser": true, "text": "What are the names of people who play poker?"}, {"isUser": false, "query": "SELECT Name FROM people WHERE People_ID IN  ( SELECT People_ID FROM poker_player ) ", "predict": "SELECT p.Name\nFROM people p\nJOIN poker_player pp ON p.People_ID = pp.People_ID;"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "how many players are presented on the table"}, {"isUser": false, "query": "SELECT count ( * )  FROM players", "predict": "SELECT COUNT(*) FROM players;"}, {"isUser": true, "text": "list out the players first name"}, {"isUser": false, "query": "SELECT first_name FROM players", "predict": "SELECT first_name FROM players;"}, {"isUser": true, "text": "what is the country code of Mirjana"}, {"isUser": false, "query": "SELECT country_code FROM players  where first_name  =  \"Mirjana\"", "predict": "SELECT country_code FROM players WHERE first_name = 'Mirjana';"}, {"isUser": true, "text": "what is the birth date of Justine"}, {"isUser": false, "query": "SELECT birth_date FROM players  where first_name  =  \"Mirjana\"", "predict": "SELECT birth_date FROM players WHERE first_name = 'Justine';"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "what models are produced by the make General Motors?"}, {"isUser": false, "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors'", "predict": "SELECT ml.Model\nFROM model_list ml\nJOIN car_makers cm ON ml.Maker = cm.Id\nWHERE cm.Maker = 'General Motors';"}, {"isUser": true, "text": "what models have a weight greater than 3500"}, {"isUser": false, "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T4.weight  >  3500", "predict": "SELECT cn.Model\nFROM cars_data cd\nJOIN car_names cn ON cd.Id = cn.MakeId\nWHERE cd.Weight > 3500;"}, {"isUser": true, "text": "could you list the models from the previous two questions with no duplicates please"}, {"isUser": false, "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' or T4.weight  < =   3500", "predict": "SELECT ml.Model\nFROM model_list ml\nJOIN car_makers cm ON ml.Maker = cm.Id\nWHERE cm.Maker = 'General Motors'\n\nUNION\n\nSELECT cn.Model\nFROM cars_data cd\nJOIN car_names cn ON cd.Id = cn.MakeId\nWHERE cd.Weight > 3500;"}, {"isUser": true, "text": "can you list the models that weight greater than 3500 or have the maker General Motors, but not both"}, {"isUser": false, "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' Or T4.weight  < =   3500 except SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' and T4.weight  < =   3500", "predict": "SELECT cn.Model\nFROM cars_data cd\nJOIN car_names cn ON cd.Id = cn.MakeId\nWHERE cd.Weight > 3500\n\nEXCEPT\n\nSELECT ml.Model\nFROM model_list ml\nJOIN car_makers cm ON ml.Maker = cm.Id\nWHERE cm.Maker = 'General Motors'\n\nUNION\n\nSELECT ml.Model\nFROM model_list ml\nJOIN car_makers cm ON ml.Maker = cm.Id\nWHERE cm.Maker = 'General Motors'\n\nEXCEPT\n\nSELECT cn.Model\nFROM cars_data cd\nJOIN car_names cn ON cd.Id = cn.MakeId\nWHERE cd.Weight > 3500;"}]},
{"db_name": "poker_player", "turns": [{"isUser": true, "text": "Which height of Aleksey Ostapenko?"}, {"isUser": false, "query": "SELECT height FROM people where name  =  \"Aleksey Ostapenko\"", "predict": "SELECT Height\nFROM people\nWHERE Name = 'Aleksey Ostapenko';"}, {"isUser": true, "text": "Who the person is born on August 16, 1982?"}, {"isUser": false, "query": "SELECT name FROM people where birth_date  =  \"August 16, 1982\"", "predict": "SELECT Name\nFROM people\nWHERE Birth_Date = '1982-08-16';"}, {"isUser": true, "text": "What are the people id of nationality Russia?"}, {"isUser": false, "query": "SELECT people_id FROM people where nationality  =  \"Russia\"", "predict": "SELECT People_ID\nFROM people\nWHERE Nationality = 'Russia';"}, {"isUser": true, "text": "What are the nationalities that are shared by at least two people?"}, {"isUser": false, "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT ( * )    > =    2", "predict": "SELECT Nationality\nFROM people\nGROUP BY Nationality\nHAVING COUNT(People_ID) >= 2;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What is the population of Afghanistan?"}, {"isUser": false, "query": "SELECT Population FROM country where Name   =   \"Afghanistan\"", "predict": "SELECT Population FROM country WHERE Name = 'Afghanistan';"}, {"isUser": true, "text": "And for Aruba?"}, {"isUser": false, "query": "SELECT Population FROM country where Name   =   \"Aruba\"", "predict": "SELECT Population FROM country WHERE Name = 'Aruba';"}, {"isUser": true, "text": "What languages are spoken in Aruba?"}, {"isUser": false, "query": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T1.Name   =   \"Aruba\"", "predict": "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba');"}, {"isUser": true, "text": "Is there an official language for the country? | For which country? Aruba? | Yes."}, {"isUser": false, "query": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T1.Name   =   \"Aruba\" and T2.IsOfficial = 'T'", "predict": "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') AND IsOfficial = 'T';"}, {"isUser": true, "text": "What about for Afghanistan?"}, {"isUser": false, "query": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T1.Name   =   \"Afghanistan\" and T2.IsOfficial = 'T'", "predict": "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T';"}, {"isUser": true, "text": "How many other countries speak Dari?"}, {"isUser": false, "query": "SELECT count ( * )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.language = 'Dari' and T1.name ! =  'Afghanistan'", "predict": "SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Dari' AND CountryCode != (SELECT Code FROM country WHERE Name = 'Afghanistan');"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "LIST THE DOG NAMES WITH TREATMENT COST"}, {"isUser": false, "query": "SELECT name,cost_of_treatment  FROM Dogs join Treatments", "predict": "SELECT Dogs.name AS Dog_Name,\n    Treatments.cost_of_treatment AS Treatment_Cost\nFROM \n    Dogs\nJOIN \n    Treatments ON Dogs.dog_id = Treatments.dog_id;"}, {"isUser": true, "text": "ARRANGE THE COST OF TREATMENT IN DESCENDING ORDER | The result table of the treatment cost is listed in descending order of the cost of treatment. | FIND THE DOG NAMES WHICH COST LESS THAN 1000 FOR TREATMENT"}, {"isUser": false, "query": "SELECT name FROM Dogs WHERE dog_id NOT IN (  SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum ( cost_of_treatment )   <  1000  ) ", "predict": "SELECT Dogs.name AS Dog_Name,\n    Treatments.cost_of_treatment AS Treatment_Cost\nFROM \n    Dogs\nJOIN \n    Treatments ON Dogs.dog_id = Treatments.dog_id\nWHERE \n    Treatments.cost_of_treatment < 1000\nORDER BY \n    Treatments.cost_of_treatment DESC;"}]},
{"db_name": "museum_visit", "turns": [{"isUser": true, "text": "What age of Gonzalo Higuaín?"}, {"isUser": false, "query": "SELECT age FROM visitor where name  =  \"Gonzalo Higuaín\"", "predict": "SELECT Age FROM visitor WHERE Name = 'Gonzalo Higuaín';"}, {"isUser": true, "text": "How many tickets of customer id 5?"}, {"isUser": false, "query": "SELECT num_of_ticket FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id where visitor_id  =  5", "predict": "SELECT SUM(Num_of_Ticket) FROM visit WHERE visitor_ID = 5;"}, {"isUser": true, "text": "How many spent of Arjen Robben?"}, {"isUser": false, "query": "SELECT Total_spent FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id where name  =  \"Arjen Robben\"", "predict": "SELECT SUM(Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Name = 'Arjen Robben';"}, {"isUser": true, "text": "Find the name and age of the visitor who bought the most tickets at once."}, {"isUser": false, "query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "predict": "SELECT visitor.Name, visitor.Age\nFROM visitor\nJOIN visit ON visitor.ID = visit.visitor_ID\nORDER BY visit.Num_of_Ticket DESC\nLIMIT 1;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What are the regions that use English, please?"}, {"isUser": false, "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\"", "predict": "SELECT DISTINCT c.Region\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = 'English';"}, {"isUser": true, "text": "What are the regions that use Dutch, please?"}, {"isUser": false, "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"Dutch\"", "predict": "SELECT DISTINCT c.Region\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = 'Dutch';"}, {"isUser": true, "text": "What are the life expectancies of those regions?"}, {"isUser": false, "query": "SELECT DISTINCT T1.LifeExpectancy FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"Dutch\"", "predict": "SELECT c.Region, AVG(c.LifeExpectancy) AS AverageLifeExpectancy\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = 'Dutch'\nGROUP BY c.Region;"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "What are the names of the 3 youngest winners across all matches?"}, {"isUser": false, "query": "SELECT winner_name  FROM matches ORDER BY winner_age LIMIT 3", "predict": "SELECT winner_name, MIN(winner_age) AS youngest_age\nFROM matches\nGROUP BY winner_name\nORDER BY youngest_age ASC\nLIMIT 3;"}, {"isUser": true, "text": "What are their ranks? | do you want to show their names as well? | yes, please"}, {"isUser": false, "query": "SELECT DISTINCT winner_name,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "predict": "SELECT m.winner_name,\n    r.ranking AS winner_rank\nFROM \n    (SELECT winner_id, winner_name, MIN(winner_age) AS youngest_age\n     FROM matches\n     GROUP BY winner_id, winner_name\n     ORDER BY youngest_age ASC\n     LIMIT 3) AS m\nJOIN \n    rankings AS r ON m.winner_id = r.player_id\nORDER BY \n    m.youngest_age;"}, {"isUser": true, "text": "What is the loser name for each of those matches?"}, {"isUser": false, "query": "SELECT loser_name FROM matches ORDER BY winner_age LIMIT 3", "predict": "SELECT m.winner_name,\n    m.loser_name\nFROM \n    matches m\nJOIN \n    (SELECT winner_id, MIN(winner_age) AS youngest_age\n     FROM matches\n     GROUP BY winner_id\n     ORDER BY youngest_age ASC\n     LIMIT 3) AS yw ON m.winner_id = yw.winner_id;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "List the names of all the professionals."}, {"isUser": false, "query": "SELECT first_name, last_name FROM professionals", "predict": "SELECT first_name, last_name FROM Professionals;"}, {"isUser": true, "text": "List the names of all professionals that live in a city containing the substring West."}, {"isUser": false, "query": "SELECT first_name, last_name FROM professionals  WHERE city LIKE '%West%'", "predict": "SELECT first_name, last_name FROM Professionals WHERE city LIKE '%West%';"}, {"isUser": true, "text": "List the role of the professional named Taryn. | The role code of the professional with first name Taryn is Employee | List the role, street, city, and state of the professional with first name Taryn."}, {"isUser": false, "query": "SELECT role_code , street , city , state FROM professionals WHERE first_name  =  \"Taryn\"", "predict": "SELECT role_code, street, city, state FROM Professionals WHERE first_name = 'Taryn';"}, {"isUser": true, "text": "List the names of all the professionals and their state."}, {"isUser": false, "query": "SELECT first_name,state FROM professionals", "predict": "SELECT first_name, last_name, state FROM Professionals;"}, {"isUser": true, "text": "List the names of all professionals with the state Indiana."}, {"isUser": false, "query": "SELECT first_name FROM professionals WHERE state  =  \"Indiana\"", "predict": "SELECT first_name, last_name FROM Professionals WHERE state = 'Indiana';"}]},
{"db_name": "battle_death", "turns": [{"isUser": true, "text": "How many death events are there?"}, {"isUser": false, "query": "SELECT count ( * )  FROM death", "predict": "SELECT COUNT(*) FROM death;"}, {"isUser": true, "text": "Which event has the most deaths? | What information do you need? all the information of this event or some specific information, like the note? | Which death event has the highest number killed?"}, {"isUser": false, "query": "SELECT * FROM death where killed  =   ( select max ( killed )  from death ) ", "predict": "SELECT * FROM death ORDER BY killed DESC LIMIT 1;"}, {"isUser": true, "text": "Yes, please list them"}, {"isUser": false, "query": "SELECT * FROM death where note like \"%East%\"", "predict": "SELECT * FROM death WHERE killed = (SELECT MAX(killed) FROM death);"}]},
{"db_name": "battle_death", "turns": [{"isUser": true, "text": "What are the death situations caused by the ship with tonnage 't' ?"}, {"isUser": false, "query": "SELECT T1.killed FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "predict": "SELECT d.id, d.note, d.killed, d.injured\nFROM death d\nJOIN ship s ON d.caused_by_ship_id = s.id\nWHERE s.tonnage = 't';"}, {"isUser": true, "text": "What are the injury situations caused by the ship with tonnage 't' ?"}, {"isUser": false, "query": "SELECT T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "predict": "SELECT d.id, d.note, d.injured\nFROM death d\nJOIN ship s ON d.caused_by_ship_id = s.id\nWHERE s.tonnage = 't' AND d.injured > 0;"}, {"isUser": true, "text": "Tell me the total number of death and injury situations caused by the ship with tonnage 't'.."}, {"isUser": false, "query": "SELECT COUNT ( T1.id )  FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "predict": "SELECT SUM(d.killed) AS total_deaths, SUM(d.injured) AS total_injuries\nFROM death d\nJOIN ship s ON d.caused_by_ship_id = s.id\nWHERE s.tonnage = 't';"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "Can you list the number of car makers on each continent?"}, {"isUser": false, "query": "SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country GROUP BY T1.Continent", "predict": "SELECT continents.Continent,\n    COUNT(DISTINCT car_makers.Maker) AS NumberOfCarMakers\nFROM \n    continents\nJOIN \n    countries ON continents.ContId = countries.Continent\nJOIN \n    car_makers ON countries.CountryName = car_makers.Country\nGROUP BY \n    continents.Continent;"}, {"isUser": true, "text": "What about the number of car makers in the country USA?"}, {"isUser": false, "query": "seLECT count ( * )  FROM car_makers as T1 join countries as T2 on T2.CountryId   =   T1.Country where T2.countryname  =  \"usa\"", "predict": "SELECT COUNT(DISTINCT Maker) AS NumberOfCarMakers\nFROM \n    car_makers\nWHERE \n    Country = 'USA';"}, {"isUser": true, "text": "How about in the country Germany?"}, {"isUser": false, "query": "seLECT count ( * )  FROM car_makers as T1 join countries as T2 on T2.CountryId   =   T1.Country where T2.countryname  =  \"germany\"", "predict": "SELECT COUNT(DISTINCT Maker) AS NumberOfCarMakers\nFROM \n    car_makers\nWHERE \n    Country = 'Germany';"}, {"isUser": true, "text": "What about France?"}, {"isUser": false, "query": "seLECT count ( * )  FROM car_makers as T1 join countries as T2 on T2.CountryId   =   T1.Country where T2.countryname  =  \"france\"", "predict": "SELECT COUNT(DISTINCT Maker) AS NumberOfCarMakers\nFROM \n    car_makers\nWHERE \n    Country = 'France';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What is the total number of countries?"}, {"isUser": false, "query": "SELECT count ( * )  FROM country", "predict": "SELECT COUNT(*) AS TotalCountries FROM country;"}, {"isUser": true, "text": "How many cities are there?"}, {"isUser": false, "query": "SELECT count ( * )  FROM city", "predict": "SELECT COUNT(*) AS TotalCities FROM city;"}, {"isUser": true, "text": "Can you tell me the region where the city of Kabul is?"}, {"isUser": false, "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "predict": "SELECT region FROM country \nJOIN city ON country.Code = city.CountryCode \nWHERE city.Name = 'Kabul';"}, {"isUser": true, "text": "Yes. How many cities are the in the region?"}, {"isUser": false, "query": "SELECT count ( T2.name )  FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.region  =  \"Southern and Central Asia\"", "predict": "SELECT COUNT(city.ID) AS CitiesInRegion FROM city\nJOIN country ON city.CountryCode = country.Code\nWHERE country.Region = (\n    SELECT region FROM country \n    JOIN city ON country.Code = city.CountryCode \n    WHERE city.Name = 'Kabul'\n);"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "How many documents have template type code BK?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id   =   T2.template_id WHERE T1.template_type_code   =   \"BK\"", "predict": "SELECT COUNT(DISTINCT Documents.Document_ID) AS NumberOfDocuments\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Templates.Template_Type_Code = 'BK';"}, {"isUser": true, "text": "And their names?"}, {"isUser": false, "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id   =   T2.template_id WHERE T1.template_type_code   =   \"BK\"", "predict": "SELECT Documents.Document_Name\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Templates.Template_Type_Code = 'BK';"}, {"isUser": true, "text": "How many documents do not have template type code BK?"}, {"isUser": false, "query": "Select count ( * )  from documents where document_name not in \n ( SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id   =   T2.template_id WHERE T1.template_type_code   =   \"BK\" ) ", "predict": "SELECT COUNT(DISTINCT Documents.Document_ID) AS NumberOfDocuments\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Templates.Template_Type_Code != 'BK';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What are the codes of the countries that do not speak English?"}, {"isUser": false, "query": "SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  ! =   \"English\"", "predict": "SELECT DISTINCT c.Code\nFROM country c\nWHERE c.Code NOT IN (\n    SELECT cl.CountryCode\n    FROM countrylanguage cl\n    WHERE cl.Language = 'English'\n);"}, {"isUser": true, "text": "What are the codes of the countries that do not speak English whose government forms are not Republic?"}, {"isUser": false, "query": "SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\"", "predict": "SELECT DISTINCT c.Code\nFROM country c\nWHERE c.Code NOT IN (\n    SELECT cl.CountryCode\n    FROM countrylanguage cl\n    WHERE cl.Language = 'English'\n)\nAND c.GovernmentForm NOT LIKE '%Republic%';"}, {"isUser": true, "text": "What language do each of those speak, please?"}, {"isUser": false, "query": "select countrycode, language from countrylanguage where countrycode in  ( SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ", "predict": "SELECT c.Code, cl.Language\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE c.Code NOT IN (\n    SELECT cl.CountryCode\n    FROM countrylanguage cl\n    WHERE cl.Language = 'English'\n)\nAND c.GovernmentForm NOT LIKE '%Republic%';"}, {"isUser": true, "text": "Which of those countries is on the continent North America?"}, {"isUser": false, "query": "select code from country where continent  =  \"North America\" and code in  ( SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ", "predict": "SELECT c.Code, cl.Language\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE c.Code NOT IN (\n    SELECT cl.CountryCode\n    FROM countrylanguage cl\n    WHERE cl.Language = 'English'\n)\nAND c.GovernmentForm NOT LIKE '%Republic%'\nAND c.Continent = 'North America';"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "which professionals live in state of indiana? | What information do you want to know about these professionals? | I would like to know all the information about professionals?"}, {"isUser": false, "query": "SELECT * FROM Professionals WHERE state   =   'Indiana'", "predict": "SELECT *\nFROM Professionals\nWHERE state = 'Indiana';"}, {"isUser": true, "text": "ok, I need to know the cell number of taryn"}, {"isUser": false, "query": "SELECT cell_number FROM Professionals WHERE first_name  =  \"Taryn\"", "predict": "SELECT cell_number\nFROM Professionals\nWHERE first_name = 'Taryn';"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "how many templates there"}, {"isUser": false, "query": "SELECT count ( * )  FROM Templates", "predict": "SELECT COUNT(*) FROM Templates;"}, {"isUser": true, "text": "what is the date effective of template id 1"}, {"isUser": false, "query": "SELECT Date_Effective_From, Date_Effective_To FROM Templates where Template_ID = 1", "predict": "SELECT Date_Effective_From FROM Templates WHERE Template_ID = 1;"}, {"isUser": true, "text": "what is the template type code of template id 4"}, {"isUser": false, "query": "SELECT Template_Type_Code  FROM Templates where Template_ID = 4", "predict": "SELECT Template_Type_Code FROM Templates WHERE Template_ID = 4;"}, {"isUser": true, "text": "what is the version number of template id 0"}, {"isUser": false, "query": "SELECT Version_Number  FROM Templates where Template_ID = 0", "predict": "SELECT Version_Number FROM Templates WHERE Template_ID = 0;"}]},
{"db_name": "concert_singer", "turns": [{"isUser": true, "text": "Can you tell me which countries a singer above age 40 are from please?"}, {"isUser": false, "query": "SELECT country FROM singer WHERE age  >  40", "predict": "SELECT DISTINCT Country\nFROM singer\nWHERE Age > 40;"}, {"isUser": true, "text": "Can you tell me which countries a singer below age 30 are from please?"}, {"isUser": false, "query": "SELECT DISTINCT ( country )  FROM singer WHERE age  < 30", "predict": "SELECT DISTINCT Country\nFROM singer\nWHERE Age < 30;"}, {"isUser": true, "text": "Can you tell me which countries a singer above age 40 and below age 30 are from please?"}, {"isUser": false, "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "predict": "SELECT DISTINCT Country\nFROM singer\nWHERE Age > 40 OR Age < 30;"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "WHAT IS THE ACCELERATE OF THE CAR MAKE AMC HORNET SPORTABOUT(SW)"}, {"isUser": false, "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId WHERE T2.Make   =   'amc hornet sportabout  ( sw ) '", "predict": "SELECT cd.Accelerate\nFROM cars_data cd\nJOIN car_names cn ON cd.Id = cn.MakeId\nWHERE cn.Make = 'AMC' AND cn.Model = 'Hornet Sportabout (SW)';"}, {"isUser": true, "text": "CAN YOU WHICH CAR MODEL IS MOST RECENT RELEASED"}, {"isUser": false, "query": "SELECT T2.Model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId order by T1.Year desc limit 1", "predict": "SELECT cn.Model, MAX(cd.Year) AS MostRecentYear\nFROM cars_data cd\nJOIN car_names cn ON cd.Id = cn.MakeId\nGROUP BY cn.Model\nORDER BY MostRecentYear DESC\nLIMIT 1;"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "what are all of the template ids?"}, {"isUser": false, "query": "SELECT template_id FROM Templates", "predict": "SELECT Template_ID FROM Templates;"}, {"isUser": true, "text": "which of those is not used in a document"}, {"isUser": false, "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "predict": "SELECT Template_ID FROM Templates\nWHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents);"}, {"isUser": true, "text": "are those still effective? | Do you mean the effective-to date of those templates? | yes"}, {"isUser": false, "query": "SELECT Date_effective_to FROM Templates WHERE template_id IN  (  SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents ) ", "predict": "SELECT Template_ID FROM Templates\nWHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents)\nAND (Date_Effective_To IS NULL OR Date_Effective_To > CURRENT_DATE);"}, {"isUser": true, "text": "how many are used in documents? | 12 templates are used in a document. | and how many templates are not used?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Templates WHERE template_id in  ( SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents ) ", "predict": "SELECT COUNT(*) FROM Templates\nWHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents);"}, {"isUser": true, "text": "what were those IDs again?"}, {"isUser": false, "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "predict": "SELECT Template_ID FROM Templates\nWHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents);"}]},
{"db_name": "concert_singer", "turns": [{"isUser": true, "text": "show the name and theme for all concerts and the number of singers in each concert."}, {"isUser": false, "query": "SELECT T2.concert_name , T2.theme , count ( * )  FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id", "predict": "SELECT c.concert_Name AS Concert_Name,\n    c.Theme AS Theme,\n    COUNT(sic.Singer_ID) AS Number_of_Singers\nFROM \n    concert c\nLEFT JOIN \n    singer_in_concert sic ON c.concert_ID = sic.concert_ID\nGROUP BY \n    c.concert_ID, c.concert_Name, c.Theme;"}, {"isUser": true, "text": "what year was super bootcamp?"}, {"isUser": false, "query": "SELECT Year FROM concert WHERE concert_Name  =  \"Super bootcamp\"", "predict": "SELECT Year\nFROM concert\nWHERE concert_Name = 'Super Bootcamp';"}, {"isUser": true, "text": "what is the Stadium ID for Super bootcamp?"}, {"isUser": false, "query": "SELECT Stadium_ID FROM concert WHERE concert_Name  =  \"Super bootcamp\"", "predict": "SELECT Stadium_ID\nFROM concert\nWHERE concert_Name = 'Super Bootcamp';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What is the population in Asian continent?"}, {"isUser": false, "query": "SELECT sum ( Population )  FROM country where Continent  =  'Asia'", "predict": "SELECT SUM(Population) AS TotalPopulation\nFROM country\nWHERE Continent = 'Asia';"}, {"isUser": true, "text": "Which language has 9.5%?"}, {"isUser": false, "query": "SELECT Language FROM countrylanguage where Percentage  =  9.5", "predict": "SELECT Language\nFROM countrylanguage\nWHERE Percentage = 9.5;"}, {"isUser": true, "text": "What is the life expectancy rate in Angola?"}, {"isUser": false, "query": "SELECT LifeExpectancy FROM country where LocalName  =  'Angola'", "predict": "SELECT LifeExpectancy\nFROM country\nWHERE Name = 'Angola';"}, {"isUser": true, "text": "What is the GNP rate of Aruba? | did you mean the GNP or GNP old? | GNP"}, {"isUser": false, "query": "SELECT GNP FROM country where LocalName  =  'Angola'", "predict": "SELECT GNP\nFROM country\nWHERE Name = 'Aruba';"}, {"isUser": true, "text": "What is the GNP old of Afghanistan?"}, {"isUser": false, "query": "SELECT GNPOld FROM country where Name  =  'Afghanistan'", "predict": "SELECT GNPOld\nFROM country\nWHERE Name = 'Afghanistan';"}]},
{"db_name": "concert_singer", "turns": [{"isUser": true, "text": "What are the names of the singers whose song release year is greater than the average song release year"}, {"isUser": false, "query": "SELECT song_name FROM singer WHERE song_release_year  >   ( SELECT avg ( song_release_year )  FROM singer ) ", "predict": "SELECT Name\nFROM singer\nWHERE Song_release_year > (SELECT AVG(Song_release_year) FROM singer);"}, {"isUser": true, "text": "What is the average song release year?"}, {"isUser": false, "query": "SELECT avg ( song_release_year )  FROM singer", "predict": "SELECT AVG(Song_release_year) AS Average_Release_Year\nFROM singer;"}, {"isUser": true, "text": "List the songs in increasing release years | Do you want the names of the songs ordered by their release year? | Yes I do"}, {"isUser": false, "query": "SELECT song_name from singer order by song_release_year", "predict": "SELECT Song_Name\nFROM singer\nORDER BY Song_release_year ASC;"}, {"isUser": true, "text": "List all song names by singers above the average age"}, {"isUser": false, "query": "SELECT song_name FROM singer WHERE age  >   ( SELECT avg ( age )  FROM singer ) ", "predict": "SELECT Song_Name\nFROM singer\nWHERE Age > (SELECT AVG(Age) FROM singer);"}]},
{"db_name": "orchestra", "turns": [{"isUser": true, "text": "Please answer the question.what is the orchestra of conductor? | Do you want all the orchestras of all conductors? | yes"}, {"isUser": false, "query": "SELECT T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID   =   T2.Conductor_ID", "predict": "SELECT c.Name AS Conductor_Name,\n    o.Orchestra AS Orchestra_Name\nFROM \n    conductor c\nJOIN \n    orchestra o ON c.Conductor_ID = o.Conductor_ID;"}, {"isUser": true, "text": "what is the name of all conductors?"}, {"isUser": false, "query": "SELECT Name FROM conductor", "predict": "SELECT Name FROM conductor;"}, {"isUser": true, "text": "What is the age of Colin Davis?"}, {"isUser": false, "query": "SELECT Age FROM conductor WHERE Name  =  \"Colin Davis\"", "predict": "SELECT Age FROM conductor WHERE Name = 'Colin Davis';"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "how many students there"}, {"isUser": false, "query": "SELECT count ( * )  FROM Students", "predict": "SELECT COUNT(*) FROM Students;"}, {"isUser": true, "text": "what is the first name of student id 3"}, {"isUser": false, "query": "SELECT first_name FROM Students where student_id = 3", "predict": "SELECT first_name FROM Students WHERE student_id = 3;"}, {"isUser": true, "text": "what is email address of student id 2"}, {"isUser": false, "query": "SELECT email_address FROM Students where student_id = 2", "predict": "SELECT email_address FROM Students WHERE student_id = 2;"}, {"isUser": true, "text": "how many student enrolment there"}, {"isUser": false, "query": "SELECT count ( * )  FROM Student_Enrolment", "predict": "SELECT COUNT(*) FROM Student_Enrolment;"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "What are the templates ever used by any document?"}, {"isUser": false, "query": "SELECT * FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID   =   T2.template_ID", "predict": "SELECT DISTINCT T.Template_ID, T.Template_Details\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID;"}, {"isUser": true, "text": "What are the template type descriptions for these templates?"}, {"isUser": false, "query": "SELECT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "predict": "SELECT DISTINCT TT.Template_Type_Description\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nJOIN Ref_Template_Types TT ON T.Template_Type_Code = TT.Template_Type_Code;"}, {"isUser": true, "text": "Can I get the distinct template type descriptions for these templates?"}, {"isUser": false, "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "predict": "SELECT DISTINCT TT.Template_Type_Description\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nJOIN Ref_Template_Types TT ON T.Template_Type_Code = TT.Template_Type_Code;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "Which country has the largest area? | Russian Federation is the name of the country with the largest area. | And what is the population of this country?"}, {"isUser": false, "query": "SELECT Population FROM country ORDER BY SurfaceArea DESC LIMIT 1", "predict": "SELECT Population\nFROM country\nWHERE Name = 'Russian Federation';"}, {"isUser": true, "text": "Who is it's leader?"}, {"isUser": false, "query": "SELECT HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "predict": "SELECT HeadOfState\nFROM country\nWHERE Name = 'Russian Federation';"}, {"isUser": true, "text": "Yes, on which continent is this country located?"}, {"isUser": false, "query": "SELECT Continent FROM country ORDER BY SurfaceArea DESC LIMIT 1", "predict": "SELECT Continent\nFROM country\nWHERE Name = 'Russian Federation';"}]},
{"db_name": "poker_player", "turns": [{"isUser": true, "text": "Name players whose earnings are more than 300000. | Do you mean the names of the poker players whose earnings is more than 300000? | yes names"}, {"isUser": false, "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T2.Earnings  >  300000", "predict": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE pp.Earnings > 300000;"}, {"isUser": true, "text": "how many poker players?"}, {"isUser": false, "query": "SELECT count ( Poker_Player_ID )  from poker_player", "predict": "SELECT COUNT(*)\nFROM poker_player;"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "how many students live in North Carolina?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina'", "predict": "SELECT COUNT(DISTINCT s.student_id) AS NumberOfStudents\nFROM Students s\nJOIN Addresses a ON s.current_address_id = a.address_id\nWHERE a.state_province_county = 'North Carolina';"}, {"isUser": true, "text": "What are their first and last names?"}, {"isUser": false, "query": "SELECT T1.first_name,T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina'", "predict": "SELECT s.first_name, s.last_name\nFROM Students s\nJOIN Addresses a ON s.current_address_id = a.address_id\nWHERE a.state_province_county = 'North Carolina';"}, {"isUser": true, "text": "Which of those do not have degree program id?"}, {"isUser": false, "query": "SELECT T1.first_name, T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT T3.first_name, T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id", "predict": "SELECT s.first_name, s.last_name\nFROM Students s\nJOIN Addresses a ON s.current_address_id = a.address_id\nLEFT JOIN Student_Enrolment se ON s.student_id = se.student_id\nWHERE a.state_province_county = 'North Carolina' AND se.degree_program_id IS NULL;"}]},
{"db_name": "voter_1", "turns": [{"isUser": true, "text": "What are all the area codes?"}, {"isUser": false, "query": "select area_code from AREA_CODE_STATE", "predict": "SELECT area_code FROM AREA_CODE_STATE;"}, {"isUser": true, "text": "What area codes voted for the contestant 'Tabatha Gehling'?"}, {"isUser": false, "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling'", "predict": "SELECT DISTINCT V.phone_number / 10000000 AS area_code\nFROM VOTES V\nJOIN CONTESTANTS C ON V.contestant_number = C.contestant_number\nWHERE C.contestant_name = 'Tabatha Gehling';"}, {"isUser": true, "text": "What area codes voted for the contestant 'Kelly Clauss'?"}, {"isUser": false, "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "predict": "SELECT DISTINCT V.phone_number / 10000000 AS area_code\nFROM VOTES V\nJOIN CONTESTANTS C ON V.contestant_number = C.contestant_number\nWHERE C.contestant_name = 'Kelly Clauss';"}, {"isUser": true, "text": "What area codes voted for both the contestant 'Kelly Clauss' and 'Tabatha Gehling'?"}, {"isUser": false, "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "predict": "SELECT DISTINCT V1.area_code\nFROM (\n    SELECT phone_number / 10000000 AS area_code\n    FROM VOTES V\n    JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number\n    WHERE C.contestant_name = 'Kelly Clauss'\n) V1\nJOIN (\n    SELECT phone_number / 10000000 AS area_code\n    FROM VOTES V\n    JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number\n    WHERE C.contestant_name = 'Tabatha Gehling'\n) V2 ON V1.area_code = V2.area_code;"}]},
{"db_name": "employee_hire_evaluation", "turns": [{"isUser": true, "text": "how many shop are presented on the table"}, {"isUser": false, "query": "SELECT count ( * )  FROM shop", "predict": "SELECT COUNT(*) FROM shop;"}, {"isUser": true, "text": "list out the shop names"}, {"isUser": false, "query": "SELECT name FROM shop", "predict": "SELECT Name FROM shop;"}, {"isUser": true, "text": "what is the location of FC Haka"}, {"isUser": false, "query": "SELECT location FROM shop where name  =  \"FC Haka\"", "predict": "SELECT Location FROM shop WHERE Name = 'FC Haka';"}, {"isUser": true, "text": "what is the number of products in HJK"}, {"isUser": false, "query": "SELECT Number_products FROM shop where name  =  \"HJK\"", "predict": "SELECT Number_products FROM shop WHERE Name = 'HJK';"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "Hello!  Can you list all of the deparatment names and department IDs?"}, {"isUser": false, "query": "select department_id,department_name from Departments", "predict": "SELECT department_id, department_name FROM Departments;"}, {"isUser": true, "text": "Cool!  Can you show me all of the degree summary names associated with this department?"}, {"isUser": false, "query": "select T2.degree_summary_name from Departments as T1 JOIN Degree_Programs as T2 on T1.department_id  =  T2.department_id where T1.department_name  =  'statistics'", "predict": "To provide you with the degree summary names associated with a specific department, I would need to know the department ID or department name you are interested in. Could you please provide that information?"}]}]
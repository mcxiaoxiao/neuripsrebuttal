[{"db_name": "car_1", "turns": [{"isUser": true, "text": "How many car models are produced by each maker? List the count and the maker full name."}, {"isUser": false, "query": "SELECT Count ( * )  ,  T2.FullName  FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id", "predict": "SELECT car_makers.FullName, COUNT(model_list.Model) AS ModelCount\nFROM car_makers\nJOIN model_list ON car_makers.Id = model_list.Maker\nGROUP BY car_makers.FullName;"}, {"isUser": true, "text": "Which models are the most popular?"}, {"isUser": false, "query": "SELECT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id order by count ( * )  desc limit 1", "predict": "SELECT Model, COUNT(*) AS Popularity\nFROM car_names\nGROUP BY Model\nORDER BY Popularity DESC;"}, {"isUser": true, "text": "Which companies have three or more models?"}, {"isUser": false, "query": "SELECT Count ( * )  ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id having count ( * )   > =  3", "predict": "SELECT car_makers.FullName, COUNT(model_list.Model) AS ModelCount\nFROM car_makers\nJOIN model_list ON car_makers.Id = model_list.Maker\nGROUP BY car_makers.FullName\nHAVING ModelCount >= 3;"}]},
{"db_name": "concert_singer", "turns": [{"isUser": true, "text": "please list the singers | did you mean list their names? | yes"}, {"isUser": false, "query": "SELECT name FROM singer", "predict": "SELECT Name\nFROM singer;"}, {"isUser": true, "text": "can you also  give number of concerts for each singer"}, {"isUser": false, "query": "SELECT T2.name ,  count ( * )  FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id   =   T2.singer_id GROUP BY T2.singer_id", "predict": "SELECT s.Name, COUNT(c.concert_ID) AS Concert_Count\nFROM singer s\nLEFT JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nLEFT JOIN concert c ON sic.concert_ID = c.concert_ID\nGROUP BY s.Name;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "how many female dogs have gone through treatment"}, {"isUser": false, "query": "SELECT count ( * )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "predict": "SELECT COUNT(*) \nFROM Dogs \nWHERE gender = 'female' \nAND dog_id IN (SELECT dog_id FROM Treatments)"}, {"isUser": true, "text": "what are their ages"}, {"isUser": false, "query": "SELECT age FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "predict": "SELECT age\nFROM Dogs \nWHERE gender = 'female' \nAND dog_id IN (SELECT dog_id FROM Treatments)"}, {"isUser": true, "text": "what is the highest weight of age 2"}, {"isUser": false, "query": "SELECT weight FROM Dogs WHERE age = 2 ORDER BY weight DESC LIMIT 1", "predict": "SELECT MAX(weight)\nFROM Dogs\nWHERE age = '2'"}]},
{"db_name": "course_teach", "turns": [{"isUser": true, "text": "How many teachers are there?"}, {"isUser": false, "query": "SELECT COUNT ( * )  FROM teacher", "predict": "SELECT COUNT(*) \nFROM teacher;"}, {"isUser": true, "text": "How many courses do you have?"}, {"isUser": false, "query": "SELECT COUNT ( * )  FROM course_arrange", "predict": "SELECT COUNT(*) \nFROM course;"}, {"isUser": true, "text": "Can you tell me the names of teachers and the number of courses they teach?"}, {"isUser": false, "query": "SELECT T2.Name , COUNT ( * )  FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "predict": "SELECT t.Name, COUNT(ca.Course_ID) as Number_of_Courses\nFROM teacher t\nLEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Name;"}, {"isUser": true, "text": "Sure. Can you tell me the age of each teacher?"}, {"isUser": false, "query": "SELECT Name , age FROM teacher", "predict": "SELECT Name, Age\nFROM teacher;"}]},
{"db_name": "battle_death", "turns": [{"isUser": true, "text": "What is the Latin commander of Battle of Serres?"}, {"isUser": false, "query": "SELECT latin_commander FROM battle WHERE name  =  \"Battle of Serres\"", "predict": "SELECT latin_commander\nFROM battle\nWHERE name = 'Battle of Serres';"}, {"isUser": true, "text": "What is the result of 31st January 1206?"}, {"isUser": false, "query": "SELECT result FROM battle WHERE date  =  \"31 January 1206\"", "predict": "SELECT result\nFROM battle\nWHERE date = '31st January 1206';"}, {"isUser": true, "text": "Who is the Bulgarian commander on June 1205?"}, {"isUser": false, "query": "SELECT bulgarian_commander FROM battle WHERE date  =  \"June 1205\"", "predict": "SELECT bulgarian_commander\nFROM battle\nWHERE date LIKE '%June 1205%';"}, {"isUser": true, "text": "What is the name of battle who has Latin commander is Baldwin 1?"}, {"isUser": false, "query": "SELECT name FROM battle WHERE latin_commander  =  \"Baldwin I\"", "predict": "SELECT name\nFROM battle\nWHERE latin_commander = 'Baldwin 1';"}]},
{"db_name": "tvshow", "turns": [{"isUser": true, "text": "how many TV Channels there"}, {"isUser": false, "query": "SELECT count ( * )  FROM TV_Channel", "predict": "SELECT COUNT(*) AS Number_of_TV_Channels\nFROM TV_Channel;"}, {"isUser": true, "text": "what is the language of sky music"}, {"isUser": false, "query": "SELECT language FROM TV_Channel where series_name = 'Sky Music'", "predict": "SELECT Language\nFROM TV_Channel\nWHERE series_name = 'Sky Music';"}, {"isUser": true, "text": "what is the title of id 2.0"}, {"isUser": false, "query": "SELECT title FROM Cartoon where id = 2.0", "predict": "SELECT Title\nFROM Cartoon\nWHERE id = 2.0;"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "what is the highest horsepower on the table?"}, {"isUser": false, "query": "SELECT Horsepower FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1", "predict": "SELECT MAX(Horsepower) FROM cars_data;"}, {"isUser": true, "text": "how many cars data on the table?"}, {"isUser": false, "query": "SELECT count ( * )  FROM CARS_DATA", "predict": "SELECT COUNT(*) FROM cars_data;"}, {"isUser": true, "text": "how many cylinders on the table?"}, {"isUser": false, "query": "SELECT sum ( cylinders )  FROM CARS_DATA", "predict": "SELECT COUNT(DISTINCT Cylinders) FROM cars_data;"}]},
{"db_name": "employee_hire_evaluation", "turns": [{"isUser": true, "text": "Which district has the largest number of products?"}, {"isUser": false, "query": "SELECT district FROM shop ORDER BY number_products DESC LIMIT 1", "predict": "SELECT District\nFROM shop\nORDER BY Number_products DESC\nLIMIT 1;"}, {"isUser": true, "text": "What is the manager's name of that shop?"}, {"isUser": false, "query": "SELECT manager_name FROM shop ORDER BY number_products DESC LIMIT 1", "predict": "SELECT Manager_name\nFROM shop\nWHERE Number_products = (SELECT MAX(Number_products) FROM shop);"}, {"isUser": true, "text": "How many products did he produce at that shop?"}, {"isUser": false, "query": "SELECT number_products FROM shop ORDER BY number_products DESC LIMIT 1", "predict": "SELECT Number_products\nFROM shop\nWHERE Number_products = (SELECT MAX(Number_products) FROM shop);"}, {"isUser": true, "text": "Where is the location of that district?"}, {"isUser": false, "query": "SELECT location FROM shop ORDER BY number_products DESC LIMIT 1", "predict": "SELECT Location\nFROM shop\nWHERE District = (SELECT District FROM shop ORDER BY Number_products DESC LIMIT 1);"}, {"isUser": true, "text": "What is the shop ID number?"}, {"isUser": false, "query": "SELECT shop_ID FROM shop ORDER BY number_products DESC LIMIT 1", "predict": "SELECT Shop_ID\nFROM shop\nWHERE District = (SELECT District FROM shop ORDER BY Number_products DESC LIMIT 1);"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "I want to know the average population of all cities please"}, {"isUser": false, "query": "SELECT avg ( Population )  FROM city", "predict": "SELECT AVG(Population) AS AveragePopulation FROM city;"}, {"isUser": true, "text": "And which districts have cities with populations greater than the average?"}, {"isUser": false, "query": "SELECT District FROM city WHERE Population  >   ( SELECT avg ( Population )  FROM city ) ", "predict": "SELECT District\nFROM city\nWHERE Population > (SELECT AVG(Population) FROM city);"}, {"isUser": true, "text": "Within these districts, how many cities does each have with a population greater than the average?"}, {"isUser": false, "query": "SELECT count ( * )  ,  District FROM city WHERE Population  >   ( SELECT avg ( Population )  FROM city )  GROUP BY District", "predict": "SELECT District, COUNT(*)\nFROM city\nWHERE Population > (SELECT AVG(Population) FROM city)\nGROUP BY District;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "Can you list all nations whose government is US territory?"}, {"isUser": false, "query": "SELECT Name FROM country WHERE GovernmentForm   =   \"US Territory\"", "predict": "SELECT Name\nFROM country\nWHERE GovernmentForm = 'US territory';"}, {"isUser": true, "text": "Hmm, I also want to know their GNP and population."}, {"isUser": false, "query": "SELECT GNP, population FROM country WHERE GovernmentForm   =   \"US Territory\"", "predict": "SELECT Name, GNP, Population\nFROM country\nWHERE GovernmentForm = 'US territory';"}, {"isUser": true, "text": "Please find out the average GNP and total population of those nations."}, {"isUser": false, "query": "SELECT avg ( GNP )  ,  sum ( population )  FROM country WHERE GovernmentForm   =   \"US Territory\"", "predict": "SELECT AVG(GNP) AS Average_GNP, SUM(Population) AS Total_Population\nFROM country\nWHERE GovernmentForm = 'US territory';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "give me the total surface area of the continent\n Asia"}, {"isUser": false, "query": "SELECT sum ( SurfaceArea )  FROM country WHERE Continent  =  \"Asia\"", "predict": "SELECT SUM(SurfaceArea) \nFROM country \nWHERE Continent = 'Asia';"}, {"isUser": true, "text": "what is the local name | Did you mean to ask for all local names? | yes"}, {"isUser": false, "query": "SELECT LocalName FROM country", "predict": "SELECT LocalName \nFROM country;"}, {"isUser": true, "text": "What is Aruba's code?"}, {"isUser": false, "query": "SELECT Code FROM country WHERE Name  =  \"Aruba\"", "predict": "SELECT Code \nFROM country \nWHERE Name = 'Aruba';"}]},
{"db_name": "employee_hire_evaluation", "turns": [{"isUser": true, "text": "How many shops do we have data for?"}, {"isUser": false, "query": "SELECT count ( * )  FROM shop", "predict": "SELECT COUNT(*) FROM shop;"}, {"isUser": true, "text": "Can you give me their names?"}, {"isUser": false, "query": "SELECT * FROM shop", "predict": "SELECT Name FROM shop;"}, {"isUser": true, "text": "And how many employees were hired by each shop?"}, {"isUser": false, "query": "SELECT count ( * )  FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t2.name", "predict": "SELECT s.Name, COUNT(h.Employee_ID) AS Num_Employees\nFROM shop s\nLEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Name;"}]},
{"db_name": "concert_singer", "turns": [{"isUser": true, "text": "what are the singers name on this list?"}, {"isUser": false, "query": "SELECT name from singer", "predict": "SELECT Name\nFROM singer;"}, {"isUser": true, "text": "Joe Sharp song \"You\" was released in what year?"}, {"isUser": false, "query": "SELECT song_release_year from singer where Name  =  \"Joe Sharp\" and Song_Name  =  \"You\"", "predict": "SELECT Song_release_year\nFROM singer\nWHERE Name = 'Joe Sharp' AND Song_Name = 'You';"}, {"isUser": true, "text": "how many number of concert has Joe Sharp held?"}, {"isUser": false, "query": "SELECT count ( * )  FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id   =   T2.singer_id where T2.name  =  \"Joe Sharp\" GROUP BY T2.singer_id", "predict": "SELECT COUNT(concert_ID) AS Number_of_Concerts\nFROM singer_in_concert\nWHERE Singer_ID = (SELECT Singer_ID FROM singer WHERE Name = 'Joe Sharp');"}, {"isUser": true, "text": "ok. what country is Joe sharp from?"}, {"isUser": false, "query": "SELECT country from singer where name  =  \"Joe Sharp\"", "predict": "SELECT Country\nFROM singer\nWHERE Name = 'Joe Sharp';"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "Can you list all the continents?"}, {"isUser": false, "query": "SELECT Continent FROM CONTINENTS", "predict": "SELECT Continent FROM continents;"}, {"isUser": true, "text": "Okay, now can you list the number of countries belonging to each continent, including the continent id as well?"}, {"isUser": false, "query": "SELECT T1.ContId ,  T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.Continent GROUP BY T1.ContId", "predict": "SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS NumCountries\nFROM continents c\nLEFT JOIN countries co ON c.ContId = co.Continent\nGROUP BY c.ContId, c.Continent;"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "which models are lighter than 3500?"}, {"isUser": false, "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model   =   T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId   =   T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker   =   T4.Id WHERE T3.weight  <  3500", "predict": "SELECT Model\nFROM model_list\nWHERE ModelId IN (\n    SELECT Id\n    FROM cars_data\n    WHERE Weight < 3500\n)"}, {"isUser": true, "text": "what is the weight of  BMW?"}, {"isUser": false, "query": "SELECT DISTINCT T3.Weight FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model   =   T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId   =   T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker   =   T4.Id WHERE T1.Model = \"bmw\"", "predict": "SELECT Weight\nFROM cars_data\nWHERE Id IN (\n    SELECT Id\n    FROM car_names\n    WHERE Make = 'BMW'\n)"}, {"isUser": true, "text": "what is the name of the id 2? | Are you asking about the car or the carmaker? | carmaker?"}, {"isUser": false, "query": "SELECT Model FROM car_names WHERE MakeId = 2", "predict": "SELECT Maker\nFROM car_makers\nWHERE Id = 2"}]},
{"db_name": "singer", "turns": [{"isUser": true, "text": "how many  singer there"}, {"isUser": false, "query": "SELECT count ( * )  from singer", "predict": "SELECT COUNT(*) AS Total_Singers\nFROM singer;"}, {"isUser": true, "text": "what is the Citizenship of Alice Walton"}, {"isUser": false, "query": "SELECT citizenship from singer where name  =  \"Alice Walton\"", "predict": "SELECT Citizenship\nFROM singer\nWHERE Name = 'Alice Walton';"}, {"isUser": true, "text": "how many sales from song id 3"}, {"isUser": false, "query": "SELECT Sales from song where song_id  =  3", "predict": "SELECT Sales\nFROM song\nWHERE Song_ID = 3;"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "delta airline is from which country?"}, {"isUser": false, "query": "SELECT country FROM AIRLINES where Airline  =  'Delta Airlines'", "predict": "SELECT Country \nFROM airlines \nWHERE Abbreviation = 'delta';"}, {"isUser": true, "text": "what is the destination airport of flight no 44?"}, {"isUser": false, "query": "SELECT DestAirport FROM flights where FlightNo  =  44", "predict": "SELECT DestAirport \nFROM flights \nWHERE FlightNo = 44;"}, {"isUser": true, "text": "which airline has most number of flights?"}, {"isUser": false, "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT Airline, COUNT(*) AS NumFlights\nFROM flights\nGROUP BY Airline\nORDER BY NumFlights DESC\nLIMIT 1;"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "How many courses in this table? | Do you mean the number of the courses with different course ids? | Yes."}, {"isUser": false, "query": "SELECT  count ( distinct course_id )  from courses", "predict": "SELECT COUNT(DISTINCT course_id) AS num_courses\nFROM Courses;"}, {"isUser": true, "text": "What's the name of the course with least number of students of enrollments?"}, {"isUser": false, "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id   =   T2.course_id GROUP BY T1.course_name ORDER BY count ( * )  LIMIT 1", "predict": "SELECT c.course_name\nFROM Courses c\nJOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id\nGROUP BY c.course_id\nORDER BY COUNT(sec.student_enrolment_id)\nLIMIT 1;"}]},
{"db_name": "concert_singer", "turns": [{"isUser": true, "text": "how many concert are presented on the table"}, {"isUser": false, "query": "SELECT  count ( * )  FROM concert", "predict": "SELECT COUNT(*) \nFROM concert;"}, {"isUser": true, "text": "show the stadium name and the number of concerts in each stadium"}, {"isUser": false, "query": "SELECT T2.name , count ( * )  FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "predict": "SELECT s.Name AS Stadium_Name, COUNT(c.concert_ID) AS Number_of_Concerts\nFROM stadium s\nLEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID\nGROUP BY s.Name;"}, {"isUser": true, "text": "what is the capacity of Stark's Park"}, {"isUser": false, "query": "SELECT capacity from stadium where name  =  \"Stark s Park\"", "predict": "SELECT Capacity\nFROM stadium\nWHERE Name = 'Stark''s Park';"}, {"isUser": true, "text": "list out the concert names"}, {"isUser": false, "query": "SELECT concert_name from concert", "predict": "SELECT concert_Name\nFROM concert;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "How many different treatments are there?"}, {"isUser": false, "query": "select count ( * )  from  ( SELECT distinct treatment_type_code from treatments ) ", "predict": "SELECT COUNT(DISTINCT treatment_type_code) AS number_of_treatments\nFROM Treatment_Types;"}, {"isUser": true, "text": "which one is the most expensive?"}, {"isUser": false, "query": "SELECT * FROM Treatments ORDER BY cost_of_treatment DESC LIMIT 1", "predict": "SELECT treatment_type_code, MAX(cost_of_treatment) AS max_cost\nFROM Treatments\nGROUP BY treatment_type_code\nORDER BY max_cost DESC\nLIMIT 1;"}, {"isUser": true, "text": "And how about the price of the most recent treatment?"}, {"isUser": false, "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "predict": "SELECT MAX(cost_of_treatment) AS max_recent_cost\nFROM Treatments\nWHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments);"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "Find all airlines that have fewer than 200 flights."}, {"isUser": false, "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline HAVING count ( * )   <  200", "predict": "SELECT Airline\nFROM flights\nGROUP BY Airline\nHAVING COUNT(*) < 200;"}, {"isUser": true, "text": "what country is their destination of the first three?"}, {"isUser": false, "query": "SELECT T1.Airline, T2.DestAirport FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline HAVING count ( * )   <  200 limit 3", "predict": "SELECT airlines.Country\nFROM airlines\nWHERE airlines.uid IN (\n    SELECT flights.Airline\n    FROM flights\n    GROUP BY flights.Airline\n    HAVING COUNT(*) < 200\n    LIMIT 3\n);"}]},
{"db_name": "poker_player", "turns": [{"isUser": true, "text": "Hello!  Which nationalities are shared by more than one person?"}, {"isUser": false, "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT ( * )   >  1", "predict": "SELECT Nationality\nFROM people\nGROUP BY Nationality\nHAVING COUNT(*) > 1;"}, {"isUser": true, "text": "Okay.  Thanks for that!  Can you show me all of the people IDs that have Russia as the nationality?"}, {"isUser": false, "query": "SELECT People_ID FROM people WHERE Nationality  =  'Russia'", "predict": "SELECT People_ID\nFROM people\nWHERE Nationality = 'Russia';"}, {"isUser": true, "text": "Excellent!  Can you  update this list to show the names of all of the associated individuals?"}, {"isUser": false, "query": "SELECT People_ID, name FROM people WHERE Nationality  =  'Russia'", "predict": "SELECT People_ID, Name\nFROM people\nWHERE Nationality = 'Russia';"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "What's the average age of all losers of all matches?"}, {"isUser": false, "query": "SELECT avg ( loser_age )  FROM matches", "predict": "SELECT AVG(loser_age) AS average_age_of_losers\nFROM matches;"}, {"isUser": true, "text": "What's the average age of all winners of all matches?"}, {"isUser": false, "query": "SELECT avg ( winner_age )  FROM matches", "predict": "SELECT AVG(winner_age) AS average_age_of_winners\nFROM matches;"}, {"isUser": true, "text": "What are the average minutes of all matches?"}, {"isUser": false, "query": "SELECT avg ( minutes )  FROM matches", "predict": "SELECT AVG(minutes) AS average_minutes_of_matches\nFROM matches;"}, {"isUser": true, "text": "What was the longest match in minutes?"}, {"isUser": false, "query": "SELECT max ( minutes )  FROM matches", "predict": "SELECT MAX(minutes) AS longest_match_minutes\nFROM matches;"}, {"isUser": true, "text": "What was the shortest match in minutes?"}, {"isUser": false, "query": "SELECT min ( minutes )  FROM matches", "predict": "SELECT MIN(minutes) AS shortest_match_minutes\nFROM matches;"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "how many flights are landing in the city of aberdeen or abilene"}, {"isUser": false, "query": "SELECT count ( * )  FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport   =   T2.AirportCode WHERE T2.city  like  \"%Aberdeen%\" OR T2.city  like  \"%Abilene%\"", "predict": "SELECT COUNT(*) \nFROM flights \nWHERE DestAirport IN ('Aberdeen', 'Abilene');"}]},
{"db_name": "museum_visit", "turns": [{"isUser": true, "text": "what are the name of the museums?"}, {"isUser": false, "query": "SELECT name from museum", "predict": "SELECT Name FROM museum;"}]},
{"db_name": "tvshow", "turns": [{"isUser": true, "text": "Which titles were directed by Ben Jones or Brandon Vietti?"}, {"isUser": false, "query": "SELECT Title FROM Cartoon WHERE Directed_by  =  \"Ben Jones\" OR Directed_by  =  \"Brandon Vietti\"", "predict": "SELECT Title\nFROM Cartoon\nWHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';"}, {"isUser": true, "text": "What are their original air dates?"}, {"isUser": false, "query": "SELECT Title, original_air_date FROM Cartoon WHERE Directed_by  =  \"Ben Jones\" OR Directed_by  =  \"Brandon Vietti\"", "predict": "SELECT Title, Original_air_date\nFROM Cartoon\nWHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';"}, {"isUser": true, "text": "Who are the writers of these cartoons?"}, {"isUser": false, "query": "SELECT Title, written_by FROM Cartoon WHERE Directed_by  =  \"Ben Jones\" OR Directed_by  =  \"Brandon Vietti\"", "predict": "SELECT Title, Written_by\nFROM Cartoon\nWHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "Can I get all the documents with 'w' in them | Do you want documents with 'w' in the name or description? | Description pls"}, {"isUser": false, "query": "SELECT * from Documents WHERE Document_Description LIKE \"%w%\"", "predict": "SELECT *\nFROM Documents\nWHERE Document_Description LIKE '%w%';"}, {"isUser": true, "text": "Ok can I get just their names"}, {"isUser": false, "query": "SELECT document_name from Documents WHERE Document_Description LIKE \"%w%\"", "predict": "SELECT Document_Name\nFROM Documents\nWHERE Document_Description LIKE '%w%';"}, {"isUser": true, "text": "I need the template ids too oops"}, {"isUser": false, "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "predict": "SELECT Document_Name, Template_ID\nFROM Documents\nWHERE Document_Description LIKE '%w%';"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "What is the average age of the losers from all matches?"}, {"isUser": false, "query": "SELECT avg ( loser_age )   FROM matches", "predict": "SELECT AVG(loser_age) AS average_loser_age\nFROM matches;"}, {"isUser": true, "text": "What about the average age of the winners from all matches?"}, {"isUser": false, "query": "SELECT avg ( winner_age )   FROM matches", "predict": "SELECT AVG(winner_age) AS average_winner_age\nFROM matches;"}, {"isUser": true, "text": "How many winners are left handed?"}, {"isUser": false, "query": "SELECT count ( * )  from matches where winner_hand  =  \"L\"", "predict": "SELECT COUNT(*) AS left_handed_winners\nFROM matches\nWHERE winner_hand = 'L';"}, {"isUser": true, "text": "What are the names of the winner and loser from the longest match?"}, {"isUser": false, "query": "SELECT winner_name, loser_name from matches where minutes  =   ( select max ( minutes )  from matches ) ", "predict": "SELECT winner_name, loser_name\nFROM matches\nORDER BY minutes DESC\nLIMIT 1;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "Show me all the dogs | do you want to show all the attributes of the dogs? | just show me the names of the dogs"}, {"isUser": false, "query": "SELECT name FROM Dogs", "predict": "SELECT name\nFROM Dogs;"}, {"isUser": true, "text": "Nice! Tell me which of these dogs are the rarest breed"}, {"isUser": false, "query": "SELECT name FROM Dogs WHERE breed_code   =    (  SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * )  ASC LIMIT 1  ) ", "predict": "SELECT d.name\nFROM Dogs d\nJOIN Breeds b ON d.breed_code = b.breed_code\nWHERE b.breed_name = 'rarest breed';"}, {"isUser": true, "text": "What are the genders of these dogs?"}, {"isUser": false, "query": "SELECT name, gender FROM Dogs WHERE breed_code   =    (  SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * )  ASC LIMIT 1  ) ", "predict": "SELECT name, gender\nFROM Dogs;"}, {"isUser": true, "text": "Ok sure. Tell me who treated these dogs | Sorry, could you specify your question, There are all attributes of the dog treatments, which one do you want to show? | Alright! just show me the treatment dates of these dogs"}, {"isUser": false, "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id   =   T2.dog_id WHERE T1.breed_code   =    (  SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * )  ASC LIMIT 1  ) ", "predict": "SELECT d.name, p.first_name, p.last_name\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id\nJOIN Professionals p ON t.professional_id = p.professional_id;"}]},
{"db_name": "pets_1", "turns": [{"isUser": true, "text": "How many students have a cat pet?"}, {"isUser": false, "query": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "predict": "SELECT COUNT(DISTINCT StuID)\nFROM Has_Pet\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'cat';"}, {"isUser": true, "text": "And what about students that don't have a cat pet?"}, {"isUser": false, "query": "select count ( * )  from  ( SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' ) ", "predict": "SELECT COUNT(DISTINCT StuID)\nFROM Student\nWHERE StuID NOT IN (\n    SELECT StuID\n    FROM Has_Pet\n    JOIN Pets ON Has_Pet.PetID = Pets.PetID\n    WHERE Pets.PetType = 'cat'\n);"}, {"isUser": true, "text": "And what are their ids?"}, {"isUser": false, "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat'", "predict": "SELECT DISTINCT StuID\nFROM Student\nWHERE StuID NOT IN (\n    SELECT StuID\n    FROM Has_Pet\n    JOIN Pets ON Has_Pet.PetID = Pets.PetID\n    WHERE Pets.PetType = 'cat'\n);"}]},
{"db_name": "museum_visit", "turns": [{"isUser": true, "text": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?"}, {"isUser": false, "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  >  2011", "predict": "SELECT DISTINCT v.Name\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nJOIN museum m ON vi.Museum_ID = m.Museum_ID\nWHERE m.Open_Year < 2009\nAND m.Open_Year > 2011;"}, {"isUser": true, "text": "What museum did he visit before 2009?"}, {"isUser": false, "query": "SELECT t3.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  <  2009 AND t1.name  =   ( SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  >  2011 ) ", "predict": "SELECT DISTINCT m.Name\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nJOIN museum m ON vi.Museum_ID = m.Museum_ID\nWHERE m.Open_Year < 2009;"}, {"isUser": true, "text": "What is Fernando Gago's membership level?"}, {"isUser": false, "query": "SELECT level_of_membership FROM visitor WHERE name  =  \"Fernando Gago\"", "predict": "SELECT Level_of_membership\nFROM visitor\nWHERE Name = 'Fernando Gago';"}, {"isUser": true, "text": "How old is Fernando Gago?"}, {"isUser": false, "query": "SELECT age FROM visitor WHERE name  =  \"Fernando Gago\"", "predict": "SELECT Age\nFROM visitor\nWHERE Name = 'Fernando Gago';"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "what is the source airport for United Airlines?"}, {"isUser": false, "query": "SELECT T1.SourceAirport FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid   =   T1.Airline WHERE T2.Airline   =   \"United Airlines\"", "predict": "SELECT SourceAirport\nFROM flights\nWHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines');"}, {"isUser": true, "text": "What are the flight numbers for United Airlines?"}, {"isUser": false, "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid   =   T1.Airline WHERE T2.Airline   =   \"United Airlines\"", "predict": "SELECT FlightNo\nFROM flights\nWHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines');"}, {"isUser": true, "text": "Where is flight 28 going to?"}, {"isUser": false, "query": "SELECT DestAirport FROM flights WHERE FlightNo  =  28", "predict": "SELECT DestAirport\nFROM flights\nWHERE FlightNo = 28;"}, {"isUser": true, "text": "What about flight 29?"}, {"isUser": false, "query": "SELECT DestAirport FROM flights WHERE FlightNo  =  29", "predict": "SELECT DestAirport\nFROM flights\nWHERE FlightNo = 29;"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "hi, what are the names of the players?"}, {"isUser": false, "query": "SELECT first_name,  last_name FROM players", "predict": "SELECT first_name, last_name\nFROM players;"}, {"isUser": true, "text": "* I have left the chat *"}, {"isUser": false, "query": "SELECT first_name ,  last_name FROM players WHERE hand   =   'L'", "predict": "SELECT first_name, REPLACE(last_name, '��', 'Ñ') as last_name\nFROM players;"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "How many United Airlines flights go to the city called Aberdeen?"}, {"isUser": false, "query": "SELECT count ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =   T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid   =   T1.Airline WHERE T2.City   =   \"Aberdeen\" AND T3.Airline   =   \"United Airlines\"", "predict": "SELECT COUNT(*) \nFROM flights \nWHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') \nAND DestAirport = 'Aberdeen';"}, {"isUser": true, "text": "What other cities does United Airlines go to?"}, {"isUser": false, "query": "SELECT T2.city FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =   T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid   =   T1.Airline where T2.city ! =   'Aberdeen' and T3.airline  =  \"United Airlines\"", "predict": "SELECT DISTINCT DestAirport \nFROM flights \nWHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines');"}]},
{"db_name": "course_teach", "turns": [{"isUser": true, "text": "Show the name of the teacher for the math course please?"}, {"isUser": false, "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID WHERE T2.Course   =   \"Math\"", "predict": "SELECT t.Name\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID\nWHERE c.Course = 'Math';"}, {"isUser": true, "text": "What grades do they teach? | The   grades  of courses that the teachers for the math teach are 1 and 3 | What dates do those courses start?"}, {"isUser": false, "query": "SELECT T2.Staring_Date  FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID where T2.Course  =  \"Math\"", "predict": "SELECT DISTINCT ca.Grade, c.Staring_Date\nFROM course_arrange ca\nJOIN course c ON ca.Course_ID = c.Course_ID\nJOIN teacher t ON ca.Teacher_ID = t.Teacher_ID\nWHERE c.Course = 'Math';"}]},
{"db_name": "poker_player", "turns": [{"isUser": true, "text": "What is the birth date of the poker player with the lowest earnings?"}, {"isUser": false, "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "predict": "SELECT p.Birth_Date\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player);"}, {"isUser": true, "text": "What is the name of the poker player with the lowest earnings?"}, {"isUser": false, "query": "SELECT name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "predict": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player);"}, {"isUser": true, "text": "What is the nationality of the poker player with the lowest earnings?"}, {"isUser": false, "query": "SELECT Nationality FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "predict": "SELECT p.Nationality\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player);"}]},
{"db_name": "poker_player", "turns": [{"isUser": true, "text": "how many poker players are on the table"}, {"isUser": false, "query": "SELECT count ( * )  FROM poker_player", "predict": "SELECT COUNT(*) AS Total_Poker_Players\nFROM poker_player;"}, {"isUser": true, "text": "how many have height higher than 200"}, {"isUser": false, "query": "SELECT count ( * )  FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T1.Height  >  200", "predict": "SELECT COUNT(*)\nFROM people\nWHERE Height > 200;"}, {"isUser": true, "text": "what is the average earnings of poker players with height higher than 200"}, {"isUser": false, "query": "SELECT avg ( T2.Earnings )  FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T1.Height  >  200", "predict": "SELECT AVG(p.Earnings) AS Average_Earnings\nFROM poker_player p\nJOIN people pe ON p.People_ID = pe.People_ID\nWHERE pe.Height > 200;"}]},
{"db_name": "pets_1", "turns": [{"isUser": true, "text": "Can you show me a list of all of the students IDs for students who have dogs as their pet type?"}, {"isUser": false, "query": "SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "predict": "SELECT DISTINCT Student.StuID\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'dog';"}, {"isUser": true, "text": "Which of those two students have a cat as their pet in addition also having a dog?"}, {"isUser": false, "query": "SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' intersect SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "predict": "SELECT Student.StuID\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'dog' AND Student.StuID IN (\n    SELECT Student.StuID\n    FROM Student\n    JOIN Has_Pet ON Student.StuID = Has_Pet.StuID\n    JOIN Pets ON Has_Pet.PetID = Pets.PetID\n    WHERE Pets.PetType = 'cat'\n);"}, {"isUser": true, "text": "Thanks! Can you please list the first name and ages of the two students who have dogs as pets?"}, {"isUser": false, "query": "SELECT T1.Fname, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "predict": "SELECT Student.Fname, Student.Age\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'dog';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "how many country there"}, {"isUser": false, "query": "SELECT count ( * )  from country", "predict": "SELECT COUNT(*) FROM country;"}, {"isUser": true, "text": "what is the Country Code of Herat | Do you mean the country code of city Herat? | yes sir"}, {"isUser": false, "query": "SELECT countrycode  from city where name  =  \"Herat\"", "predict": "SELECT CountryCode FROM city WHERE Name = 'Herat';"}, {"isUser": true, "text": "what is the Population of Qandahar"}, {"isUser": false, "query": "SELECT population  from city where name  =  \"Qandahar\"", "predict": "SELECT Population FROM city WHERE Name = 'Qandahar';"}]},
{"db_name": "tvshow", "turns": [{"isUser": true, "text": "find id of the tv channels that are from countries with more than two tv channels"}, {"isUser": false, "query": "select id from tv_channel where country in  ( SELECT country FROM tv_channel GROUP BY country HAVING count ( * )   >  2 ) ", "predict": "SELECT id\nFROM TV_Channel\nWHERE Country IN (\n    SELECT Country\n    FROM TV_Channel\n    GROUP BY Country\n    HAVING COUNT(id) > 2\n)"}, {"isUser": true, "text": "What is the package option for that channel?"}, {"isUser": false, "query": "select package_option from tv_channel where country in  ( SELECT country FROM tv_channel GROUP BY country HAVING count ( * )   >  2 ) ", "predict": "SELECT id, Package_Option\nFROM TV_Channel\nWHERE Country IN (\n    SELECT Country\n    FROM TV_Channel\n    GROUP BY Country\n    HAVING COUNT(id) > 2\n)"}, {"isUser": true, "text": "List all series names in alphabetical order"}, {"isUser": false, "query": "SELECT series_name FROM tv_channel order by series_name asc", "predict": "SELECT series_name\nFROM TV_Channel\nORDER BY series_name ASC"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "Hello, how many dogs have gone through treatments?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "predict": "SELECT COUNT(DISTINCT dog_id) AS total_dogs_treated\nFROM Treatments;"}, {"isUser": true, "text": "What is the age of the youngest dog to go through treatment?"}, {"isUser": false, "query": "SELECT min ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "predict": "SELECT MIN(age) AS youngest_dog_age_treated\nFROM Dogs\nWHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments);"}, {"isUser": true, "text": "What about the oldest?"}, {"isUser": false, "query": "SELECT max ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "predict": "SELECT MAX(age) AS oldest_dog_age_treated\nFROM Dogs\nWHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments);"}, {"isUser": true, "text": "How about the average age?"}, {"isUser": false, "query": "SELECT avg ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "predict": "SELECT AVG(age) AS average_dog_age_treated\nFROM Dogs\nWHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments);"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "LIST THE NATIONS WHICH DO NOT USE ENGLISH"}, {"isUser": false, "query": "SELECT Name FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" ) ", "predict": "SELECT Name\nFROM country\nWHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');"}, {"isUser": true, "text": "WHAT IS THE POPULATION OF THE PEOPLE LIVING IN THE NATIONS NOT USING ENGLISH | did you mean you want the Population of the country  DO NOT USE ENGLISH | YES, THE TOTAL NUMBER OF PEOPLE LIVING IN THE NATIONS THAT DO NOT USE ENGLISH"}, {"isUser": false, "query": "SELECT Name,sum ( Population )  FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" )  group by Name", "predict": "SELECT SUM(Population)\nFROM country\nWHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "What is the weight of make id 1? | Did you mean to ask for the weight of the car with make id 1? | Yes"}, {"isUser": false, "query": "SELECT T2.Weight FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id WHERE T1.MakeID  =  1", "predict": "SELECT Weight \nFROM cars_data \nWHERE Id = 1;"}, {"isUser": true, "text": "Which year launch the car model  buick? | Did you want to ask for the year on which the car model buick was launched? | Yes"}, {"isUser": false, "query": "SELECT T2.Year FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id WHERE T1.Model  =  \"buick\"", "predict": "SELECT c.Year\nFROM cars_data c\nJOIN model_list m ON c.Id = m.ModelId\nWHERE m.Model = 'buick';"}, {"isUser": true, "text": "Find the horsepower of model plymouth."}, {"isUser": false, "query": "SELECT T2.Horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id WHERE T1.Model  =  \"plymouth\"", "predict": "SELECT c.Horsepower\nFROM cars_data c\nJOIN model_list m ON c.Id = m.ModelId\nWHERE m.Model = 'plymouth';"}, {"isUser": true, "text": "For the cars with 4 cylinders, which model has the largest horspower?"}, {"isUser": false, "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "predict": "SELECT m.Model\nFROM cars_data c\nJOIN model_list m ON c.Id = m.ModelId\nWHERE c.Cylinders = 4\nORDER BY c.Horsepower DESC\nLIMIT 1;"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "How many different cars on this list were produced in 1974?"}, {"isUser": false, "query": "select count ( * )  from cars_data where year = '1974'", "predict": "SELECT COUNT(DISTINCT Model)\nFROM model_list\nWHERE ModelId IN (SELECT ModelId FROM cars_data WHERE Year = 1974);"}, {"isUser": true, "text": "Can you list just the car IDs produced in 1974 with 8 cylinders?"}, {"isUser": false, "query": "select id  from cars_data where year = '1974' and Cylinders  =  '8'", "predict": "SELECT Id\nFROM cars_data\nWHERE Year = 1974 AND Cylinders = 8;"}]},
{"db_name": "employee_hire_evaluation", "turns": [{"isUser": true, "text": "I'd like to see Shop names."}, {"isUser": false, "query": "select name from shop", "predict": "SELECT Name\nFROM shop;"}, {"isUser": true, "text": "Which of these are hiring?"}, {"isUser": false, "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t1.shop_id", "predict": "SELECT DISTINCT s.Name\nFROM shop s\nJOIN hiring h ON s.Shop_ID = h.Shop_ID;"}, {"isUser": true, "text": "Which shop is hiring the highest number of employees? | do you want the name of the shop ? | Yes"}, {"isUser": false, "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t1.shop_id ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT s.Name\nFROM shop s\nJOIN (\n    SELECT Shop_ID, COUNT(Employee_ID) AS num_employees\n    FROM hiring\n    GROUP BY Shop_ID\n    ORDER BY num_employees DESC\n    LIMIT 1\n) AS h ON s.Shop_ID = h.Shop_ID;"}]},
{"db_name": "singer", "turns": [{"isUser": true, "text": "how many singers are on the table?"}, {"isUser": false, "query": "select count ( distinct Singer_ID )  from Singer", "predict": "SELECT COUNT(*) \nFROM singer;"}, {"isUser": true, "text": "how many singers have songs with sales more than 300000?"}, {"isUser": false, "query": "SELECT count ( DISTINCT T1.Name )  FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales > 300000", "predict": "SELECT COUNT(DISTINCT Singer_ID)\nFROM song\nWHERE Sales > 300000;"}, {"isUser": true, "text": "show distinct names of singers that have songs with sales more than 300000"}, {"isUser": false, "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales > 300000", "predict": "SELECT DISTINCT s.Name\nFROM singer s\nJOIN song so ON s.Singer_ID = so.Singer_ID\nWHERE so.Sales > 300000;"}]},
{"db_name": "voter_1", "turns": [{"isUser": true, "text": "who all are the contest | Did you mean  to ask for the names of all contestants? | yes."}, {"isUser": false, "query": "SELECT contestant_name FROM CONTESTANTS", "predict": "SELECT contestant_name\nFROM CONTESTANTS;"}, {"isUser": true, "text": "can you send the total contestant number?"}, {"isUser": false, "query": "SELECT COUNT ( contestant_name )  FROM CONTESTANTS", "predict": "SELECT COUNT(contestant_number) AS total_contestants\nFROM CONTESTANTS;"}, {"isUser": true, "text": "who is the first contestant? | Did you mean to ask for the name of the contestant with contestant number 1? | yes can tell me?"}, {"isUser": false, "query": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_number  =  1", "predict": "SELECT contestant_name\nFROM CONTESTANTS\nWHERE contestant_number = 1;"}, {"isUser": true, "text": "who is the 2 contestant?"}, {"isUser": false, "query": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_number  =  2", "predict": "SELECT contestant_name\nFROM CONTESTANTS\nWHERE contestant_number = 2;"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "hi, list out all airport name"}, {"isUser": false, "query": "SELECT airportname FROM airports", "predict": "SELECT AirportName\nFROM airports;"}, {"isUser": true, "text": "show me the total no of flight number"}, {"isUser": false, "query": "SELECT COUNT ( DISTINCT Flightno )  FROM flights", "predict": "SELECT COUNT(FlightNo)\nFROM flights;"}, {"isUser": true, "text": "how many country name are there"}, {"isUser": false, "query": "SELECT COUNT ( DISTINCT country )  FROM airports", "predict": "SELECT COUNT(DISTINCT Country)\nFROM airports;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "How many dog breeds are there?"}, {"isUser": false, "query": "SELECT count ( * )  from Breeds", "predict": "SELECT COUNT(*) AS total_breeds\nFROM Breeds;"}, {"isUser": true, "text": "What is the biggest of those dog breeds?"}, {"isUser": false, "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT breed_name\nFROM Breeds\nORDER BY breed_name DESC\nLIMIT 1;"}, {"isUser": true, "text": "How big is the bulldog?"}, {"isUser": false, "query": "SELECT T2.size_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code where T1.breed_name = \"Bulldog\"", "predict": "SELECT size_description\nFROM Sizes\nWHERE size_code = (SELECT size_code FROM Breeds WHERE breed_name = 'Bulldog');"}, {"isUser": true, "text": "What is the name of the breed with the most dogs?"}, {"isUser": false, "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT breed_name\nFROM Breeds\nWHERE breed_code = (\n    SELECT breed_code\n    FROM Dogs\n    GROUP BY breed_code\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);"}]},
{"db_name": "orchestra", "turns": [{"isUser": true, "text": "List the name of the conductor with the most years of work."}, {"isUser": false, "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "predict": "SELECT Name\nFROM conductor\nORDER BY Year_of_Work DESC\nLIMIT 1;"}, {"isUser": true, "text": "How many years did Robert Craft work?"}, {"isUser": false, "query": "SELECT Year_of_Work FROM conductor where name = 'Robert Craft'", "predict": "SELECT Year_of_Work\nFROM conductor\nWHERE Name = 'Robert Craft';"}, {"isUser": true, "text": "List the name of the conductor with the least years of work"}, {"isUser": false, "query": "SELECT Name FROM conductor ORDER BY Year_of_Work asc LIMIT 1", "predict": "SELECT Name\nFROM conductor\nORDER BY Year_of_Work\nLIMIT 1;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "which professional has done  the most treatments?"}, {"isUser": false, "query": "SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id order by COUNT ( * )   desc limit 1", "predict": "SELECT p.first_name, p.last_name, COUNT(t.professional_id) AS num_treatments\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id\nORDER BY num_treatments DESC\nLIMIT 1;"}, {"isUser": true, "text": "what about the least treatments?"}, {"isUser": false, "query": "SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id order by COUNT ( * )   limit 1", "predict": "SELECT p.first_name, p.last_name, COUNT(t.professional_id) AS num_treatments\nFROM Professionals p\nLEFT JOIN Treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id\nORDER BY num_treatments\nLIMIT 1;"}, {"isUser": true, "text": "How many professionals have at most 3 treatments?"}, {"isUser": false, "query": "select count ( * )  from  ( SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 group by T2.professional_id having count ( * )  < =  3 ) ", "predict": "SELECT COUNT(*)\nFROM (\n    SELECT p.professional_id, COUNT(t.professional_id) AS num_treatments\n    FROM Professionals p\n    LEFT JOIN Treatments t ON p.professional_id = t.professional_id\n    GROUP BY p.professional_id\n    HAVING num_treatments <= 3\n) AS subquery;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "The given codes of country is not speak in English please tell | Did you mean the codes of countries that do not speak English? | Thanks! Which countries do not speak English please tell country names"}, {"isUser": false, "query": "select name from country where code not in  ( SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ", "predict": "SELECT Name\nFROM country\nWHERE Code NOT IN (\n    SELECT CountryCode\n    FROM countrylanguage\n    WHERE Language = 'English'\n    AND IsOfficial = 'T'\n);"}, {"isUser": true, "text": "Thanks! Whose government forms Republic | Did you want the names of countries that do not speak English and whose government forms are not Republic? | Thanks! yes"}, {"isUser": false, "query": "select name from country where code in  ( SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ", "predict": "SELECT Name\nFROM country\nWHERE Code NOT IN (\n    SELECT CountryCode\n    FROM countrylanguage\n    WHERE Language = 'English'\n    AND IsOfficial = 'T'\n)\nAND GovernmentForm != 'Republic';"}]},
{"db_name": "voter_1", "turns": [{"isUser": true, "text": "Can you tell me what the total number of votes are for the states of \"NY\" and \"CA\"?"}, {"isUser": false, "query": "SELECT count ( * )  FROM votes WHERE state   =   'NY' or  state   =   'CA'", "predict": "SELECT state, COUNT(*) AS total_votes\nFROM VOTES\nWHERE state IN ('NY', 'CA')\nGROUP BY state;"}, {"isUser": true, "text": "Thank you!  Can you provide me with a list of all of the different contestant numbers?"}, {"isUser": false, "query": "SELECT distinct contestant_number FROM votes", "predict": "SELECT DISTINCT contestant_number\nFROM VOTES;"}, {"isUser": true, "text": "Okay.  How many vote IDs correspond to contestant number 5?"}, {"isUser": false, "query": "SELECT count ( * )  from votes where contestant_number  =  '5'", "predict": "SELECT COUNT(vote_id) AS total_votes\nFROM VOTES\nWHERE contestant_number = 5;"}]},
{"db_name": "poker_player", "turns": [{"isUser": true, "text": "List all the nationalities in the table with no duplicate records"}, {"isUser": false, "query": "SELECT distinct Nationality FROM people", "predict": "SELECT DISTINCT Nationality\nFROM people;"}, {"isUser": true, "text": "List all the nationalities in the table"}, {"isUser": false, "query": "SELECT Nationality FROM people", "predict": "SELECT Nationality\nFROM people;"}, {"isUser": true, "text": "Count the number of records where nationality is Russia"}, {"isUser": false, "query": "SELECT count ( * )  FROM people where Nationality  =  'Russia'", "predict": "SELECT COUNT(*)\nFROM people\nWHERE Nationality = 'Russia';"}, {"isUser": true, "text": "Count the number of records where nationality is Bulgaria"}, {"isUser": false, "query": "SELECT count ( * )  FROM people where Nationality  =  'Bulgaria'", "predict": "SELECT COUNT(*)\nFROM people\nWHERE Nationality = 'Bulgaria';"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "list the makers who designed more than 3 car models"}, {"isUser": false, "query": "SELECT * FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id HAVING count ( * )   >  3", "predict": "SELECT Maker\nFROM car_makers\nGROUP BY Maker\nHAVING COUNT(DISTINCT Id) > 3;"}, {"isUser": true, "text": "what is the id of these makers"}, {"isUser": false, "query": "SELECT T1.id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id HAVING count ( * )   >  3", "predict": "SELECT Id\nFROM car_makers\nWHERE Maker IN (\n    SELECT Maker\n    FROM car_makers\n    GROUP BY Maker\n    HAVING COUNT(DISTINCT Id) > 3\n);"}, {"isUser": true, "text": "make a list so that the full name and id of the makers who designed more than 3 car models appear in the same table"}, {"isUser": false, "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id HAVING count ( * )   >  3", "predict": "SELECT Id, FullName\nFROM car_makers\nWHERE Maker IN (\n    SELECT Maker\n    FROM car_makers\n    GROUP BY Maker\n    HAVING COUNT(DISTINCT Id) > 3\n);"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "What is the average horsepower?"}, {"isUser": false, "query": "SELECT avg ( Horsepower )  FROM cars_data", "predict": "SELECT AVG(Horsepower) AS AverageHorsepower FROM cars_data;"}, {"isUser": true, "text": "Which car has the largest horsepower?"}, {"isUser": false, "query": "SELECT Id FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1", "predict": "SELECT * \nFROM cars_data \nWHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data);"}, {"isUser": true, "text": "What is the accelerate of car 39?"}, {"isUser": false, "query": "SELECT accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1", "predict": "SELECT Accelerate \nFROM cars_data \nWHERE Id = 39;"}, {"isUser": true, "text": "Which cars have an accelerate larger than 19.0?"}, {"isUser": false, "query": "SELECT COUNT ( * )  FROM CARS_DATA WHERE Accelerate  >  19.0", "predict": "SELECT * \nFROM cars_data \nWHERE Accelerate > 19.0;"}]},
{"db_name": "concert_singer", "turns": [{"isUser": true, "text": "When was the Auditions concert?"}, {"isUser": false, "query": "SELECT year from concert where concert_name  =  \"Auditions\"", "predict": "SELECT Year\nFROM concert\nWHERE concert_Name = 'Auditions';"}, {"isUser": true, "text": "When was the Super bootcamp concert?"}, {"isUser": false, "query": "SELECT year from concert where concert_name  =  \"Super bootcamp\"", "predict": "SELECT Year\nFROM concert\nWHERE concert_Name = 'Super bootcamp';"}, {"isUser": true, "text": "When was the Home Visits concert?"}, {"isUser": false, "query": "SELECT year from concert where concert_name  =  \"Home Visits\"", "predict": "SELECT Year\nFROM concert\nWHERE concert_Name = 'Home Visits';"}, {"isUser": true, "text": "How many concerts were there total in 2014 or 2015?"}, {"isUser": false, "query": "SELECT count ( * )  FROM concert WHERE YEAR   =   2014 OR YEAR   =   2015", "predict": "SELECT COUNT(*)\nFROM concert\nWHERE Year IN ('2014', '2015');"}, {"isUser": true, "text": "And how many concerts were there just in 2014?"}, {"isUser": false, "query": "SELECT count ( * )  FROM concert WHERE YEAR   =   2014", "predict": "SELECT COUNT(*)\nFROM concert\nWHERE Year = '2014';"}, {"isUser": true, "text": "And how many were there in 2015?"}, {"isUser": false, "query": "SELECT count ( * )  FROM concert WHERE YEAR   =   2015", "predict": "SELECT COUNT(*)\nFROM concert\nWHERE Year = '2015';"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "what are the names of the tourneys?"}, {"isUser": false, "query": "SELECT distinct tourney_name FROM matches", "predict": "SELECT DISTINCT tourney_name\nFROM matches;"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "How many graduates of the school are there?"}, {"isUser": false, "query": "SELECT count ( * )   from students", "predict": "SELECT COUNT(student_id) \nFROM Students \nWHERE student_id IN (\n    SELECT student_id \n    FROM Student_Enrolment \n    WHERE degree_program_id IN (\n        SELECT degree_program_id \n        FROM Degree_Programs\n    )\n);"}, {"isUser": true, "text": "Ok. Who graduated the earliest? | What attributes of this student who graduated the earliest would you like to know? | Please tell me the first name, middle name, and last name."}, {"isUser": false, "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "predict": "SELECT first_name, middle_name, last_name\nFROM Students\nWHERE student_id IN (\n    SELECT student_id\n    FROM Student_Enrolment\n    WHERE degree_program_id IN (\n        SELECT degree_program_id\n        FROM Degree_Programs\n    )\n    ORDER BY date_left\n    LIMIT 1\n);"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "Can you show the SourceAirport FlightNo 28?"}, {"isUser": false, "query": "SELECT SourceAirport FROM Flights WHERE FlightNo = '28'", "predict": "SELECT SourceAirport\nFROM flights\nWHERE FlightNo = 28;"}, {"isUser": true, "text": "Can you show the City of Airportcode APG?"}, {"isUser": false, "query": "select city from airports where airportcode = 'APG'", "predict": "SELECT City\nFROM airports\nWHERE AirportCode = 'APG';"}, {"isUser": true, "text": "Can Show the names of airports which do not have any flight in and out?"}, {"isUser": false, "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN  ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights ) ", "predict": "SELECT AirportName\nFROM airports\nWHERE AirportCode NOT IN (SELECT SourceAirport FROM flights)\nAND AirportCode NOT IN (SELECT DestAirport FROM flights);"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "when is the first transcript released?"}, {"isUser": false, "query": "SELECT * FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "predict": "SELECT MIN(transcript_date) AS first_transcript_release_date\nFROM Transcripts;"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "Find the names of the 3 youngest winners across all matches"}, {"isUser": false, "query": "SELECT DISTINCT winner_name  FROM matches ORDER BY winner_age LIMIT 3", "predict": "SELECT winner_name\nFROM matches\nORDER BY winner_age\nLIMIT 3;"}, {"isUser": true, "text": "What are points of the 3 youngest winners?"}, {"isUser": false, "query": "SELECT loser_rank_points FROM matches ORDER BY winner_age LIMIT 3", "predict": "SELECT winner_name, winner_rank_points\nFROM matches\nORDER BY winner_age\nLIMIT 3;"}, {"isUser": true, "text": "Give me the age of the 3 youngest winners across all matches"}, {"isUser": false, "query": "SELECT winner_age FROM matches ORDER BY winner_age LIMIT 3", "predict": "SELECT winner_age\nFROM matches\nORDER BY winner_age\nLIMIT 3;"}]},
{"db_name": "network_1", "turns": [{"isUser": true, "text": "How many friends in this table?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Friend", "predict": "SELECT COUNT(*) \nFROM Friend;"}, {"isUser": true, "text": "Find average grade of the students? | Do you want me to find the average grade of entries in the Highschooler table? | Yes?"}, {"isUser": false, "query": "SELECT avg ( grade )  FROM Highschooler", "predict": "SELECT AVG(grade) \nFROM Highschooler;"}, {"isUser": true, "text": "Show names of all high school students?"}, {"isUser": false, "query": "SELECT DISTINCT name  FROM Highschooler", "predict": "SELECT name \nFROM Highschooler;"}]},
{"db_name": "poker_player", "turns": [{"isUser": true, "text": "How many poker players are there ?"}, {"isUser": false, "query": "select count ( * )  from poker_player", "predict": "SELECT COUNT(*) AS Total_Poker_Players\nFROM poker_player;"}, {"isUser": true, "text": "How many of them earning more than 300000"}, {"isUser": false, "query": "SELECT count ( * )  FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T2.Earnings  >  300000", "predict": "SELECT COUNT(*)\nFROM poker_player\nWHERE Earnings > 300000;"}, {"isUser": true, "text": "May i get the name detail of both players"}, {"isUser": false, "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T2.Earnings  >  300000", "predict": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE pp.Earnings > 300000;"}]},
{"db_name": "museum_visit", "turns": [{"isUser": true, "text": "How many museums do you have?"}, {"isUser": false, "query": "SELECT count ( * )  from museum", "predict": "SELECT COUNT(*) AS Number_of_Museums\nFROM museum;"}, {"isUser": true, "text": "What is the number of staff members in each museum?"}, {"isUser": false, "query": "SELECT Num_of_Staff from museum", "predict": "SELECT Museum_ID, Num_of_Staff\nFROM museum;"}, {"isUser": true, "text": "Can you tell me the id and the name of the museum, which has the most staff members?"}, {"isUser": false, "query": "SELECT Museum_ID, Name from museum order by Num_of_Staff desc limit 1", "predict": "SELECT Museum_ID, Name\nFROM museum\nWHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum);"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "Hello!  Can you tell me how many students in total there are on this list?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Students", "predict": "SELECT COUNT(student_id) AS total_students\nFROM Students;"}, {"isUser": true, "text": "Excellent!  Can you show me a list of all 15 students and list their first names, middle names, and last names?"}, {"isUser": false, "query": "SELECT first_name,middle_name,last_name  FROM Students", "predict": "SELECT first_name, middle_name, last_name\nFROM Students\nLIMIT 15;"}, {"isUser": true, "text": "Thanks!  Can you update this list to include the \"date first registered\" information associated with each student?"}, {"isUser": false, "query": "SELECT date_first_registered  FROM Students", "predict": "SELECT first_name, middle_name, last_name, date_first_registered\nFROM Students\nLIMIT 15;"}]},
{"db_name": "pets_1", "turns": [{"isUser": true, "text": "How many students are there?"}, {"isUser": false, "query": "SELECT count ( StuID )  FROM student", "predict": "SELECT COUNT(*) AS total_students\nFROM Student;"}, {"isUser": true, "text": "How old is the student whose last name is 'Smith’?"}, {"isUser": false, "query": "SELECT Age  FROM student where LName = 'Smith'", "predict": "SELECT Age\nFROM Student\nWHERE LName = 'Smith';"}, {"isUser": true, "text": "Can you plsease include their pets' id too?"}, {"isUser": false, "query": "SELECT T2.petid ,age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid WHERE T1.Lname   =   'Smith'", "predict": "SELECT S.Age, P.PetID\nFROM Student AS S\nJOIN Has_Pet AS HP ON S.StuID = HP.StuID\nJOIN Pets AS P ON HP.PetID = P.PetID\nWHERE S.LName = 'Smith';"}]},
{"db_name": "pets_1", "turns": [{"isUser": true, "text": "Hello!  Can you show me a list of all of the student IDs for students who have pets?"}, {"isUser": false, "query": "SELECT distinct T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid", "predict": "SELECT StuID\nFROM Has_Pet;"}, {"isUser": true, "text": "Great!  Can you show me the name (first and last), major and age of those two students?"}, {"isUser": false, "query": "SELECT distinct T1.Fname, T1.Lname, T1.major, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid", "predict": "SELECT Fname, LName, Major, Age\nFROM Student\nWHERE StuID IN (SELECT StuID FROM Has_Pet);"}, {"isUser": true, "text": "Great!  Now can you filter this list to show me which student(s) have a pet other than a cat?"}, {"isUser": false, "query": "SELECT Fname, Lname, major, age FROM student WHERE stuid NOT IN  ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' ) ", "predict": "SELECT Fname, LName, Major, Age\nFROM Student\nWHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType <> 'cat'));"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "how many dogs on the table"}, {"isUser": false, "query": "SELECT count ( * )  FROM Dogs", "predict": "SELECT COUNT(*) AS total_dogs\nFROM Dogs;"}, {"isUser": true, "text": "what is the age of Kacey"}, {"isUser": false, "query": "SELECT age FROM Dogs where name  =  \"Kacey\"", "predict": "SELECT age\nFROM Dogs\nWHERE name = 'Kacey';"}, {"isUser": true, "text": "which dog is highest weight on table | Do you want the name of the dog with the highest weight? | exactly"}, {"isUser": false, "query": "SELECT name FROM Dogs order by weight desc limit 1", "predict": "SELECT name\nFROM Dogs\nORDER BY CAST(weight AS INTEGER) DESC\nLIMIT 1;"}, {"isUser": true, "text": "what is the size code of BUL | Did you mean the  size codes of dogs with a breed code BUL? | exactly"}, {"isUser": false, "query": "SELECT size_code FROM Dogs where breed_code  =  \"BUL\"", "predict": "SELECT size_code\nFROM Dogs\nWHERE breed_code = 'BUL';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What are the names of the nations with the 3 lowest populations?"}, {"isUser": false, "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "predict": "SELECT Name\nFROM country\nORDER BY Population\nLIMIT 3;"}, {"isUser": true, "text": "Which nation has the largest surface area?"}, {"isUser": false, "query": "SELECT Name FROM country ORDER BY surfacearea desc LIMIT 1", "predict": "SELECT Name\nFROM country\nORDER BY SurfaceArea DESC\nLIMIT 1;"}, {"isUser": true, "text": "What is the total population of Antarctica?"}, {"isUser": false, "query": "SELECT population from country where name  =  \"Antarctica\"", "predict": "SELECT SUM(Population)\nFROM country\nWHERE Name = 'Antarctica';"}]},
{"db_name": "network_1", "turns": [{"isUser": true, "text": "what is the average of friend id?"}, {"isUser": false, "query": "SELECT AVG ( friend_id )  FROM friend", "predict": "SELECT AVG(friend_id) AS average_friend_id\nFROM Friend;"}, {"isUser": true, "text": "what is the average of grades?"}, {"isUser": false, "query": "SELECT AVG ( grade )  FROM Highschooler", "predict": "SELECT AVG(grade) AS average_grade\nFROM Highschooler;"}, {"isUser": true, "text": "what is the highest grade?"}, {"isUser": false, "query": "SELECT MAX ( grade )  FROM Highschooler", "predict": "SELECT MAX(grade) AS highest_grade\nFROM Highschooler;"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "how many students are enrolled in a bachelor degree program?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'", "predict": "SELECT COUNT(DISTINCT student_id) AS total_students\nFROM Student_Enrolment\nWHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%bachelor%');"}, {"isUser": true, "text": "what are their student IDs?"}, {"isUser": false, "query": "SELECT t1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'", "predict": "SELECT DISTINCT student_id\nFROM Student_Enrolment\nWHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%bachelor%');"}, {"isUser": true, "text": "Who are the students with student id 9?"}, {"isUser": false, "query": "SELECT DISTINCT t1.first_name, t1.middle_name, t1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE t1.student_id  =  9", "predict": "SELECT *\nFROM Students\nWHERE student_id = 9;"}, {"isUser": true, "text": "what about id 7?"}, {"isUser": false, "query": "SELECT DISTINCT t1.first_name, t1.middle_name, t1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE t1.student_id  =  7", "predict": "SELECT *\nFROM Students\nWHERE student_id = 7;"}, {"isUser": true, "text": "what are the degrees of the students in the bachelor program?"}, {"isUser": false, "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name, T3.degree_summary_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'", "predict": "SELECT s.student_id, d.degree_summary_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Degree_Programs d ON se.degree_program_id = d.degree_program_id\nWHERE d.degree_summary_name LIKE '%bachelor%';"}, {"isUser": true, "text": "what are the different degree descriptions available?"}, {"isUser": false, "query": "SELECT DISTINCT T3.degree_summary_description FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id", "predict": "SELECT DISTINCT degree_summary_description\nFROM Degree_Programs;"}, {"isUser": true, "text": "what were the student ids in the bachelor program again?"}, {"isUser": false, "query": "SELECT DISTINCT T1.student_ID FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'", "predict": "SELECT DISTINCT student_id\nFROM Student_Enrolment\nWHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%bachelor%');"}, {"isUser": true, "text": "what are those students first name, middle name, and last names?"}, {"isUser": false, "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'", "predict": "SELECT first_name, middle_name, last_name\nFROM Students\nWHERE student_id IN (\n    SELECT DISTINCT student_id\n    FROM Student_Enrolment\n    WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%bachelor%')\n);"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "How many makes are there for Chevrolet?"}, {"isUser": false, "query": "SELECT count ( DISTINCT Make )  FROM CAR_NAMES WHERE Model  =  'chevrolet'", "predict": "SELECT COUNT(DISTINCT Maker)\nFROM car_makers\nWHERE Maker = 'Chevrolet';"}, {"isUser": true, "text": "How many models are in the list?"}, {"isUser": false, "query": "SELECT count ( DISTINCT Model )  FROM CAR_NAMES", "predict": "SELECT COUNT(*)\nFROM model_list;"}, {"isUser": true, "text": "Can you tell me which model has the most makes of cars?"}, {"isUser": false, "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count ( DISTINCT Make )  DESC LIMIT 1", "predict": "SELECT Model\nFROM model_list\nGROUP BY Model\nORDER BY COUNT(DISTINCT Maker) DESC\nLIMIT 1;"}]},
{"db_name": "course_teach", "turns": [{"isUser": true, "text": "Can you show me the names of teachers with the course id for the courses they teach?"}, {"isUser": false, "query": "SELECT T2.Name, T1.course_id FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID", "predict": "SELECT t.Name, c.Course\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID;"}, {"isUser": true, "text": "Show me the teacher id with the number of courses they teach."}, {"isUser": false, "query": "SELECT T2.Name ,  COUNT ( * )  FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID GROUP BY T2.Name", "predict": "SELECT Teacher_ID, COUNT(Course_ID) AS Number_of_Courses\nFROM course_arrange\nGROUP BY Teacher_ID;"}, {"isUser": true, "text": "I want to know the names of the teachers below age 30."}, {"isUser": false, "query": "SELECT name from teacher where age < 30", "predict": "SELECT Name\nFROM teacher\nWHERE Age < 30;"}]},
{"db_name": "orchestra", "turns": [{"isUser": true, "text": "When are the auditions? | Would you like to know the dates of all performances with the type audition? | Yes that's exactly it"}, {"isUser": false, "query": "SELECT date FROM performance WHERE TYPE LIKE \"%audition%\"", "predict": "SELECT Date\nFROM performance\nWHERE Type = 'audition';"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "Can you show the birth date of player id 200002?"}, {"isUser": false, "query": "SELECT birth_date FROM players where player_id = 200002", "predict": "SELECT birth_date\nFROM players\nWHERE player_id = 200002;"}, {"isUser": true, "text": "What is the first name of player id 200001?"}, {"isUser": false, "query": "SELECT first_name FROM players where player_id = 200001", "predict": "SELECT first_name\nFROM players\nWHERE player_id = 200001;"}, {"isUser": true, "text": "Can you show the codes of countries that have more than 50 players?"}, {"isUser": false, "query": "SELECT country_code FROM players GROUP BY country_code HAVING count ( * )  > 50", "predict": "SELECT country_code\nFROM players\nGROUP BY country_code\nHAVING COUNT(player_id) > 50;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "which region is the city kabul located"}, {"isUser": false, "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Name   =   \"Kabul\"", "predict": "SELECT co.Region\nFROM city ci\nJOIN country co ON ci.CountryCode = co.Code\nWHERE ci.Name = 'Kabul';"}, {"isUser": true, "text": "which region is the city herat located"}, {"isUser": false, "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Name   =   \"Herat\"", "predict": "SELECT co.Region\nFROM city ci\nJOIN country co ON ci.CountryCode = co.Code\nWHERE ci.Name = 'Herat';"}, {"isUser": true, "text": "which region is the city quandahar"}, {"isUser": false, "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Name   =   \"Qandahar\"", "predict": "SELECT co.Region\nFROM city ci\nJOIN country co ON ci.CountryCode = co.Code\nWHERE ci.Name = 'Quandahar';"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "What year has the most number of matches, please?"}, {"isUser": false, "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT year, COUNT(*) AS num_matches\nFROM matches\nGROUP BY year\nORDER BY num_matches DESC\nLIMIT 1;"}, {"isUser": true, "text": "What year has the least number of matches, please?"}, {"isUser": false, "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count ( * )  LIMIT 1", "predict": "SELECT year, COUNT(*) AS num_matches\nFROM matches\nGROUP BY year\nORDER BY num_matches\nLIMIT 1;"}, {"isUser": true, "text": "How many matches were there that year?"}, {"isUser": false, "query": "SELECT YEAR, count ( * )  FROM matches GROUP BY YEAR ORDER BY count ( * )  LIMIT 1", "predict": "SELECT year, COUNT(*) AS num_matches\nFROM matches\nGROUP BY year\nORDER BY num_matches\nLIMIT 1;"}, {"isUser": true, "text": "What about in 2016?"}, {"isUser": false, "query": "SELECT year, count ( * )  from matches where year  =  2016", "predict": "SELECT COUNT(*) AS num_matches\nFROM matches\nWHERE year = 2016;"}, {"isUser": true, "text": "How many of those were played on a hard surface?"}, {"isUser": false, "query": "SELECT count ( * )  from matches where surface  =  \"Hard\"", "predict": "SELECT COUNT(*) AS num_hard_surface_matches\nFROM matches\nWHERE year = 2016 AND surface = 'Hard';"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "How many models does each car maker make? | Here is the result table of the full name of car makers and the number of models they made. For example, the car maker \"American Motor Company\" made 1 model. | What are all the ids of car makers?"}, {"isUser": false, "query": "SELECT  Id  FROM CAR_MAKERS", "predict": "SELECT cm.FullName AS \"Car Maker\", COUNT(ml.Model) AS \"Number of Models\"\nFROM car_makers cm\nLEFT JOIN model_list ml ON cm.Id = ml.Maker\nGROUP BY cm.FullName;\n\nSELECT Id AS \"Car Maker Id\"\nFROM car_makers;"}, {"isUser": true, "text": "And what is their country ids?"}, {"isUser": false, "query": "SELECT  Country  FROM CAR_MAKERS", "predict": "SELECT cm.FullName AS \"Car Maker\", cm.Country AS \"Country Id\"\nFROM car_makers cm;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What is the average percent?"}, {"isUser": false, "query": "select avg ( percentage )  from countrylanguage", "predict": "SELECT AVG(Percentage) AS AveragePercentage FROM countrylanguage;"}, {"isUser": true, "text": "Which code of country has the highest dutch speaking population?"}, {"isUser": false, "query": "select countrycode from countrylanguage where language  =  \"Dutch\" order by percentage desc limit 1", "predict": "SELECT CountryCode\nFROM countrylanguage\nWHERE Language = 'Dutch'\nORDER BY Percentage DESC\nLIMIT 1;"}, {"isUser": true, "text": "The difference of the overall percent | Do you mean average percent? | yes"}, {"isUser": false, "query": "select avg ( percentage )  from countrylanguage where language  =  \"Papiamento\"", "predict": "SELECT MAX(Percentage) - MIN(Percentage) AS DifferenceOfOverallPercent FROM countrylanguage;"}]},
{"db_name": "museum_visit", "turns": [{"isUser": true, "text": "What is the membership level of Gonzalo Higuaín ?"}, {"isUser": false, "query": "SELECT Level_of_membership FROM visitor WHERE name  =   \"Gonzalo Higuaín \"", "predict": "SELECT Level_of_membership\nFROM visitor\nWHERE Name = 'Gonzalo Higuaín';"}, {"isUser": true, "text": "whose membership level is 5?"}, {"isUser": false, "query": "SELECT name FROM visitor WHERE Level_of_membership =  5", "predict": "SELECT Name\nFROM visitor\nWHERE Level_of_membership = 5;"}, {"isUser": true, "text": "how many numbers of persons whose membership level is greater than 5?"}, {"isUser": false, "query": "SELECT count ( * )  FROM visitor WHERE Level_of_membership>5", "predict": "SELECT COUNT(*)\nFROM visitor\nWHERE Level_of_membership > 5;"}, {"isUser": true, "text": "What is the age of membership level 8?"}, {"isUser": false, "query": "SELECT age FROM visitor WHERE Level_of_membership   = 8", "predict": "SELECT Age\nFROM visitor\nWHERE Level_of_membership = 8;"}, {"isUser": true, "text": "how many persons who have membership level greater than 4?"}, {"isUser": false, "query": "SELECT count ( * )  FROM visitor WHERE Level_of_membership > 4", "predict": "SELECT COUNT(*)\nFROM visitor\nWHERE Level_of_membership > 4;"}, {"isUser": true, "text": "please sort the names of persons whose age from old to young according to the membership level?"}, {"isUser": false, "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "predict": "SELECT Name\nFROM visitor\nORDER BY Age DESC, Level_of_membership;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "Which country speaks the largest number of languages?"}, {"isUser": false, "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode GROUP BY T1.Name ORDER BY COUNT ( * )  DESC LIMIT 1", "predict": "SELECT country.Name, COUNT(countrylanguage.Language) AS NumLanguages\nFROM country\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nGROUP BY country.Code\nORDER BY NumLanguages DESC\nLIMIT 1;"}, {"isUser": true, "text": "How many languages are spoken in Canada?"}, {"isUser": false, "query": "SELECT count ( * )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode where T1.name  =  \"Canada\"", "predict": "SELECT COUNT(Language) AS NumLanguages\nFROM countrylanguage\nWHERE CountryCode = 'CAN';"}, {"isUser": true, "text": "What are the names of those languages?"}, {"isUser": false, "query": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode where T1.name  =  \"Canada\"", "predict": "SELECT Language\nFROM countrylanguage\nWHERE CountryCode = 'CAN';"}, {"isUser": true, "text": "How many countries is Chinese spoken in?"}, {"isUser": false, "query": "SELECT count ( distinct CountryCode )  FROM countrylanguage WHERE Language  =  \"Chinese\"", "predict": "SELECT COUNT(DISTINCT CountryCode) AS NumCountries\nFROM countrylanguage\nWHERE Language = 'Chinese';"}, {"isUser": true, "text": "Which countries are in North America?"}, {"isUser": false, "query": "SELECT NAME FROM country WHERE Continent  =  \"North America\"", "predict": "SELECT Name\nFROM country\nWHERE Continent = 'North America';"}, {"isUser": true, "text": "What are the official languages of these countries?"}, {"isUser": false, "query": "SELECT LANGUAGE FROM countrylanguage WHERE countrycode in  ( SELECT Code FROM country WHERE Continent  =  \"North America\" )  and IsOfficial  =  \"T\"", "predict": "SELECT country.Name, countrylanguage.Language\nFROM country\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE country.Continent = 'North America' AND countrylanguage.IsOfficial = 'T';"}, {"isUser": true, "text": "What is the life expectancy in Canada?"}, {"isUser": false, "query": "SELECT LifeExpectancy FROM country WHERE name  =  \"Canada\"", "predict": "SELECT LifeExpectancy\nFROM country\nWHERE Code = 'CAN';"}]},
{"db_name": "pets_1", "turns": [{"isUser": true, "text": "How many students have more than one pet?"}, {"isUser": false, "query": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid GROUP BY T1.stuid HAVING count ( * )   >  1", "predict": "SELECT COUNT(StuID)\nFROM (\n    SELECT StuID, COUNT(PetID) AS num_pets\n    FROM Has_Pet\n    GROUP BY StuID\n    HAVING num_pets > 1\n) AS multiple_pets;"}, {"isUser": true, "text": "What are their names?"}, {"isUser": false, "query": "SELECT T1.lname, T1.fname  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid GROUP BY T1.stuid HAVING count ( * )   >  1", "predict": "SELECT Fname, LName\nFROM Student\nWHERE StuID IN (\n    SELECT StuID\n    FROM (\n        SELECT StuID, COUNT(PetID) AS num_pets\n        FROM Has_Pet\n        GROUP BY StuID\n        HAVING num_pets > 1\n    ) AS multiple_pets\n);"}, {"isUser": true, "text": "What gender is Kim Tracy?"}, {"isUser": false, "query": "SELECT T1.lname, T1.fname, T1.sex  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid GROUP BY T1.stuid HAVING count ( * )   >  1", "predict": "SELECT Sex\nFROM Student\nWHERE Fname = 'Kim' AND LName = 'Tracy';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "HOw many regions are there in ASia?"}, {"isUser": false, "query": "select count ( * )  from  ( SELECT region FROM country WHERE Continent   =   \"Asia\" group by region ) ", "predict": "SELECT COUNT(DISTINCT Region) \nFROM country \nWHERE Continent = 'Asia';"}, {"isUser": true, "text": "What about in Europe?"}, {"isUser": false, "query": "select count ( * )  from  ( SELECT region FROM country WHERE Continent   =   \"Europe\" group by region ) ", "predict": "SELECT COUNT(DISTINCT Region) \nFROM country \nWHERE Continent = 'Europe';"}, {"isUser": true, "text": "What is the surface area of all 10 of them?"}, {"isUser": false, "query": "SELECT sum ( SurfaceArea )  FROM country WHERE Continent   =   \"Asia\" OR Continent   =   \"Europe\"", "predict": "SELECT SUM(SurfaceArea) \nFROM country \nWHERE Region IN (SELECT Region FROM country WHERE Continent = 'Asia' LIMIT 10);"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "Hello!  How many template IDs have the description of \"Presentation\"?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code   =  T2.template_type_code WHERE T1.template_type_description   =   \"Presentation\"", "predict": "SELECT COUNT(DISTINCT Template_ID)\nFROM Templates\nWHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation');"}, {"isUser": true, "text": "Thank you!  Can you please provide me with the list of the template ids with the template type description of \"Presentation\"?"}, {"isUser": false, "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code   =  T2.template_type_code WHERE T1.template_type_description   =   \"Presentation\"", "predict": "SELECT Template_ID\nFROM Templates\nWHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation');"}, {"isUser": true, "text": "Can you provide me with the template type code for these three Temple ids?"}, {"isUser": false, "query": "SELECT T2.template_id, T2.Template_Type_Code FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code   =  T2.template_type_code WHERE T1.template_type_description   =   \"Presentation\"", "predict": "SELECT Template_Type_Code\nFROM Templates\nWHERE Template_ID IN (\n    SELECT Template_ID\n    FROM Templates\n    WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')\n);"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "How many times at most can a course enrollment result show in different transcripts?"}, {"isUser": false, "query": "SELECT count ( * )   FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT student_course_id, COUNT(transcript_id) AS num_transcripts\nFROM Transcript_Contents\nGROUP BY student_course_id\nORDER BY num_transcripts DESC\nLIMIT 1;"}, {"isUser": true, "text": "What are the course enrollment ids for those, please?"}, {"isUser": false, "query": "SELECT student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT student_course_id\nFROM Transcript_Contents\nGROUP BY student_course_id\nHAVING COUNT(transcript_id) = (SELECT COUNT(transcript_id) AS num_transcripts\n                               FROM Transcript_Contents\n                               GROUP BY student_course_id\n                               ORDER BY num_transcripts DESC\n                               LIMIT 1);"}, {"isUser": true, "text": "What is the least number of times of a course enrollment result shows in different transcripts?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  LIMIT 1", "predict": "SELECT student_course_id, COUNT(transcript_id) AS num_transcripts\nFROM Transcript_Contents\nGROUP BY student_course_id\nORDER BY num_transcripts\nLIMIT 1;"}, {"isUser": true, "text": "What are the course enrollment ids for those, please?"}, {"isUser": false, "query": "SELECT  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  LIMIT 1", "predict": "SELECT student_course_id\nFROM Transcript_Contents\nGROUP BY student_course_id\nHAVING COUNT(transcript_id) = (SELECT COUNT(transcript_id) AS num_transcripts\n                               FROM Transcript_Contents\n                               GROUP BY student_course_id\n                               ORDER BY num_transcripts\n                               LIMIT 1);"}, {"isUser": true, "text": "What is the average student course id?"}, {"isUser": false, "query": "SELECT avg ( student_course_id )  FROM Transcript_Contents", "predict": "SELECT AVG(student_course_id) AS average_student_course_id\nFROM Transcript_Contents;"}]},
{"db_name": "real_estate_properties", "turns": [{"isUser": true, "text": "What are the names of the properties with more that one room?"}, {"isUser": false, "query": "SELECT property_name FROM Properties WHERE room_count  >  1", "predict": "SELECT property_name\nFROM Properties\nWHERE room_count > 1;"}, {"isUser": true, "text": "What are the names of the properties that are either houses or apartments with more than one room?"}, {"isUser": false, "query": "SELECT property_name FROM Properties WHERE property_type_code   =   \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code   =   \"Apartment\" AND room_count  >  1", "predict": "SELECT property_name\nFROM Properties\nWHERE (apt_feature_1 IS NOT NULL OR hse_feature_1 IS NOT NULL)\nAND room_count > 1;"}, {"isUser": true, "text": "How many rooms do each of those have?"}, {"isUser": false, "query": "SELECT property_name, room_count FROM Properties WHERE property_type_code   =   \"House\" UNION SELECT property_name, room_count FROM Properties WHERE property_type_code   =   \"Apartment\" AND room_count  >  1", "predict": "SELECT property_name, room_count\nFROM Properties\nWHERE (apt_feature_1 IS NOT NULL OR hse_feature_1 IS NOT NULL)\nAND room_count > 1;"}, {"isUser": true, "text": "What is the average agreed selling price of all houses with more than one room?"}, {"isUser": false, "query": "SELECT avg ( agreed_selling_price )  FROM Properties WHERE property_type_code   =   \"House\" AND room_count  >  1", "predict": "SELECT AVG(agreed_selling_price)\nFROM Properties\nWHERE hse_feature_1 IS NOT NULL\nAND room_count > 1;"}]},
{"db_name": "employee_hire_evaluation", "turns": [{"isUser": true, "text": "Which cities do more than one employee under age 30 come from?"}, {"isUser": false, "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count ( * )   >  1", "predict": "SELECT City\nFROM employee\nWHERE Age < 30\nGROUP BY City\nHAVING COUNT(Employee_ID) > 1;"}, {"isUser": true, "text": "Which cities do more than one employee over age 30 come from?"}, {"isUser": false, "query": "SELECT city FROM employee WHERE age  >  30 GROUP BY city HAVING count ( * )   >  1", "predict": "SELECT City\nFROM employee\nWHERE Age > 30\nGROUP BY City\nHAVING COUNT(Employee_ID) > 1;"}, {"isUser": true, "text": "What are the names and ages of all employees over age 30?"}, {"isUser": false, "query": "SELECT Name, Age FROM employee WHERE age  >  30", "predict": "SELECT Name, Age\nFROM employee\nWHERE Age > 30;"}, {"isUser": true, "text": "What are the names and ages of all employees under age 30?"}, {"isUser": false, "query": "SELECT Name, Age FROM employee WHERE age  <  30", "predict": "SELECT Name, Age\nFROM employee\nWHERE Age < 30;"}, {"isUser": true, "text": "What cities are all employees under age 29 from?"}, {"isUser": false, "query": "SELECT City FROM employee WHERE age  <  29", "predict": "SELECT City\nFROM employee\nWHERE Age < 29\nGROUP BY City;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "How many dog owner's are there?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Owners", "predict": "SELECT COUNT(owner_id) \nFROM Owners;"}, {"isUser": true, "text": "What is the age of the youngest dog?"}, {"isUser": false, "query": "SELECT age FROM Dogs ORDER BY age ASC LIMIT 1", "predict": "SELECT MIN(age) \nFROM Dogs;"}, {"isUser": true, "text": "What is the name of the dog who is 1 year old?"}, {"isUser": false, "query": "SELECT name FROM Dogs ORDER BY age ASC LIMIT 1", "predict": "SELECT name \nFROM Dogs \nWHERE age = '1';"}, {"isUser": true, "text": "Of the 15 owners, what is the name of the owner who owns Evangeline?"}, {"isUser": false, "query": "SELECT T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Evangeline\"", "predict": "SELECT o.first_name, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nWHERE d.name = 'Evangeline';"}]},
{"db_name": "singer", "turns": [{"isUser": true, "text": "Can you list all the singer ids that aren't present in the song table?"}, {"isUser": false, "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN  ( SELECT Singer_ID FROM song ) ", "predict": "SELECT Singer_ID\nFROM singer\nWHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);"}]},
{"db_name": "singer", "turns": [{"isUser": true, "text": "What are the names of the singers who were born in either 1948 or 1949?"}, {"isUser": false, "query": "SELECT Name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949", "predict": "SELECT Name\nFROM singer\nWHERE Birth_Year IN (1948, 1949);"}, {"isUser": true, "text": "What is their citizenship?"}, {"isUser": false, "query": "SELECT Citizenship FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949", "predict": "SELECT Name, Citizenship\nFROM singer\nWHERE Birth_Year IN (1948, 1949);"}, {"isUser": true, "text": "Of the singers that were born in 1948 or 1949, which had the highest net worth?"}, {"isUser": false, "query": "SELECT name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions desc limit 1", "predict": "SELECT Name, Net_Worth_Millions\nFROM singer\nWHERE Birth_Year IN (1948, 1949)\nORDER BY Net_Worth_Millions DESC\nLIMIT 1;"}, {"isUser": true, "text": "Did she have a net worth that was over 30 million?"}, {"isUser": false, "query": "SELECT name,Net_Worth_Millions FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions desc limit 1", "predict": "SELECT Name, Net_Worth_Millions\nFROM singer\nWHERE Birth_Year IN (1948, 1949)\nORDER BY Net_Worth_Millions DESC\nLIMIT 1;"}, {"isUser": true, "text": "What was the lowest net worth of any singer who was born between 1948 and 1949?"}, {"isUser": false, "query": "SELECT name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions limit 1", "predict": "SELECT Name, Net_Worth_Millions\nFROM singer\nWHERE Birth_Year IN (1948, 1949)\nORDER BY Net_Worth_Millions\nLIMIT 1;"}]},
{"db_name": "battle_death", "turns": [{"isUser": true, "text": "How many battles did not lose any ship with tonnage 225?"}, {"isUser": false, "query": "SELECT count ( * )  FROM battle WHERE id NOT IN  (  SELECT lost_in_battle FROM ship WHERE tonnage   =   '225'  ) ", "predict": "SELECT COUNT(DISTINCT b.id) AS battles_without_ships_lost\nFROM battle b\nLEFT JOIN ship s ON b.id = s.lost_in_battle\nWHERE s.tonnage != '225' OR s.tonnage IS NULL;"}, {"isUser": true, "text": "How many battles did lose a ship with tonnage 225?"}, {"isUser": false, "query": "SELECT count ( * )  FROM battle WHERE id IN  (  SELECT lost_in_battle FROM ship WHERE tonnage   =   '225'  ) ", "predict": "SELECT COUNT(DISTINCT b.id) AS battles_with_ships_lost\nFROM battle b\nJOIN ship s ON b.id = s.lost_in_battle\nWHERE s.tonnage = '225';"}, {"isUser": true, "text": "How many ships have a tonnage of 225?"}, {"isUser": false, "query": "SELECT count ( * )  FROM ship WHERE tonnage   =   '225'", "predict": "SELECT COUNT(*) AS ships_with_tonnage_225\nFROM ship\nWHERE tonnage = '225';"}, {"isUser": true, "text": "Who won in the battle when the ship with a tonnage of 225 was sunk?"}, {"isUser": false, "query": "SELECT result FROM battle WHERE id IN  (  SELECT lost_in_battle FROM ship WHERE tonnage   =   '225'  ) ", "predict": "SELECT b.result AS battle_result\nFROM battle b\nJOIN ship s ON b.id = s.lost_in_battle\nWHERE s.tonnage = '225';"}]},
{"db_name": "concert_singer", "turns": [{"isUser": true, "text": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015."}, {"isUser": false, "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id   =   T2.stadium_id WHERE T1.Year   =   2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id   =   T2.stadium_id WHERE T1.Year   =   2015", "predict": "SELECT DISTINCT s.Name, s.Location\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year = '2014'\nAND EXISTS (\n    SELECT 1\n    FROM concert c2\n    WHERE c2.Stadium_ID = c.Stadium_ID\n    AND c2.Year = '2015'\n);"}, {"isUser": true, "text": "Which year did the concert Super bootcamp happen in?"}, {"isUser": false, "query": "SELECT year from concert where concert_name like \"%Super bootcamp%\"", "predict": "SELECT Year\nFROM concert\nWHERE concert_Name = 'Super bootcamp';"}, {"isUser": true, "text": "And the concert named Auditions?"}, {"isUser": false, "query": "SELECT year from concert where concert_name like \"%Auditions%\"", "predict": "SELECT Year\nFROM concert\nWHERE concert_Name = 'Auditions';"}, {"isUser": true, "text": "What stadium did it happen in?"}, {"isUser": false, "query": "SELECT T1.name from stadium as T1 join  concert as T2 on T1.stadium_id  =  T2.stadium_id where T2.concert_name like \"%Auditions%\"", "predict": "SELECT s.Name, s.Location\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.concert_Name = 'Auditions';"}, {"isUser": true, "text": "What are the names and locations of stadiums which had some concerts in either 2014 or 2015?"}, {"isUser": false, "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 or T1.Year  =  2015", "predict": "SELECT DISTINCT s.Name, s.Location\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year = '2014' OR c.Year = '2015';"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "how many flights does United Airlines operate in USA? | What do you mean by operate in USA? | how many flights does United Airlines have?"}, {"isUser": false, "query": "SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\"", "predict": "SELECT COUNT(*) \nFROM flights \nWHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') \nAND SourceAirport IN (SELECT AirportCode FROM airports WHERE Country = 'USA') \nAND DestAirport IN (SELECT AirportCode FROM airports WHERE Country = 'USA');"}, {"isUser": true, "text": "and how many destination airports do these flights have?"}, {"isUser": false, "query": "SELECT count ( distinct T2.DestAirport )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\"", "predict": "SELECT COUNT(DISTINCT DestAirport) \nFROM flights \nWHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') \nAND SourceAirport IN (SELECT AirportCode FROM airports WHERE Country = 'USA') \nAND DestAirport IN (SELECT AirportCode FROM airports WHERE Country = 'USA');"}, {"isUser": true, "text": "how many of those flights go to airport \"ASY\"?"}, {"isUser": false, "query": "SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\" AND T2.DestAirport   =   \"ASY\"", "predict": "SELECT COUNT(*) \nFROM flights \nWHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') \nAND SourceAirport IN (SELECT AirportCode FROM airports WHERE Country = 'USA') \nAND DestAirport = 'ASY';"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "what are the degree_program_id in the Table Name: Student_Enrolment?"}, {"isUser": false, "query": "SELECT degree_program_id from Student_Enrolment", "predict": "SELECT degree_program_id\nFROM Student_Enrolment;"}, {"isUser": true, "text": "what are the semester_id in the Table Name: Student_Enrolment?"}, {"isUser": false, "query": "SELECT semester_id from Student_Enrolment", "predict": "SELECT semester_id\nFROM Student_Enrolment;"}, {"isUser": true, "text": "what are the semester_name in the Table Name: Semesters?"}, {"isUser": false, "query": "SELECT semester_name from semesters", "predict": "SELECT semester_name\nFROM Semesters;"}, {"isUser": true, "text": "what is the semester which most student registered in? show both the name and the id."}, {"isUser": false, "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id   =   T2.semester_id GROUP BY T1.semester_id ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT semester_id, semester_name\nFROM Semesters\nWHERE semester_id IN (\n    SELECT semester_id\n    FROM Student_Enrolment\n    GROUP BY semester_id\n    ORDER BY COUNT(student_id) DESC\n    LIMIT 1\n);"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What is the average life expectancy for each government form?"}, {"isUser": false, "query": "SELECT GovernmentForm, avg ( LifeExpectancy )  FROM country GROUP BY GovernmentForm", "predict": "SELECT GovernmentForm, AVG(LifeExpectancy) AS AverageLifeExpectancy\nFROM country\nGROUP BY GovernmentForm;"}, {"isUser": true, "text": "Can you show me only those government forms whose average life expectancy is greater than 72?"}, {"isUser": false, "query": "SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72", "predict": "SELECT GovernmentForm, AVG(LifeExpectancy) AS AverageLifeExpectancy\nFROM country\nGROUP BY GovernmentForm\nHAVING AverageLifeExpectancy > 72;"}, {"isUser": true, "text": "What is the population of each of those?"}, {"isUser": false, "query": "SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72", "predict": "SELECT c.GovernmentForm, AVG(c.LifeExpectancy) AS AverageLifeExpectancy, SUM(c.Population) AS TotalPopulation\nFROM country c\nWHERE c.GovernmentForm IN (\n    SELECT GovernmentForm\n    FROM country\n    GROUP BY GovernmentForm\n    HAVING AVG(LifeExpectancy) > 72\n)\nGROUP BY c.GovernmentForm;"}]},
{"db_name": "tvshow", "turns": [{"isUser": true, "text": "Which TV channels do not play any cartoons by Ben Jones?  List the ids."}, {"isUser": false, "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by   =   'Ben Jones'", "predict": "SELECT DISTINCT TV_Channel.id\nFROM TV_Channel\nLEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL;"}, {"isUser": true, "text": "And which channels play Ben Jones's cartoons?"}, {"isUser": false, "query": "SELECT id FROM TV_Channel where id in  ( SELECT channel FROM cartoon WHERE directed_by   =   'Ben Jones' ) ", "predict": "SELECT DISTINCT TV_Channel.id\nFROM TV_Channel\nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Directed_by = 'Ben Jones';"}, {"isUser": true, "text": "What cartoon titles do channels play?"}, {"isUser": false, "query": "SELECT Title FROM Cartoon where directed_by   =   'Ben Jones'", "predict": "SELECT Cartoon.Title, Cartoon.Channel\nFROM Cartoon;"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "Can you show me document ids?"}, {"isUser": false, "query": "SELECT document_id FROM Paragraphs", "predict": "SELECT Document_ID\nFROM Documents;"}, {"isUser": true, "text": "Can you show the number of paragraphs in each document?"}, {"isUser": false, "query": "SELECT document_id ,  count ( * )  FROM Paragraphs GROUP BY document_id", "predict": "SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs\nFROM Documents d\nLEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID;"}, {"isUser": true, "text": "Can you order it by document id?"}, {"isUser": false, "query": "SELECT document_id ,  count ( * )  FROM Paragraphs GROUP BY document_id ORDER BY document_id", "predict": "SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs\nFROM Documents d\nLEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID\nORDER BY d.Document_ID;"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "Howdy!  Can you show me a list of all flight numbers?"}, {"isUser": false, "query": "SELECT FlightNo FROM Flights", "predict": "SELECT FlightNo\nFROM flights;"}, {"isUser": true, "text": "Excellent!  Can you update this list to include a column with the destination airport code for each of these?"}, {"isUser": false, "query": "SELECT FlightNo,DestAirport FROM Flights", "predict": "SELECT f.FlightNo, f.DestAirport, a.AirportCode\nFROM flights f\nJOIN airports a ON f.DestAirport = a.AirportName;"}, {"isUser": true, "text": "Nice!  Can you tell the quantity of flights that had Aberdeen or Abilene as their destination cities?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport   =   T2.AirportCode WHERE T2.city   =   \"Aberdeen\" OR T2.city   =   \"Abilene\"", "predict": "SELECT COUNT(*)\nFROM flights\nWHERE DestAirport IN ('Aberdeen', 'Abilene');"}, {"isUser": true, "text": "Okay!  Can you tell me the airport city that has the most flights landing in it?"}, {"isUser": false, "query": "SELECT DESTAIRPORT FROM Flights GROUP BY DESTAIRPORT order by count ( * )  desc limit 1", "predict": "SELECT DestAirport AS AirportCity, COUNT(*) AS NumFlights\nFROM flights\nGROUP BY DestAirport\nORDER BY NumFlights DESC\nLIMIT 1;"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "How many flights are arriving in the city called Aberdeen?"}, {"isUser": false, "query": "SELECT count ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =   T2.AirportCode WHERE T2.City   =   \"Aberdeen\"", "predict": "SELECT COUNT(*) \nFROM flights \nJOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airports.City = 'Aberdeen';"}, {"isUser": true, "text": "How many flights are there departing Aberdeen?"}, {"isUser": false, "query": "SELECT count ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.sourceAirport   =   T2.AirportCode WHERE T2.City   =   \"Aberdeen\"", "predict": "SELECT COUNT(*) \nFROM flights \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airports.City = 'Aberdeen';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "WHAT ARE THE AFRICAN COUNTRIES THAT HAVE POPULATION LESS THAN ANY COUNTRY IN ASIA"}, {"isUser": false, "query": "SELECT Name FROM country WHERE Continent   =   \"Africa\"  AND population  <   ( SELECT max ( population )  FROM country WHERE Continent   =   \"Asia\" ) ", "predict": "SELECT c1.Name AS AfricanCountry\nFROM country c1\nWHERE c1.Continent = 'Africa' AND c1.Population < (SELECT MIN(c2.Population) \n                                                    FROM country c2 \n                                                    WHERE c2.Continent = 'Asia');"}, {"isUser": true, "text": "FROM WHICH CONTINENT IS ARUBA"}, {"isUser": false, "query": "SELECT continent FROM country WHERE name  =  \"Aruba\"", "predict": "SELECT c.Continent\nFROM country c\nWHERE c.Name = 'Aruba';"}, {"isUser": true, "text": "WHAT IS THE LOCAL NAME OF ANGOLA"}, {"isUser": false, "query": "SELECT localname FROM country WHERE name  =  \"Angola\"", "predict": "SELECT c.LocalName\nFROM country c\nWHERE c.Name = 'Angola';"}, {"isUser": true, "text": "SURFACE AREA  OF AFGHANISTAN"}, {"isUser": false, "query": "SELECT SurfaceArea FROM country WHERE name  =  \"Afghanistan\"", "predict": "SELECT c.SurfaceArea\nFROM country c\nWHERE c.Name = 'Afghanistan';"}, {"isUser": true, "text": "WHAT IS THE CODE OF ARUBA"}, {"isUser": false, "query": "SELECT Code FROM country WHERE name  =  \"Aruba\"", "predict": "SELECT c.Code\nFROM country c\nWHERE c.Name = 'Aruba';"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "kindly give me the names that might be used for professionals or owners but cannot be use for dog names"}, {"isUser": false, "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "predict": "SELECT first_name\nFROM Owners\nUNION\nSELECT last_name\nFROM Owners\nUNION\nSELECT first_name\nFROM Professionals\nUNION\nSELECT last_name\nFROM Professionals\nEXCEPT\nSELECT name\nFROM Dogs;"}, {"isUser": true, "text": "What email can i use to contact Taryn | Would you like the email address of professionals with name Taryn? | Yes"}, {"isUser": false, "query": "SELECT email_address FROM Professionals WHERE First_Name  =  \"Taryn\"", "predict": "SELECT email_address\nFROM Professionals\nWHERE first_name = 'Taryn'\nOR last_name = 'Taryn';"}, {"isUser": true, "text": "In what state can i find Jayson"}, {"isUser": false, "query": "SELECT state FROM Professionals WHERE First_Name  =  \"Jayson\"", "predict": "SELECT state\nFROM Owners\nWHERE first_name = 'Jayson'\nOR last_name = 'Jayson';"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "What are the names of the makers who produced some cars in the year 1970?"}, {"isUser": false, "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker JOIN CAR_NAMES AS T3 ON T2.model   =   T3.model JOIN CARS_DATA AS T4 ON T3.MakeId   =   T4.id WHERE T4.year   =   '1970'", "predict": "SELECT DISTINCT car_makers.Maker\nFROM car_makers\nJOIN model_list ON car_makers.Id = model_list.Maker\nJOIN cars_data ON model_list.ModelId = cars_data.Id\nWHERE cars_data.Year = 1970;"}, {"isUser": true, "text": "What are the models and makes of the cars produced that year?"}, {"isUser": false, "query": "SELECT T3.model, T3.make FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker JOIN CAR_NAMES AS T3 ON T2.model   =   T3.model JOIN CARS_DATA AS T4 ON T3.MakeId   =   T4.id WHERE T4.year   =   '1970'", "predict": "SELECT car_names.Model, car_names.Make\nFROM car_names\nJOIN model_list ON car_names.MakeId = model_list.Maker\nJOIN cars_data ON model_list.ModelId = cars_data.Id\nWHERE cars_data.Year = 1970;"}, {"isUser": true, "text": "What is the full name of the maker that produced the heaviest car in the year 1970?"}, {"isUser": false, "query": "SELECT T1.Fullname FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970' ORDER BY T4.weight DESC limit 1", "predict": "SELECT car_makers.FullName\nFROM car_makers\nJOIN model_list ON car_makers.Id = model_list.Maker\nJOIN cars_data ON model_list.ModelId = cars_data.Id\nWHERE cars_data.Year = 1970\nORDER BY cars_data.Weight DESC\nLIMIT 1;"}]},
{"db_name": "tvshow", "turns": [{"isUser": true, "text": "List the cartoons that are directed by Ben Jones. | Here are the titles of cartoons that are directed by Ben Jones | List all tv channels with their id's....."}, {"isUser": false, "query": "SELECT channel, id FROM cartoon", "predict": "SELECT Title\nFROM Cartoon\nWHERE Directed_by = 'Ben Jones';"}, {"isUser": true, "text": "Is there any other tv channel other than italian language ?"}, {"isUser": false, "query": "SELECT series_name FROM TV_Channel EXCEPT SELECT series_name FROM TV_channel WHERE language  =  'Italian'", "predict": "SELECT *\nFROM TV_Channel\nWHERE Language != 'Italian';"}, {"isUser": true, "text": "Find the id of tv channels that do not play any cartoon directed by Ben Jones."}, {"isUser": false, "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "predict": "SELECT id\nFROM TV_Channel\nWHERE id NOT IN (SELECT DISTINCT Channel\n                 FROM Cartoon\n                 WHERE Directed_by = 'Ben Jones');"}]},
{"db_name": "employee_hire_evaluation", "turns": [{"isUser": true, "text": "What is the average number of products of all stores?"}, {"isUser": false, "query": "select avg ( Number_products )  from shop", "predict": "SELECT AVG(Number_products) AS Average_Number_of_Products\nFROM shop;"}, {"isUser": true, "text": "what are the names of stores whose number of products is bigger than 6685?"}, {"isUser": false, "query": "select Name from shop where Number_products > 6685", "predict": "SELECT Name\nFROM shop\nWHERE Number_products > 6685;"}, {"isUser": true, "text": "how many stores in total?"}, {"isUser": false, "query": "select count ( * )  from shop", "predict": "SELECT COUNT(*) AS Total_Stores\nFROM shop;"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "How many flights in this table?"}, {"isUser": false, "query": "SELECT count ( * )  FROM flights", "predict": "SELECT COUNT(*) FROM flights;"}, {"isUser": true, "text": "Which city has least number of departing flights?"}, {"isUser": false, "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode   =   T2.SourceAirport GROUP BY T1.City ORDER BY count ( * )  ASC LIMIT 1", "predict": "SELECT SourceAirport, COUNT(*) AS DepartingFlights\nFROM flights\nGROUP BY SourceAirport\nORDER BY DepartingFlights\nLIMIT 1;"}, {"isUser": true, "text": "Find the flight number of APG?"}, {"isUser": false, "query": "SELECT FlightNo FROM flights WHERE SourceAirport = \"APG\"", "predict": "SELECT FlightNo\nFROM flights\nWHERE SourceAirport = 'APG';"}, {"isUser": true, "text": "Find the airport names of DYS?"}, {"isUser": false, "query": "SELECT AirportName FROM airports WHERE AirportCode = \"DYS\"", "predict": "SELECT AirportName\nFROM airports\nWHERE AirportCode = 'DYS';"}, {"isUser": true, "text": "Fin the city of ABR?"}, {"isUser": false, "query": "SELECT CITY FROM airports WHERE AirportCode = \"ABR\"", "predict": "SELECT City\nFROM airports\nWHERE AirportCode = 'ABR';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What are the countries where either English or Dutch is the official language?"}, {"isUser": false, "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" AND IsOfficial   =   \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"Dutch\" AND IsOfficial   =   \"T\"", "predict": "SELECT DISTINCT c.Name\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE (cl.Language = 'English' OR cl.Language = 'Dutch') AND cl.IsOfficial = 'T';"}, {"isUser": true, "text": "What is the official language in Belgium?"}, {"isUser": false, "query": "SELECT T2.language FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T1.name  =  \"Belgium\" and T2.isofficial  =  \"T\"", "predict": "SELECT cl.Language\nFROM countrylanguage cl\nWHERE cl.CountryCode = 'BEL' AND cl.IsOfficial = 'T';"}, {"isUser": true, "text": "What are the countries where arabic language is spoken"}, {"isUser": false, "query": "SELECT T1.name FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.language  =  \"Arabic\"", "predict": "SELECT DISTINCT c.Name\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = 'Arabic';"}, {"isUser": true, "text": "Please tell me all the languages spoken in Egypt."}, {"isUser": false, "query": "SELECT T2.language FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T1.name  =  \"Egypt\"", "predict": "SELECT cl.Language\nFROM countrylanguage cl\nWHERE cl.CountryCode = 'EGY';"}, {"isUser": true, "text": "Can you tell me the number of countries where Arabic is the official language."}, {"isUser": false, "query": "SELECT count ( T1.name )  FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.Language  =  \"Arabic\" and T2.isOfficial  =  \"T\"", "predict": "SELECT COUNT(DISTINCT c.Name) AS Num_Countries\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = 'Arabic' AND cl.IsOfficial = 'T';"}, {"isUser": true, "text": "Can you please give me the names of these countries?"}, {"isUser": false, "query": "SELECT T1.name FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.Language  =  \"Arabic\" and T2.isOfficial  =  \"T\"", "predict": "SELECT DISTINCT c.Name\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = 'Arabic' AND cl.IsOfficial = 'T';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What are the populations of every country in Africa?"}, {"isUser": false, "query": "SELECT name,population FROM country WHERE Continent   =   \"Africa\"", "predict": "SELECT Name, Population\nFROM country\nWHERE Continent = 'Africa';"}, {"isUser": true, "text": "What are the names and populations of every country in Asia?"}, {"isUser": false, "query": "SELECT name,population FROM country WHERE Continent   =   \"Asia\"", "predict": "SELECT Name, Population\nFROM country\nWHERE Continent = 'Asia';"}, {"isUser": true, "text": "What are the names of the Asian countries that have a larger population than that of any country in Africa?"}, {"isUser": false, "query": "SELECT Name FROM country WHERE Continent   =   \"Asia\"  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Africa\" ) ", "predict": "SELECT c1.Name\nFROM country c1\nWHERE c1.Continent = 'Asia' AND c1.Population > (SELECT MAX(c2.Population) FROM country c2 WHERE c2.Continent = 'Africa');"}, {"isUser": true, "text": "What are the populations of those countries?"}, {"isUser": false, "query": "SELECT Name,population FROM country WHERE Continent   =   \"Asia\"  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Africa\" ) ", "predict": "SELECT c1.Name, c1.Population\nFROM country c1\nWHERE c1.Continent = 'Asia' AND c1.Population > (SELECT MAX(c2.Population) FROM country c2 WHERE c2.Continent = 'Africa');"}, {"isUser": true, "text": "What are the government forms of those countries?"}, {"isUser": false, "query": "SELECT Name,GovernmentForm FROM country WHERE Continent   =   \"Asia\"  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Africa\" ) ", "predict": "SELECT c1.Name, c1.GovernmentForm\nFROM country c1\nWHERE c1.Continent = 'Asia' AND c1.Population > (SELECT MAX(c2.Population) FROM country c2 WHERE c2.Continent = 'Africa');"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What is the name of the country with the shortest life expectancy in Asia?"}, {"isUser": false, "query": "SELECT Name FROM country WHERE Continent   =   \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "predict": "SELECT c.Name\nFROM country c\nWHERE c.Continent = 'Asia'\nORDER BY c.LifeExpectancy\nLIMIT 1;"}, {"isUser": true, "text": "And in Africa? | Do you mean among country in Africa, or among the country in Africa and in Asia. | Among country in Africa"}, {"isUser": false, "query": "SELECT Name FROM country WHERE Continent   =   \"Africa\" ORDER BY LifeExpectancy LIMIT 1", "predict": "SELECT c.Name\nFROM country c\nWHERE c.Continent = 'Africa'\nORDER BY c.LifeExpectancy\nLIMIT 1;"}, {"isUser": true, "text": "What is the GNP of Afghanistan?"}, {"isUser": false, "query": "SELECT GNP FROM country WHERE name = \"Afghanistan\"", "predict": "SELECT c.GNP\nFROM country c\nWHERE c.Name = 'Afghanistan';"}, {"isUser": true, "text": "What is the population of Afghanistan?"}, {"isUser": false, "query": "SELECT Population FROM country WHERE name = \"Afghanistan\"", "predict": "SELECT c.Population\nFROM country c\nWHERE c.Name = 'Afghanistan';"}]},
{"db_name": "poker_player", "turns": [{"isUser": true, "text": "How much did the winning poker player make?"}, {"isUser": false, "query": "SELECT Earnings FROM poker_player", "predict": "SELECT Earnings\nFROM poker_player\nWHERE Best_Finish = 1;"}, {"isUser": true, "text": "Can you rank the poker players earnings from highest to lowest?"}, {"isUser": false, "query": "SELECT Earnings FROM poker_player order by Earnings desc", "predict": "SELECT Earnings\nFROM poker_player\nORDER BY Earnings DESC;"}, {"isUser": true, "text": "How many final tables did the poker player with the least amount of earnings make?"}, {"isUser": false, "query": "SELECT Final_Table_Made FROM poker_player order by Earnings asc limit 1", "predict": "SELECT Final_Table_Made\nFROM poker_player\nWHERE Earnings = (SELECT MIN(Earnings) FROM poker_player);"}, {"isUser": true, "text": "What about the poker player with the most earnings how many final table did they make?"}, {"isUser": false, "query": "SELECT Final_Table_Made FROM poker_player order by Earnings desc limit 1", "predict": "SELECT Final_Table_Made\nFROM poker_player\nWHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "Hello there!  Can you please list all the template IDs and which document IDs they are associated with?"}, {"isUser": false, "query": "SELECT template_id FROM Documents", "predict": "SELECT Templates.Template_ID, Documents.Document_ID\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID;"}, {"isUser": true, "text": "Thanks!  Unfortunately, I am seeing only the Template_IDs.  Can you update the list to show the document IDs as well?"}, {"isUser": false, "query": "SELECT template_id ,Document_ID FROM Documents", "predict": "SELECT Templates.Template_ID, Documents.Document_ID\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID;"}, {"isUser": true, "text": "Alright!  Can you show me a list of the Template_IDs for each template that is not associated with a Document_ID?"}, {"isUser": false, "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "predict": "SELECT Templates.Template_ID\nFROM Templates\nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Documents.Document_ID IS NULL;"}, {"isUser": true, "text": "Nice!  Finally, can you update that list to show the associated template type code for each of these?"}, {"isUser": false, "query": "SELECT T1.template_id ,T1.Template_Type_Code FROM Templates as T1 join Documents as T2 on T1.Template_ID = T2.Template_ID", "predict": "SELECT Templates.Template_ID, Templates.Template_Type_Code\nFROM Templates\nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Documents.Document_ID IS NULL;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "Tell me how many dogs have gone through any treatments."}, {"isUser": false, "query": "SELECT count ( * )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "predict": "SELECT COUNT(DISTINCT dog_id) AS total_dogs_with_treatments\nFROM Treatments;"}, {"isUser": true, "text": "Tell me how old the youngest is. | Do you mean the youngest among those that have gone through any treatment? | yes"}, {"isUser": false, "query": "SELECT min ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "predict": "SELECT MIN(age) AS youngest_age\nFROM Dogs\nWHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments);"}, {"isUser": true, "text": "And how old is the oldest that has gone through any treatment?"}, {"isUser": false, "query": "SELECT max ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "predict": "SELECT MAX(age) AS oldest_age\nFROM Dogs\nWHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments);"}, {"isUser": true, "text": "How about the average age? | Do you mean the average age of those that have gone through any treatment? | yes"}, {"isUser": false, "query": "SELECT avg ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "predict": "SELECT AVG(age) AS average_age\nFROM Dogs\nWHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments);"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "Hi there! How many different semesters does this list have? | Do  you  mean  the type of  semester name？ | Yes!  My apologies for being unclear.  How many different semester name types are on this list?"}, {"isUser": false, "query": "SELECT distinct semester_name FROM Semesters", "predict": "SELECT COUNT(DISTINCT semester_name) AS num_semester_types\nFROM Semesters;"}, {"isUser": true, "text": "Awesome!  Much appreciated!  Can you filter this list to show just the semester names which do not have any \nstudent enrolment ids associated, or in other words semesters which do not have any students enrolled?"}, {"isUser": false, "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ", "predict": "SELECT semester_name\nFROM Semesters\nWHERE semester_id NOT IN (\n    SELECT semester_id\n    FROM Student_Enrolment\n);"}, {"isUser": true, "text": "Thank you!  Can you update this list to show the associated semester IDs and semester descriptions?"}, {"isUser": false, "query": "SELECT semester_id,semester_name,semester_description FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ", "predict": "SELECT semester_id, semester_name, semester_description\nFROM Semesters\nWHERE semester_id NOT IN (\n    SELECT semester_id\n    FROM Student_Enrolment\n);"}]},
{"db_name": "pets_1", "turns": [{"isUser": true, "text": "How many female students are on the list?"}, {"isUser": false, "query": "SELECT count ( * ) FROM student WHERE Sex = \"F\"", "predict": "SELECT COUNT(*)\nFROM Student\nWHERE Sex = 'female';"}, {"isUser": true, "text": "What is the full names of least aged students on the list?"}, {"isUser": false, "query": "SELECT LName,Fname  FROM student order  by  Age  limit 1", "predict": "SELECT Fname || ' ' || LName AS Full_Name\nFROM Student\nWHERE Age = (SELECT MIN(Age) FROM Student);"}, {"isUser": true, "text": "Find the average age of students who do not have any pet?"}, {"isUser": false, "query": "SELECT avg ( age )  FROM student WHERE stuid NOT IN  ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid ) ", "predict": "SELECT AVG(Age)\nFROM Student\nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet);"}, {"isUser": true, "text": "What is the city code of student id 1003?"}, {"isUser": false, "query": "SELECT city_code  FROM student WHERE \nStuID = 1003", "predict": "SELECT city_code\nFROM Student\nWHERE StuID = 1003;"}]},
{"db_name": "tvshow", "turns": [{"isUser": true, "text": "Which country tv channels some cartoon written by todd casey?"}, {"isUser": false, "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.written_by   =   'Todd Casey'", "predict": "SELECT TV_Channel.Country\nFROM TV_Channel\nJOIN Cartoon ON TV_Channel.id = Cartoon.id\nWHERE Cartoon.Written_by = 'Todd Casey';"}, {"isUser": true, "text": "What is the title of cartoon written by todd casey?"}, {"isUser": false, "query": "SELECT title FROM cartoon  WHERE written_by   =   'Todd Casey'", "predict": "SELECT Cartoon.Title\nFROM Cartoon\nWHERE Cartoon.Written_by = 'Todd Casey';"}, {"isUser": true, "text": "Who directed the cartoon titled enter the outsiders?"}, {"isUser": false, "query": "SELECT directed_by FROM cartoon WHERE title  =  \"Enter the Outsiders!\"", "predict": "SELECT Cartoon.Directed_by\nFROM Cartoon\nWHERE Cartoon.Title = 'Enter the Outsiders';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "HOW MANY LANGUAGE ARE THERE?"}, {"isUser": false, "query": "SELECT count ( distinct language )  from countrylanguage", "predict": "SELECT COUNT(DISTINCT Language) AS TotalLanguages\nFROM countrylanguage;"}, {"isUser": true, "text": "WHAT IS THE POPULATION OF Aruba"}, {"isUser": false, "query": "SELECT population from country where name  =  \"Aruba\"", "predict": "SELECT Population\nFROM city\nWHERE Name = 'Aruba';"}, {"isUser": true, "text": "WHAT IS Afghanistan GNPOld?"}, {"isUser": false, "query": "SELECT GNPOLD from country where name  =  \"Afghanistan\"", "predict": "SELECT GNPOld\nFROM country\nWHERE Name = 'Afghanistan';"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "What are the codes of countries that have more than 50 players?"}, {"isUser": false, "query": "SELECT country_code FROM players GROUP BY country_code HAVING count ( * )   >  50", "predict": "SELECT country_code\nFROM players\nGROUP BY country_code\nHAVING COUNT(player_id) > 50;"}, {"isUser": true, "text": "What are the codes of countries that have less than 40 players?"}, {"isUser": false, "query": "SELECT country_code FROM players GROUP BY country_code HAVING count ( * )   <  40", "predict": "SELECT country_code\nFROM players\nGROUP BY country_code\nHAVING COUNT(player_id) < 40;"}, {"isUser": true, "text": "What are the player names from the country code AHO? | Do you want first name and last name? | yes"}, {"isUser": false, "query": "SELECT first_name,last_name FROM players where country_code = 'AHO'", "predict": "SELECT first_name, last_name\nFROM players\nWHERE country_code = 'AHO';"}, {"isUser": true, "text": "What are their player IDs?"}, {"isUser": false, "query": "SELECT player_id FROM players where country_code = 'AHO'", "predict": "SELECT player_id\nFROM players\nWHERE country_code = 'AHO';"}, {"isUser": true, "text": "What hand is player id 206449?"}, {"isUser": false, "query": "SELECT hand FROM players where player_id = 206449", "predict": "SELECT hand\nFROM players\nWHERE player_id = 206449;"}, {"isUser": true, "text": "How many other players have that?"}, {"isUser": false, "query": "SELECT count ( * )  FROM players where hand = 'U'", "predict": "SELECT COUNT(*)\nFROM players\nWHERE hand = (SELECT hand FROM players WHERE player_id = 206449)\nAND player_id != 206449;"}]},
{"db_name": "battle_death", "turns": [{"isUser": true, "text": "Can you please show the names of the battles that had no ships lost in the 'English Channel'?"}, {"isUser": false, "query": "SELECT name FROM battle EXCEPT SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel'", "predict": "SELECT b.name\nFROM battle b\nLEFT JOIN ship s ON b.id = s.lost_in_battle\nWHERE s.location != 'English Channel' OR s.location IS NULL;"}, {"isUser": true, "text": "What are the results of those battles?"}, {"isUser": false, "query": "SELECT RESULT  FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ", "predict": "SELECT b.result\nFROM battle b\nLEFT JOIN ship s ON b.id = s.lost_in_battle\nWHERE (s.location != 'English Channel' OR s.location IS NULL)\nAND s.lost_in_battle IS NULL;"}, {"isUser": true, "text": "Who are the Bulgarian commanders of those battles, please?"}, {"isUser": false, "query": "SELECT bulgarian_commander FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ", "predict": "SELECT b.bulgarian_commander\nFROM battle b\nLEFT JOIN ship s ON b.id = s.lost_in_battle\nWHERE (s.location != 'English Channel' OR s.location IS NULL)\nAND s.lost_in_battle IS NULL;"}, {"isUser": true, "text": "What were the dates of those battles?"}, {"isUser": false, "query": "SELECT date FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ", "predict": "SELECT b.date\nFROM battle b\nLEFT JOIN ship s ON b.id = s.lost_in_battle\nWHERE (s.location != 'English Channel' OR s.location IS NULL)\nAND s.lost_in_battle IS NULL;"}, {"isUser": true, "text": "Who were the latin commanders of those battles?"}, {"isUser": false, "query": "SELECT  latin_commander  FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ", "predict": "SELECT b.latin_commander\nFROM battle b\nLEFT JOIN ship s ON b.id = s.lost_in_battle\nWHERE (s.location != 'English Channel' OR s.location IS NULL)\nAND s.lost_in_battle IS NULL;"}]},
{"db_name": "employee_hire_evaluation", "turns": [{"isUser": true, "text": "How many stores are there? | Did you mean to ask for the number of shops? | Yes"}, {"isUser": false, "query": "SELECT COUNT ( * )  FROM shop", "predict": "SELECT COUNT(*) AS number_of_shops\nFROM shop;"}, {"isUser": true, "text": "What is the most products that one shop has?"}, {"isUser": false, "query": "SELECT MAX ( Number_products )  FROM shop", "predict": "SELECT MAX(Number_products) AS max_products\nFROM shop;"}, {"isUser": true, "text": "What about the minimum number or products that one shop has?"}, {"isUser": false, "query": "SELECT MIN ( Number_products )  FROM shop", "predict": "SELECT MIN(Number_products) AS min_products\nFROM shop;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "which breed is the top ranked?"}, {"isUser": false, "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT breed_name\nFROM Breeds\nORDER BY breed_code DESC\nLIMIT 1;"}, {"isUser": true, "text": "what is the total count for bulldog?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code where T1.breed_name  =  \"Bulldog\"", "predict": "SELECT COUNT(*)\nFROM Dogs\nWHERE breed_code = 'Bulldog';"}]},
{"db_name": "pets_1", "turns": [{"isUser": true, "text": "What are the names of all students who have cat pets? | Linda is the first name of the student who has a cat pet. | What are the first names of all students who have dog pets?"}, {"isUser": false, "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'dog'", "predict": "SELECT Fname\nFROM Student\nWHERE StuID IN (\n    SELECT StuID\n    FROM Has_Pet\n    WHERE PetID IN (\n        SELECT PetID\n        FROM Pets\n        WHERE PetType = 'cat'\n    )\n);"}, {"isUser": true, "text": "How many students have any type of pet?"}, {"isUser": false, "query": "SELECT count ( T2.StuId )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid", "predict": "SELECT COUNT(DISTINCT StuID)\nFROM Has_Pet;"}, {"isUser": true, "text": "What is the age of Linda's pet?"}, {"isUser": false, "query": "SELECT T3.pet_age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T1.Fname  =  \"Linda\"", "predict": "SELECT pet_age\nFROM Pets\nWHERE PetID IN (\n    SELECT PetID\n    FROM Has_Pet\n    WHERE StuID IN (\n        SELECT StuID\n        FROM Student\n        WHERE Fname = 'Linda'\n    )\n);"}]},
{"db_name": "museum_visit", "turns": [{"isUser": true, "text": "What are the names who have a membership level higher than 4?"}, {"isUser": false, "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4", "predict": "SELECT Name\nFROM visitor\nWHERE Level_of_membership > 4;"}, {"isUser": true, "text": "And can you add a column showing their age?"}, {"isUser": false, "query": "SELECT name, age FROM visitor WHERE Level_of_membership  >  4", "predict": "SELECT Name, Age\nFROM visitor\nWHERE Level_of_membership > 4;"}, {"isUser": true, "text": "And now sort the list by age with oldest first."}, {"isUser": false, "query": "SELECT name ,  age FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "predict": "SELECT Name, Age\nFROM visitor\nWHERE Level_of_membership > 4\nORDER BY Age DESC;"}, {"isUser": true, "text": "OK...what are their customer IDs?"}, {"isUser": false, "query": "SELECT id FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "predict": "SELECT ID, Name, Age\nFROM visitor\nWHERE Level_of_membership > 4\nORDER BY Age DESC;"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "who are the students enrolled in 2 degree programs in one semester? | did you want to return their first, middle and last names? | yes"}, {"isUser": false, "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id GROUP BY T1.student_id HAVING count ( * )    =   2", "predict": "SELECT DISTINCT s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nJOIN Semesters sem ON se.semester_id = sem.semester_id\nWHERE dp.degree_program_id IN (1, 2) AND sem.semester_id = 1;"}, {"isUser": true, "text": "what are their student_id?"}, {"isUser": false, "query": "SELECT T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id GROUP BY T1.student_id HAVING count ( * )    =   2", "predict": "SELECT DISTINCT s.student_id\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nJOIN Semesters sem ON se.semester_id = sem.semester_id\nWHERE dp.degree_program_id IN (1, 2) AND sem.semester_id = 1;"}, {"isUser": true, "text": "what is student_id 4 email address"}, {"isUser": false, "query": "SELECT email_address FROM Students where student_id  =  4", "predict": "SELECT email_address\nFROM Students\nWHERE student_id = 4;"}, {"isUser": true, "text": "what is Timothy Anna Ward's date first registered?"}, {"isUser": false, "query": "SELECT date_first_registered FROM Students where first_name  =  'Timmothy' and middle_name  =  'Anna' and last_name  =  'Ward'", "predict": "SELECT date_first_registered\nFROM Students\nWHERE first_name = 'Timothy' AND middle_name = 'Anna' AND last_name = 'Ward';"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "How many dog owners live in Virginia?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   =   'Virginia'", "predict": "SELECT COUNT(*) \nFROM Owners \nWHERE state = 'Virginia';"}, {"isUser": true, "text": "What is their name?"}, {"isUser": false, "query": "SELECT T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   =   'Virginia'", "predict": "SELECT first_name, last_name \nFROM Owners \nWHERE state = 'Virginia';"}, {"isUser": true, "text": "And the name of their dog?"}, {"isUser": false, "query": "SELECT T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   =   'Virginia'", "predict": "SELECT o.first_name, o.last_name, d.name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nWHERE o.state = 'Virginia';"}, {"isUser": true, "text": "What breed of dog is bessie?"}, {"isUser": false, "query": "SELECT T2.breed_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Bessie\"", "predict": "SELECT d.name, b.breed_name\nFROM Dogs d\nJOIN Breeds b ON d.breed_code = b.breed_code\nWHERE d.name = 'Bessie';"}, {"isUser": true, "text": "And what size dog is she?"}, {"isUser": false, "query": "SELECT T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Bessie\"", "predict": "SELECT d.name, s.size_description\nFROM Dogs d\nJOIN Sizes s ON d.size_code = s.size_code\nWHERE d.name = 'Bessie';"}]},
{"db_name": "orchestra", "turns": [{"isUser": true, "text": "How many record companies are there?"}, {"isUser": false, "query": "SELECT count ( Record_Company )  FROM orchestra", "predict": "SELECT COUNT(DISTINCT Record_Company) AS Number_of_Record_Companies\nFROM orchestra;"}, {"isUser": true, "text": "How many orchestras are there?"}, {"isUser": false, "query": "SELECT count ( Orchestra_ID )  FROM orchestra", "predict": "SELECT COUNT(*) AS Number_of_Orchestras\nFROM orchestra;"}, {"isUser": true, "text": "Can you list the orchestras by the date they were founded for me starting with the oldest? | Do you mean listing the names of the orchestras by the date they were founded starting with the oldest? | yes."}, {"isUser": false, "query": "select orchestra from orchestra order by Year_of_Founded", "predict": "SELECT Orchestra, Year_of_Founded\nFROM orchestra\nORDER BY Year_of_Founded;"}, {"isUser": true, "text": "What year was the Royal Danish Orchestra founded?"}, {"isUser": false, "query": "select year_of_founded  from orchestra where orchestra = 'Royal Danish Orchestra'", "predict": "SELECT Year_of_Founded\nFROM orchestra\nWHERE Orchestra = 'Royal Danish Orchestra';"}, {"isUser": true, "text": "What record company is shared by the most orchestras?"}, {"isUser": false, "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT ( * )  DESC LIMIT 1", "predict": "SELECT Record_Company, COUNT(Orchestra) AS Number_of_Orchestras\nFROM orchestra\nGROUP BY Record_Company\nORDER BY Number_of_Orchestras DESC\nLIMIT 1;"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "How many 'United Airlines' flights go to the Airport 'ASY'?"}, {"isUser": false, "query": "SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\" AND T2.DestAirport   =   \"ASY\"", "predict": "SELECT COUNT(*) \nFROM flights \nWHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') \nAND DestAirport = 'ASY';"}, {"isUser": true, "text": "What is the airline ID of United Airlines?"}, {"isUser": false, "query": "select uid from airlines where airline  =  \"United Airlines\"", "predict": "SELECT uid \nFROM airlines \nWHERE Airline = 'United Airlines';"}, {"isUser": true, "text": "How many airlines with airline id 1 go to the destination airport ASY?"}, {"isUser": false, "query": "SELECT count ( * )  FROM FLIGHTS WHERE airline  =  1 and DestAirport   =   \" ASY\"", "predict": "SELECT COUNT(*) \nFROM flights \nWHERE Airline = 1 \nAND DestAirport = 'ASY';"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "How many Volvo cars are there?"}, {"isUser": false, "query": "SELECT count ( * )  FROM CAR_names where model  =  \"volvo\"", "predict": "SELECT COUNT(*) \nFROM car_makers \nWHERE Maker = 'Volvo';"}, {"isUser": true, "text": "Which Volvo car has the least accelerate? | Do you want its car id? | Yes"}, {"isUser": false, "query": "SELECT T1.id FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "predict": "SELECT model_list.Model \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Id \nJOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE car_makers.Maker = 'Volvo' \nORDER BY cars_data.Accelerate \nLIMIT 1;"}, {"isUser": true, "text": "How many cylinders does that car have?"}, {"isUser": false, "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "predict": "SELECT Cylinders \nFROM cars_data \nJOIN car_makers ON cars_data.Id = car_makers.Id \nWHERE car_makers.Maker = 'Volvo' \nORDER BY Accelerate \nLIMIT 1;"}]},
{"db_name": "network_1", "turns": [{"isUser": true, "text": "How many students are there?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Highschooler", "predict": "SELECT COUNT(ID) FROM Highschooler;"}, {"isUser": true, "text": "What about friends?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Friend", "predict": "SELECT COUNT(*) FROM Friend;"}, {"isUser": true, "text": "What are the names of all the highschoolers who have friends ?"}, {"isUser": false, "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id", "predict": "SELECT DISTINCT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id;"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "Which semester did bachelor students enroll? List the id."}, {"isUser": false, "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id WHERE degree_summary_name   =   'Master'", "predict": "SELECT se.semester_id\nFROM Student_Enrolment se\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE dp.degree_summary_name LIKE '%bachelor%';"}, {"isUser": true, "text": "What is the degree summary description of student with id 14?"}, {"isUser": false, "query": "SELECT T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.student_id  =  14", "predict": "SELECT dp.degree_summary_description\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nWHERE se.student_id = 14;"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon?"}, {"isUser": false, "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id ORDER BY T2.mpg DESC LIMIT 1", "predict": "SELECT model_list.Model\nFROM cars_data\nJOIN model_list ON cars_data.Id = model_list.ModelId\nWHERE MPG = (SELECT MAX(MPG) FROM cars_data);"}, {"isUser": true, "text": "Which model has the highest horsepower?"}, {"isUser": false, "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id ORDER BY T2.horsepower DESC LIMIT 1", "predict": "SELECT model_list.Model\nFROM cars_data\nJOIN model_list ON cars_data.Id = model_list.ModelId\nWHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data);"}]},
{"db_name": "employee_hire_evaluation", "turns": [{"isUser": true, "text": "what is the age of George Chuter?"}, {"isUser": false, "query": "SELECT Age from employee where Name = 'George Chuter'", "predict": "SELECT Age \nFROM employee \nWHERE Name = 'George Chuter';"}, {"isUser": true, "text": "what is the age of lee mears?"}, {"isUser": false, "query": "SELECT Age from employee where Name = 'Lee Mears'", "predict": "SELECT Age \nFROM employee \nWHERE Name = 'Lee Mears';"}, {"isUser": true, "text": "find the name of the employee who got the highest one time bonus?"}, {"isUser": false, "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "predict": "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nORDER BY ev.Bonus DESC\nLIMIT 1;"}]},
{"db_name": "poker_player", "turns": [{"isUser": true, "text": "What are the names of non poker players?"}, {"isUser": false, "query": "SELECT Name FROM people WHERE People_ID NOT IN  ( SELECT People_ID FROM poker_player ) ", "predict": "SELECT Name\nFROM people\nWHERE People_ID NOT IN (SELECT People_ID FROM poker_player);"}, {"isUser": true, "text": "What are the names of people who play poker?"}, {"isUser": false, "query": "SELECT Name FROM people WHERE People_ID IN  ( SELECT People_ID FROM poker_player ) ", "predict": "SELECT Name\nFROM people\nWHERE People_ID IN (SELECT People_ID FROM poker_player);"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "how many players are presented on the table"}, {"isUser": false, "query": "SELECT count ( * )  FROM players", "predict": "SELECT COUNT(player_id) AS total_players\nFROM players;"}, {"isUser": true, "text": "list out the players first name"}, {"isUser": false, "query": "SELECT first_name FROM players", "predict": "SELECT first_name\nFROM players;"}, {"isUser": true, "text": "what is the country code of Mirjana"}, {"isUser": false, "query": "SELECT country_code FROM players  where first_name  =  \"Mirjana\"", "predict": "SELECT country_code\nFROM players\nWHERE first_name = 'Mirjana';"}, {"isUser": true, "text": "what is the birth date of Justine"}, {"isUser": false, "query": "SELECT birth_date FROM players  where first_name  =  \"Mirjana\"", "predict": "SELECT birth_date\nFROM players\nWHERE first_name = 'Justine';"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "what models are produced by the make General Motors?"}, {"isUser": false, "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors'", "predict": "SELECT model_list.Model\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Id\nWHERE car_makers.Maker = 'General Motors';"}, {"isUser": true, "text": "what models have a weight greater than 3500"}, {"isUser": false, "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T4.weight  >  3500", "predict": "SELECT Model\nFROM car_names\nJOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE cars_data.Weight > 3500;"}, {"isUser": true, "text": "could you list the models from the previous two questions with no duplicates please"}, {"isUser": false, "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' or T4.weight  < =   3500", "predict": "SELECT DISTINCT Model\nFROM car_names\nJOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE cars_data.Weight > 3500\n\nUNION\n\nSELECT DISTINCT model_list.Model\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Id\nWHERE car_makers.Maker = 'General Motors';"}, {"isUser": true, "text": "can you list the models that weight greater than 3500 or have the maker General Motors, but not both"}, {"isUser": false, "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' Or T4.weight  < =   3500 except SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' and T4.weight  < =   3500", "predict": "SELECT DISTINCT Model\nFROM car_names\nJOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE cars_data.Weight > 3500\nAND car_names.Make NOT IN (SELECT Maker FROM car_makers WHERE Maker = 'General Motors')\n\nUNION\n\nSELECT DISTINCT model_list.Model\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Id\nWHERE car_makers.Maker = 'General Motors'\nAND model_list.Model NOT IN (SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight > 3500);"}]},
{"db_name": "poker_player", "turns": [{"isUser": true, "text": "Which height of Aleksey Ostapenko?"}, {"isUser": false, "query": "SELECT height FROM people where name  =  \"Aleksey Ostapenko\"", "predict": "SELECT Height\nFROM people\nWHERE Name = 'Aleksey Ostapenko';"}, {"isUser": true, "text": "Who the person is born on August 16, 1982?"}, {"isUser": false, "query": "SELECT name FROM people where birth_date  =  \"August 16, 1982\"", "predict": "SELECT Name\nFROM people\nWHERE Birth_Date = 'August 16, 1982';"}, {"isUser": true, "text": "What are the people id of nationality Russia?"}, {"isUser": false, "query": "SELECT people_id FROM people where nationality  =  \"Russia\"", "predict": "SELECT People_ID\nFROM people\nWHERE Nationality = 'Russia';"}, {"isUser": true, "text": "What are the nationalities that are shared by at least two people?"}, {"isUser": false, "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT ( * )    > =    2", "predict": "SELECT Nationality\nFROM people\nGROUP BY Nationality\nHAVING COUNT(*) >= 2;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What is the population of Afghanistan?"}, {"isUser": false, "query": "SELECT Population FROM country where Name   =   \"Afghanistan\"", "predict": "SELECT Population\nFROM country\nWHERE Name = 'Afghanistan';"}, {"isUser": true, "text": "And for Aruba?"}, {"isUser": false, "query": "SELECT Population FROM country where Name   =   \"Aruba\"", "predict": "SELECT Population\nFROM country\nWHERE Name = 'Aruba';"}, {"isUser": true, "text": "What languages are spoken in Aruba?"}, {"isUser": false, "query": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T1.Name   =   \"Aruba\"", "predict": "SELECT Language\nFROM countrylanguage\nWHERE CountryCode = 'ABW';"}, {"isUser": true, "text": "Is there an official language for the country? | For which country? Aruba? | Yes."}, {"isUser": false, "query": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T1.Name   =   \"Aruba\" and T2.IsOfficial = 'T'", "predict": "SELECT Language\nFROM countrylanguage\nWHERE CountryCode = 'ABW' AND IsOfficial = 'T';"}, {"isUser": true, "text": "What about for Afghanistan?"}, {"isUser": false, "query": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T1.Name   =   \"Afghanistan\" and T2.IsOfficial = 'T'", "predict": "SELECT Language\nFROM countrylanguage\nWHERE CountryCode = 'AFG' AND IsOfficial = 'T';"}, {"isUser": true, "text": "How many other countries speak Dari?"}, {"isUser": false, "query": "SELECT count ( * )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.language = 'Dari' and T1.name ! =  'Afghanistan'", "predict": "SELECT COUNT(*)\nFROM countrylanguage\nWHERE Language = 'Dari' AND IsOfficial = 'F';"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "LIST THE DOG NAMES WITH TREATMENT COST"}, {"isUser": false, "query": "SELECT name,cost_of_treatment  FROM Dogs join Treatments", "predict": "SELECT d.name, t.cost_of_treatment\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id;"}, {"isUser": true, "text": "ARRANGE THE COST OF TREATMENT IN DESCENDING ORDER | The result table of the treatment cost is listed in descending order of the cost of treatment. | FIND THE DOG NAMES WHICH COST LESS THAN 1000 FOR TREATMENT"}, {"isUser": false, "query": "SELECT name FROM Dogs WHERE dog_id NOT IN (  SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum ( cost_of_treatment )   <  1000  ) ", "predict": "SELECT d.name, t.cost_of_treatment\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id\nWHERE t.cost_of_treatment < 1000\nORDER BY t.cost_of_treatment DESC;"}]},
{"db_name": "museum_visit", "turns": [{"isUser": true, "text": "What age of Gonzalo Higuaín?"}, {"isUser": false, "query": "SELECT age FROM visitor where name  =  \"Gonzalo Higuaín\"", "predict": "SELECT Age\nFROM visitor\nWHERE Name = 'Gonzalo Higuaín';"}, {"isUser": true, "text": "How many tickets of customer id 5?"}, {"isUser": false, "query": "SELECT num_of_ticket FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id where visitor_id  =  5", "predict": "SELECT Num_of_Ticket\nFROM visit\nWHERE visitor_ID = 5;"}, {"isUser": true, "text": "How many spent of Arjen Robben?"}, {"isUser": false, "query": "SELECT Total_spent FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id where name  =  \"Arjen Robben\"", "predict": "SELECT Total_spent\nFROM visit\nJOIN visitor ON visit.visitor_ID = visitor.ID\nWHERE visitor.Name = 'Arjen Robben';"}, {"isUser": true, "text": "Find the name and age of the visitor who bought the most tickets at once."}, {"isUser": false, "query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "predict": "SELECT visitor.Name, visitor.Age\nFROM visit\nJOIN visitor ON visit.visitor_ID = visitor.ID\nWHERE Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit);"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What are the regions that use English, please?"}, {"isUser": false, "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\"", "predict": "SELECT DISTINCT c.Region\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE cl.Language = 'English';"}, {"isUser": true, "text": "What are the regions that use Dutch, please?"}, {"isUser": false, "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"Dutch\"", "predict": "SELECT DISTINCT c.Region\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE cl.Language = 'Dutch';"}, {"isUser": true, "text": "What are the life expectancies of those regions?"}, {"isUser": false, "query": "SELECT DISTINCT T1.LifeExpectancy FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"Dutch\"", "predict": "SELECT DISTINCT c.Region, c.LifeExpectancy\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE cl.Language = 'Dutch';"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "What are the names of the 3 youngest winners across all matches?"}, {"isUser": false, "query": "SELECT winner_name  FROM matches ORDER BY winner_age LIMIT 3", "predict": "SELECT winner_name\nFROM matches\nWHERE winner_age IN (SELECT winner_age\n                     FROM matches\n                     ORDER BY winner_age\n                     LIMIT 3)"}, {"isUser": true, "text": "What are their ranks? | do you want to show their names as well? | yes, please"}, {"isUser": false, "query": "SELECT DISTINCT winner_name,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "predict": "SELECT m.winner_name, m.winner_rank\nFROM matches m\nWHERE m.winner_age IN (SELECT winner_age\n                       FROM matches\n                       ORDER BY winner_age\n                       LIMIT 3)"}, {"isUser": true, "text": "What is the loser name for each of those matches?"}, {"isUser": false, "query": "SELECT loser_name FROM matches ORDER BY winner_age LIMIT 3", "predict": "SELECT m.winner_name, m.winner_rank, m.loser_name\nFROM matches m\nWHERE m.winner_age IN (SELECT winner_age\n                       FROM matches\n                       ORDER BY winner_age\n                       LIMIT 3)"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "List the names of all the professionals."}, {"isUser": false, "query": "SELECT first_name, last_name FROM professionals", "predict": "SELECT first_name, last_name\nFROM Professionals;"}, {"isUser": true, "text": "List the names of all professionals that live in a city containing the substring West."}, {"isUser": false, "query": "SELECT first_name, last_name FROM professionals  WHERE city LIKE '%West%'", "predict": "SELECT first_name, last_name\nFROM Professionals\nWHERE city LIKE '%West%';"}, {"isUser": true, "text": "List the role of the professional named Taryn. | The role code of the professional with first name Taryn is Employee | List the role, street, city, and state of the professional with first name Taryn."}, {"isUser": false, "query": "SELECT role_code , street , city , state FROM professionals WHERE first_name  =  \"Taryn\"", "predict": "SELECT role_code\nFROM Professionals\nWHERE first_name = 'Taryn';"}, {"isUser": true, "text": "List the names of all the professionals and their state."}, {"isUser": false, "query": "SELECT first_name,state FROM professionals", "predict": "SELECT first_name, last_name, state\nFROM Professionals;"}, {"isUser": true, "text": "List the names of all professionals with the state Indiana."}, {"isUser": false, "query": "SELECT first_name FROM professionals WHERE state  =  \"Indiana\"", "predict": "SELECT first_name, last_name\nFROM Professionals\nWHERE state = 'Indiana';"}]},
{"db_name": "battle_death", "turns": [{"isUser": true, "text": "How many death events are there?"}, {"isUser": false, "query": "SELECT count ( * )  FROM death", "predict": "SELECT COUNT(*) FROM death;"}, {"isUser": true, "text": "Which event has the most deaths? | What information do you need? all the information of this event or some specific information, like the note? | Which death event has the highest number killed?"}, {"isUser": false, "query": "SELECT * FROM death where killed  =   ( select max ( killed )  from death ) ", "predict": "SELECT * \nFROM death \nWHERE killed = (SELECT MAX(killed) FROM death);"}, {"isUser": true, "text": "Yes, please list them"}, {"isUser": false, "query": "SELECT * FROM death where note like \"%East%\"", "predict": "SELECT * \nFROM death \nWHERE killed = (SELECT MAX(killed) FROM death);"}]},
{"db_name": "battle_death", "turns": [{"isUser": true, "text": "What are the death situations caused by the ship with tonnage 't' ?"}, {"isUser": false, "query": "SELECT T1.killed FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "predict": "SELECT * \nFROM death \nWHERE caused_by_ship_id IN (SELECT id \n                            FROM ship \n                            WHERE tonnage = 't');"}, {"isUser": true, "text": "What are the injury situations caused by the ship with tonnage 't' ?"}, {"isUser": false, "query": "SELECT T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "predict": "SELECT * \nFROM death \nWHERE caused_by_ship_id IN (SELECT id \n                            FROM ship \n                            WHERE tonnage = 't')\nAND injured > 0;"}, {"isUser": true, "text": "Tell me the total number of death and injury situations caused by the ship with tonnage 't'.."}, {"isUser": false, "query": "SELECT COUNT ( T1.id )  FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "predict": "SELECT SUM(killed) AS total_deaths, SUM(injured) AS total_injuries\nFROM death \nWHERE caused_by_ship_id IN (SELECT id \n                            FROM ship \n                            WHERE tonnage = 't');"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "Can you list the number of car makers on each continent?"}, {"isUser": false, "query": "SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country GROUP BY T1.Continent", "predict": "SELECT c.Continent, COUNT(cm.Id) AS NumCarMakers\nFROM continents c\nLEFT JOIN car_makers cm ON c.ContId = cm.Country\nGROUP BY c.Continent;"}, {"isUser": true, "text": "What about the number of car makers in the country USA?"}, {"isUser": false, "query": "seLECT count ( * )  FROM car_makers as T1 join countries as T2 on T2.CountryId   =   T1.Country where T2.countryname  =  \"usa\"", "predict": "SELECT COUNT(*) AS NumCarMakersInUSA\nFROM car_makers\nWHERE Country = 'USA';"}, {"isUser": true, "text": "How about in the country Germany?"}, {"isUser": false, "query": "seLECT count ( * )  FROM car_makers as T1 join countries as T2 on T2.CountryId   =   T1.Country where T2.countryname  =  \"germany\"", "predict": "SELECT COUNT(*) AS NumCarMakersInGermany\nFROM car_makers\nWHERE Country = 'Germany';"}, {"isUser": true, "text": "What about France?"}, {"isUser": false, "query": "seLECT count ( * )  FROM car_makers as T1 join countries as T2 on T2.CountryId   =   T1.Country where T2.countryname  =  \"france\"", "predict": "SELECT COUNT(*) AS NumCarMakersInFrance\nFROM car_makers\nWHERE Country = 'France';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What is the total number of countries?"}, {"isUser": false, "query": "SELECT count ( * )  FROM country", "predict": "SELECT COUNT(*) AS TotalCountries FROM country;"}, {"isUser": true, "text": "How many cities are there?"}, {"isUser": false, "query": "SELECT count ( * )  FROM city", "predict": "SELECT COUNT(*) AS TotalCities FROM city;"}, {"isUser": true, "text": "Can you tell me the region where the city of Kabul is?"}, {"isUser": false, "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "predict": "SELECT c.Region\nFROM city ci\nJOIN country c ON ci.CountryCode = c.Code\nWHERE ci.Name = 'Kabul';"}, {"isUser": true, "text": "Yes. How many cities are the in the region?"}, {"isUser": false, "query": "SELECT count ( T2.name )  FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.region  =  \"Southern and Central Asia\"", "predict": "SELECT COUNT(*) AS TotalCitiesInRegion\nFROM city ci\nJOIN country c ON ci.CountryCode = c.Code\nWHERE c.Region = (SELECT c.Region\n                  FROM city ci\n                  JOIN country c ON ci.CountryCode = c.Code\n                  WHERE ci.Name = 'Kabul');"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "How many documents have template type code BK?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id   =   T2.template_id WHERE T1.template_type_code   =   \"BK\"", "predict": "SELECT COUNT(DISTINCT D.Document_ID)\nFROM Documents D\nJOIN Templates T ON D.Template_ID = T.Template_ID\nWHERE T.Template_Type_Code = 'BK';"}, {"isUser": true, "text": "And their names?"}, {"isUser": false, "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id   =   T2.template_id WHERE T1.template_type_code   =   \"BK\"", "predict": "SELECT D.Document_Name\nFROM Documents D\nJOIN Templates T ON D.Template_ID = T.Template_ID\nWHERE T.Template_Type_Code = 'BK';"}, {"isUser": true, "text": "How many documents do not have template type code BK?"}, {"isUser": false, "query": "Select count ( * )  from documents where document_name not in \n ( SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id   =   T2.template_id WHERE T1.template_type_code   =   \"BK\" ) ", "predict": "SELECT COUNT(DISTINCT D.Document_ID)\nFROM Documents D\nJOIN Templates T ON D.Template_ID = T.Template_ID\nWHERE T.Template_Type_Code != 'BK';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What are the codes of the countries that do not speak English?"}, {"isUser": false, "query": "SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  ! =   \"English\"", "predict": "SELECT DISTINCT cl.CountryCode\nFROM countrylanguage cl\nWHERE cl.Language <> 'English';"}, {"isUser": true, "text": "What are the codes of the countries that do not speak English whose government forms are not Republic?"}, {"isUser": false, "query": "SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\"", "predict": "SELECT DISTINCT cl.CountryCode\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE cl.Language <> 'English' AND c.GovernmentForm <> 'Republic';"}, {"isUser": true, "text": "What language do each of those speak, please?"}, {"isUser": false, "query": "select countrycode, language from countrylanguage where countrycode in  ( SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ", "predict": "SELECT cl.CountryCode, cl.Language\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE cl.Language <> 'English' AND c.GovernmentForm <> 'Republic';"}, {"isUser": true, "text": "Which of those countries is on the continent North America?"}, {"isUser": false, "query": "select code from country where continent  =  \"North America\" and code in  ( SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ", "predict": "SELECT DISTINCT cl.CountryCode\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE cl.Language <> 'English' AND c.GovernmentForm <> 'Republic' AND c.Continent = 'North America';"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "which professionals live in state of indiana? | What information do you want to know about these professionals? | I would like to know all the information about professionals?"}, {"isUser": false, "query": "SELECT * FROM Professionals WHERE state   =   'Indiana'", "predict": "SELECT * \nFROM Professionals\nWHERE state = 'Indiana';"}, {"isUser": true, "text": "ok, I need to know the cell number of taryn"}, {"isUser": false, "query": "SELECT cell_number FROM Professionals WHERE first_name  =  \"Taryn\"", "predict": "SELECT cell_number\nFROM Professionals\nWHERE first_name = 'Taryn';"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "how many templates there"}, {"isUser": false, "query": "SELECT count ( * )  FROM Templates", "predict": "SELECT COUNT(*) AS Total_Templates\nFROM Templates;"}, {"isUser": true, "text": "what is the date effective of template id 1"}, {"isUser": false, "query": "SELECT Date_Effective_From, Date_Effective_To FROM Templates where Template_ID = 1", "predict": "SELECT Date_Effective_From, Date_Effective_To\nFROM Templates\nWHERE Template_ID = 1;"}, {"isUser": true, "text": "what is the template type code of template id 4"}, {"isUser": false, "query": "SELECT Template_Type_Code  FROM Templates where Template_ID = 4", "predict": "SELECT Template_Type_Code\nFROM Templates\nWHERE Template_ID = 4;"}, {"isUser": true, "text": "what is the version number of template id 0"}, {"isUser": false, "query": "SELECT Version_Number  FROM Templates where Template_ID = 0", "predict": "SELECT Version_Number\nFROM Templates\nWHERE Template_ID = 0;"}]},
{"db_name": "concert_singer", "turns": [{"isUser": true, "text": "Can you tell me which countries a singer above age 40 are from please?"}, {"isUser": false, "query": "SELECT country FROM singer WHERE age  >  40", "predict": "SELECT DISTINCT Country\nFROM singer\nWHERE Age > 40"}, {"isUser": true, "text": "Can you tell me which countries a singer below age 30 are from please?"}, {"isUser": false, "query": "SELECT DISTINCT ( country )  FROM singer WHERE age  < 30", "predict": "SELECT DISTINCT Country\nFROM singer\nWHERE Age < 30"}, {"isUser": true, "text": "Can you tell me which countries a singer above age 40 and below age 30 are from please?"}, {"isUser": false, "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "predict": "SELECT DISTINCT Country\nFROM singer\nWHERE Age > 40 OR Age < 30"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "WHAT IS THE ACCELERATE OF THE CAR MAKE AMC HORNET SPORTABOUT(SW)"}, {"isUser": false, "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId WHERE T2.Make   =   'amc hornet sportabout  ( sw ) '", "predict": "SELECT Accelerate \nFROM cars_data \nWHERE Id IN \n    (SELECT Id \n     FROM model_list \n     WHERE Maker = \n         (SELECT Id \n          FROM car_makers \n          WHERE Maker = 'AMC' \n          AND FullName = 'HORNET SPORTABOUT(SW)'));"}, {"isUser": true, "text": "CAN YOU WHICH CAR MODEL IS MOST RECENT RELEASED"}, {"isUser": false, "query": "SELECT T2.Model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId order by T1.Year desc limit 1", "predict": "SELECT Model \nFROM model_list \nWHERE ModelId = \n    (SELECT MAX(ModelId) \n     FROM model_list);"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "what are all of the template ids?"}, {"isUser": false, "query": "SELECT template_id FROM Templates", "predict": "SELECT Template_ID\nFROM Templates;"}, {"isUser": true, "text": "which of those is not used in a document"}, {"isUser": false, "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "predict": "SELECT Template_ID\nFROM Templates\nWHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);"}, {"isUser": true, "text": "are those still effective? | Do you mean the effective-to date of those templates? | yes"}, {"isUser": false, "query": "SELECT Date_effective_to FROM Templates WHERE template_id IN  (  SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents ) ", "predict": "SELECT Template_ID\nFROM Templates\nWHERE Date_Effective_To >= CURRENT_TIMESTAMP;"}, {"isUser": true, "text": "how many are used in documents? | 12 templates are used in a document. | and how many templates are not used?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Templates WHERE template_id in  ( SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents ) ", "predict": "SELECT COUNT(DISTINCT Template_ID) AS Used_Templates\nFROM Documents;\n\nSELECT COUNT(Template_ID) - (SELECT COUNT(DISTINCT Template_ID) FROM Documents) AS Unused_Templates\nFROM Templates;"}, {"isUser": true, "text": "what were those IDs again?"}, {"isUser": false, "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "predict": "SELECT Template_ID\nFROM Templates\nWHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);"}]},
{"db_name": "concert_singer", "turns": [{"isUser": true, "text": "show the name and theme for all concerts and the number of singers in each concert."}, {"isUser": false, "query": "SELECT T2.concert_name , T2.theme , count ( * )  FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id", "predict": "SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS Number_of_Singers\nFROM concert c\nLEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID\nGROUP BY c.concert_Name, c.Theme;"}, {"isUser": true, "text": "what year was super bootcamp?"}, {"isUser": false, "query": "SELECT Year FROM concert WHERE concert_Name  =  \"Super bootcamp\"", "predict": "SELECT Year\nFROM concert\nWHERE concert_Name = 'Super Bootcamp';"}, {"isUser": true, "text": "what is the Stadium ID for Super bootcamp?"}, {"isUser": false, "query": "SELECT Stadium_ID FROM concert WHERE concert_Name  =  \"Super bootcamp\"", "predict": "SELECT Stadium_ID\nFROM concert\nWHERE concert_Name = 'Super Bootcamp';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What is the population in Asian continent?"}, {"isUser": false, "query": "SELECT sum ( Population )  FROM country where Continent  =  'Asia'", "predict": "SELECT SUM(Population) \nFROM country \nWHERE Continent = 'Asia';"}, {"isUser": true, "text": "Which language has 9.5%?"}, {"isUser": false, "query": "SELECT Language FROM countrylanguage where Percentage  =  9.5", "predict": "SELECT Language \nFROM countrylanguage \nWHERE Percentage = 9.5;"}, {"isUser": true, "text": "What is the life expectancy rate in Angola?"}, {"isUser": false, "query": "SELECT LifeExpectancy FROM country where LocalName  =  'Angola'", "predict": "SELECT LifeExpectancy \nFROM country \nWHERE Name = 'Angola';"}, {"isUser": true, "text": "What is the GNP rate of Aruba? | did you mean the GNP or GNP old? | GNP"}, {"isUser": false, "query": "SELECT GNP FROM country where LocalName  =  'Angola'", "predict": "SELECT GNP \nFROM country \nWHERE Name = 'Aruba';"}, {"isUser": true, "text": "What is the GNP old of Afghanistan?"}, {"isUser": false, "query": "SELECT GNPOld FROM country where Name  =  'Afghanistan'", "predict": "SELECT GNPOld \nFROM country \nWHERE Name = 'Afghanistan';"}]},
{"db_name": "concert_singer", "turns": [{"isUser": true, "text": "What are the names of the singers whose song release year is greater than the average song release year"}, {"isUser": false, "query": "SELECT song_name FROM singer WHERE song_release_year  >   ( SELECT avg ( song_release_year )  FROM singer ) ", "predict": "SELECT Name\nFROM singer\nWHERE Song_release_year > (SELECT AVG(CAST(Song_release_year AS INTEGER)) FROM singer);"}, {"isUser": true, "text": "What is the average song release year?"}, {"isUser": false, "query": "SELECT avg ( song_release_year )  FROM singer", "predict": "SELECT AVG(CAST(Song_release_year AS INTEGER)) AS Average_Song_Release_Year\nFROM singer;"}, {"isUser": true, "text": "List the songs in increasing release years | Do you want the names of the songs ordered by their release year? | Yes I do"}, {"isUser": false, "query": "SELECT song_name from singer order by song_release_year", "predict": "SELECT Song_Name, Song_release_year\nFROM singer\nORDER BY CAST(Song_release_year AS INTEGER) ASC;"}, {"isUser": true, "text": "List all song names by singers above the average age"}, {"isUser": false, "query": "SELECT song_name FROM singer WHERE age  >   ( SELECT avg ( age )  FROM singer ) ", "predict": "SELECT Song_Name\nFROM singer\nWHERE Age > (SELECT AVG(Age) FROM singer);"}]},
{"db_name": "orchestra", "turns": [{"isUser": true, "text": "Please answer the question.what is the orchestra of conductor? | Do you want all the orchestras of all conductors? | yes"}, {"isUser": false, "query": "SELECT T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID   =   T2.Conductor_ID", "predict": "SELECT c.Name AS Conductor, o.Orchestra AS Orchestra\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nORDER BY c.Name;"}, {"isUser": true, "text": "what is the name of all conductors?"}, {"isUser": false, "query": "SELECT Name FROM conductor", "predict": "SELECT Name\nFROM conductor;"}, {"isUser": true, "text": "What is the age of Colin Davis?"}, {"isUser": false, "query": "SELECT Age FROM conductor WHERE Name  =  \"Colin Davis\"", "predict": "SELECT Age\nFROM conductor\nWHERE Name = 'Colin Davis';"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "how many students there"}, {"isUser": false, "query": "SELECT count ( * )  FROM Students", "predict": "SELECT COUNT(student_id) AS total_students\nFROM Students;"}, {"isUser": true, "text": "what is the first name of student id 3"}, {"isUser": false, "query": "SELECT first_name FROM Students where student_id = 3", "predict": "SELECT first_name\nFROM Students\nWHERE student_id = 3;"}, {"isUser": true, "text": "what is email address of student id 2"}, {"isUser": false, "query": "SELECT email_address FROM Students where student_id = 2", "predict": "SELECT email_address\nFROM Students\nWHERE student_id = 2;"}, {"isUser": true, "text": "how many student enrolment there"}, {"isUser": false, "query": "SELECT count ( * )  FROM Student_Enrolment", "predict": "SELECT COUNT(student_enrolment_id) AS total_student_enrolments\nFROM Student_Enrolment;"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "What are the templates ever used by any document?"}, {"isUser": false, "query": "SELECT * FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID   =   T2.template_ID", "predict": "SELECT DISTINCT Templates.Template_ID\nFROM Templates\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID;"}, {"isUser": true, "text": "What are the template type descriptions for these templates?"}, {"isUser": false, "query": "SELECT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "predict": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description\nFROM Ref_Template_Types\nINNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID;"}, {"isUser": true, "text": "Can I get the distinct template type descriptions for these templates?"}, {"isUser": false, "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "predict": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description\nFROM Ref_Template_Types\nINNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "Which country has the largest area? | Russian Federation is the name of the country with the largest area. | And what is the population of this country?"}, {"isUser": false, "query": "SELECT Population FROM country ORDER BY SurfaceArea DESC LIMIT 1", "predict": "SELECT c.Name AS Country, c.SurfaceArea AS Area, cl.Percentage AS Population\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);"}, {"isUser": true, "text": "Who is it's leader?"}, {"isUser": false, "query": "SELECT HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "predict": "SELECT HeadOfState\nFROM country\nWHERE Name = 'Russian Federation';"}, {"isUser": true, "text": "Yes, on which continent is this country located?"}, {"isUser": false, "query": "SELECT Continent FROM country ORDER BY SurfaceArea DESC LIMIT 1", "predict": "SELECT Continent\nFROM country\nWHERE Name = 'Russian Federation';"}]},
{"db_name": "poker_player", "turns": [{"isUser": true, "text": "Name players whose earnings are more than 300000. | Do you mean the names of the poker players whose earnings is more than 300000? | yes names"}, {"isUser": false, "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T2.Earnings  >  300000", "predict": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE pp.Earnings > 300000;"}, {"isUser": true, "text": "how many poker players?"}, {"isUser": false, "query": "SELECT count ( Poker_Player_ID )  from poker_player", "predict": "SELECT COUNT(*) AS Total_Poker_Players\nFROM poker_player;"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "how many students live in North Carolina?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina'", "predict": "SELECT COUNT(*) \nFROM Students \nJOIN Addresses ON Students.current_address_id = Addresses.address_id \nWHERE Addresses.state_province_county = 'North Carolina';"}, {"isUser": true, "text": "What are their first and last names?"}, {"isUser": false, "query": "SELECT T1.first_name,T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina'", "predict": "SELECT first_name, last_name\nFROM Students \nJOIN Addresses ON Students.current_address_id = Addresses.address_id \nWHERE Addresses.state_province_county = 'North Carolina';"}, {"isUser": true, "text": "Which of those do not have degree program id?"}, {"isUser": false, "query": "SELECT T1.first_name, T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT T3.first_name, T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id", "predict": "SELECT first_name, last_name\nFROM Students \nJOIN Addresses ON Students.current_address_id = Addresses.address_id \nWHERE Addresses.state_province_county = 'North Carolina' \nAND Students.student_id NOT IN (SELECT student_id FROM Student_Enrolment);"}]},
{"db_name": "voter_1", "turns": [{"isUser": true, "text": "What are all the area codes?"}, {"isUser": false, "query": "select area_code from AREA_CODE_STATE", "predict": "SELECT area_code\nFROM AREA_CODE_STATE;"}, {"isUser": true, "text": "What area codes voted for the contestant 'Tabatha Gehling'?"}, {"isUser": false, "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling'", "predict": "SELECT DISTINCT acs.area_code\nFROM AREA_CODE_STATE acs\nJOIN VOTES v ON acs.state = v.state\nJOIN CONTESTANTS c ON v.contestant_number = c.contestant_number\nWHERE c.contestant_name = 'Tabatha Gehling';"}, {"isUser": true, "text": "What area codes voted for the contestant 'Kelly Clauss'?"}, {"isUser": false, "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "predict": "SELECT DISTINCT acs.area_code\nFROM AREA_CODE_STATE acs\nJOIN VOTES v ON acs.state = v.state\nJOIN CONTESTANTS c ON v.contestant_number = c.contestant_number\nWHERE c.contestant_name = 'Kelly Clauss';"}, {"isUser": true, "text": "What area codes voted for both the contestant 'Kelly Clauss' and 'Tabatha Gehling'?"}, {"isUser": false, "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "predict": "SELECT DISTINCT acs.area_code\nFROM AREA_CODE_STATE acs\nJOIN VOTES v ON acs.state = v.state\nJOIN CONTESTANTS c ON v.contestant_number = c.contestant_number\nWHERE c.contestant_name = 'Kelly Clauss' OR c.contestant_name = 'Tabatha Gehling'\nGROUP BY acs.area_code\nHAVING COUNT(DISTINCT c.contestant_number) = 2;"}]},
{"db_name": "employee_hire_evaluation", "turns": [{"isUser": true, "text": "how many shop are presented on the table"}, {"isUser": false, "query": "SELECT count ( * )  FROM shop", "predict": "SELECT COUNT(*) AS total_shops\nFROM shop;"}, {"isUser": true, "text": "list out the shop names"}, {"isUser": false, "query": "SELECT name FROM shop", "predict": "SELECT Name\nFROM shop;"}, {"isUser": true, "text": "what is the location of FC Haka"}, {"isUser": false, "query": "SELECT location FROM shop where name  =  \"FC Haka\"", "predict": "SELECT Location\nFROM shop\nWHERE Name = 'FC Haka';"}, {"isUser": true, "text": "what is the number of products in HJK"}, {"isUser": false, "query": "SELECT Number_products FROM shop where name  =  \"HJK\"", "predict": "SELECT Number_products\nFROM shop\nWHERE Name = 'HJK';"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "Hello!  Can you list all of the deparatment names and department IDs?"}, {"isUser": false, "query": "select department_id,department_name from Departments", "predict": "SELECT department_id, department_name\nFROM Departments;"}, {"isUser": true, "text": "Cool!  Can you show me all of the degree summary names associated with this department?"}, {"isUser": false, "query": "select T2.degree_summary_name from Departments as T1 JOIN Degree_Programs as T2 on T1.department_id  =  T2.department_id where T1.department_name  =  'statistics'", "predict": "SELECT department_id, degree_summary_name\nFROM Degree_Programs;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "What are the ids of the professionals?"}, {"isUser": false, "query": "SELECT professional_id  FROM Professionals", "predict": "SELECT professional_id\nFROM Professionals;"}, {"isUser": true, "text": "What is the role of each of the professionals?"}, {"isUser": false, "query": "SELECT professional_id, role_code  FROM Professionals", "predict": "SELECT professional_id, role_code\nFROM Professionals;"}, {"isUser": true, "text": "Could I please have their email address and which of them did not perform any operate any treatment on dogs."}, {"isUser": false, "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "predict": "SELECT email_address\nFROM Professionals\nWHERE professional_id NOT IN (SELECT professional_id FROM Treatments);"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "Can you tell me the ID of the american motor company ?"}, {"isUser": false, "query": "SELECT Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.FullName   =   'American Motor Company'", "predict": "SELECT Id\nFROM car_makers\nWHERE Country = 'USA';"}, {"isUser": true, "text": "Can you tell me the model id of the maker amc ?"}, {"isUser": false, "query": "SELECT ModelId FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.Maker   =   'amc'", "predict": "SELECT ModelId\nFROM model_list\nWHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'amc');"}, {"isUser": true, "text": "Who is maker for the ID number 2 ? | Did you mean Id or ModelId? | I mean id"}, {"isUser": false, "query": "SELECT DISTINCT ( T1.Maker )  FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.Id  =  2", "predict": "SELECT Maker\nFROM car_makers\nWHERE Id = 2;"}, {"isUser": true, "text": "How many car models were produced by the maker with the full name American Motor Company ?"}, {"isUser": false, "query": "SELECT count ( * )  FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.FullName   =   'American Motor Company'", "predict": "SELECT COUNT(*)\nFROM model_list\nWHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company');"}]},
{"db_name": "course_teach", "turns": [{"isUser": true, "text": "list the name of the teachers and the courses assigned for them to teach"}, {"isUser": false, "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID", "predict": "SELECT teacher.Name, course.Course\nFROM teacher\nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nJOIN course ON course_arrange.Course_ID = course.Course_ID;"}, {"isUser": true, "text": "arrange this list with the teachers name in ascending order"}, {"isUser": false, "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID ORDER BY T3.Name", "predict": "SELECT teacher.Name, course.Course\nFROM teacher\nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nJOIN course ON course_arrange.Course_ID = course.Course_ID\nORDER BY teacher.Name ASC;"}, {"isUser": true, "text": "include teachers id in tha same list"}, {"isUser": false, "query": "SELECT T3.Name ,  T2.Course, T1.teacher_ID FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID ORDER BY T3.Name", "predict": "SELECT teacher.Teacher_ID, teacher.Name, course.Course\nFROM teacher\nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nJOIN course ON course_arrange.Course_ID = course.Course_ID\nORDER BY teacher.Name ASC;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "can you show countries name?"}, {"isUser": false, "query": "SELECT Name FROM country", "predict": "SELECT Name\nFROM country;"}, {"isUser": true, "text": "what is the countries government form?"}, {"isUser": false, "query": "SELECT GovernmentForm FROM country", "predict": "SELECT Name, GovernmentForm\nFROM country;"}, {"isUser": true, "text": "can you show me the countries' surface area?"}, {"isUser": false, "query": "SELECT SurfaceArea FROM country", "predict": "SELECT Name, SurfaceArea\nFROM country;"}]},
{"db_name": "tvshow", "turns": [{"isUser": true, "text": "IN WHAT LANGUAGE SKY MUSIC AVAILABLE?"}, {"isUser": false, "query": "SELECT Language FROM TV_Channel where series_name = 'Sky Music'", "predict": "SELECT Language\nFROM TV_Channel\nWHERE series_name = 'Sky Music';"}, {"isUser": true, "text": "WHAT IS THE PACKAGE OPTION OF ALL CHANNELS?"}, {"isUser": false, "query": "SELECT distinct Package_Option FROM TV_Channel", "predict": "SELECT Package_Option\nFROM TV_Channel;"}, {"isUser": true, "text": "what is the content of all the channels?"}, {"isUser": false, "query": "SELECT distinct  Content FROM TV_Channel", "predict": "SELECT Content\nFROM TV_Channel;"}]},
{"db_name": "orchestra", "turns": [{"isUser": true, "text": "Can you show me orchestra names and the major record formats?"}, {"isUser": false, "query": "SELECT orchestra, Major_Record_Format  FROM orchestra", "predict": "SELECT Orchestra, Major_Record_Format\nFROM orchestra;"}, {"isUser": true, "text": "I want a list of orchestra names in ascending order."}, {"isUser": false, "query": "SELECT orchestra FROM orchestra order by orchestra", "predict": "SELECT Orchestra\nFROM orchestra\nORDER BY Orchestra ASC;"}, {"isUser": true, "text": "Hmm, please show me the record formats of orchestras in ascending order of count."}, {"isUser": false, "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT ( * )  ASC", "predict": "SELECT Major_Record_Format, COUNT(*) AS Count\nFROM orchestra\nGROUP BY Major_Record_Format\nORDER BY Count ASC;"}]},
{"db_name": "museum_visit", "turns": [{"isUser": true, "text": "how many museum id in the list?"}, {"isUser": false, "query": "SELECT count ( Museum_ID  )  FROM museum", "predict": "SELECT COUNT(DISTINCT Museum_ID) AS Num_of_Museums\nFROM museum;"}, {"isUser": true, "text": "find the staff count in the museum with an id 3?"}, {"isUser": false, "query": "SELECT Num_of_Staff FROM museum where museum.Museum_ID  =  3", "predict": "SELECT Num_of_Staff\nFROM museum\nWHERE Museum_ID = 3;"}, {"isUser": true, "text": "which year open the capital plaza museum?"}, {"isUser": false, "query": "SELECT Open_year FROM museum where Name = 'Capital Plaza Museum'", "predict": "SELECT Open_Year\nFROM museum\nWHERE Name = 'Capital Plaza Museum';"}]},
{"db_name": "museum_visit", "turns": [{"isUser": true, "text": "List the names of all visitors who visited some museums more than once, please."}, {"isUser": false, "query": "SELECT  t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id GROUP BY t1.id HAVING count ( * )   >  1", "predict": "SELECT DISTINCT v.Name\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nGROUP BY vi.visitor_ID\nHAVING COUNT(DISTINCT vi.Museum_ID) > 1;"}, {"isUser": true, "text": "Can you list their IDs and ages too?"}, {"isUser": false, "query": "SELECT  t1.name, t1.id, t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id GROUP BY t1.id HAVING count ( * )   >  1", "predict": "SELECT v.ID, v.Age, v.Name\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nGROUP BY vi.visitor_ID\nHAVING COUNT(DISTINCT vi.Museum_ID) > 1;"}, {"isUser": true, "text": "What are the names and level of membership for all visitors over the age of 20?"}, {"isUser": false, "query": "SELECT  name, Level_of_membership FROM visitor where age > 20", "predict": "SELECT v.Name, v.Level_of_membership\nFROM visitor v\nWHERE v.Age > 20;"}, {"isUser": true, "text": "What are the names and ages of all the customers who spent over 100?"}, {"isUser": false, "query": "SELECT  t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id where t2.total_spent > 100", "predict": "SELECT v.Name, v.Age\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nWHERE vi.Total_spent > 100;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "How many government forms are in the table?"}, {"isUser": false, "query": "SELECT count ( GovernmentForm )  FROM country", "predict": "SELECT COUNT(DISTINCT GovernmentForm) AS NumberOfGovernmentForms\nFROM country;"}, {"isUser": true, "text": "How many of those have an average life expectancy that is longer than 72?"}, {"isUser": false, "query": "SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72", "predict": "SELECT COUNT(DISTINCT GovernmentForm) AS NumberOfGovernmentForms\nFROM country\nWHERE LifeExpectancy > 72;"}, {"isUser": true, "text": "What is the population of each of those government forms?"}, {"isUser": false, "query": "SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72", "predict": "SELECT GovernmentForm, SUM(Population) AS TotalPopulation\nFROM country\nGROUP BY GovernmentForm;"}, {"isUser": true, "text": "What is the life expectancy for each of these?"}, {"isUser": false, "query": "SELECT avg ( LifeExpectancy )  FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72", "predict": "SELECT GovernmentForm, AVG(LifeExpectancy) AS AverageLifeExpectancy\nFROM country\nGROUP BY GovernmentForm;"}, {"isUser": true, "text": "Which government forms and their populations are those for? | Sorry, I cannot understand this question. Can you elaborate? | Which government forms have an average life expectancy over 72, and what are their populations?"}, {"isUser": false, "query": "SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72", "predict": "SELECT GovernmentForm, SUM(Population) AS TotalPopulation\nFROM country\nWHERE LifeExpectancy > 72\nGROUP BY GovernmentForm;"}]},
{"db_name": "museum_visit", "turns": [{"isUser": true, "text": "Whats the level of membership customer id 1 has?"}, {"isUser": false, "query": "SELECT Level_of_membership FROM visitor WHERE ID  =  1", "predict": "SELECT Level_of_membership\nFROM visitor\nWHERE ID = 1;"}, {"isUser": true, "text": "What is the name of customer id 1?"}, {"isUser": false, "query": "SELECT Name FROM visitor WHERE ID  =  1", "predict": "SELECT Name\nFROM visitor\nWHERE ID = 1;"}, {"isUser": true, "text": "What is the age of customer id 1?"}, {"isUser": false, "query": "SELECT Age FROM visitor WHERE ID  =  1", "predict": "SELECT Age\nFROM visitor\nWHERE ID = 1;"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "Hi, What Airline has the largest number of flights?"}, {"isUser": false, "query": "SELECT T1.airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline ORDER BY count ( * )  desc LIMIT 1", "predict": "SELECT Airline, COUNT(*) AS NumFlights\nFROM flights\nGROUP BY Airline\nORDER BY NumFlights DESC\nLIMIT 1;"}, {"isUser": true, "text": "What is the Airline with the fewest number of flights?"}, {"isUser": false, "query": "SELECT T1.airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline ORDER BY count ( * )  asc LIMIT 1", "predict": "SELECT Airline, COUNT(*) AS NumFlights\nFROM flights\nGROUP BY Airline\nORDER BY NumFlights\nLIMIT 1;"}, {"isUser": true, "text": "What is the abbreviation of AirTran Airways?"}, {"isUser": false, "query": "SELECT abbreviation from airlines where airline =  \"AirTran Airways\"", "predict": "SELECT Abbreviation\nFROM airlines\nWHERE Airline = 'AirTran Airways';"}, {"isUser": true, "text": "Ah, and what is the country of AirTran Airways?"}, {"isUser": false, "query": "SELECT country from airlines where airline =  \"AirTran Airways\"", "predict": "SELECT Country\nFROM airlines\nWHERE Airline = 'AirTran Airways';"}]},
{"db_name": "battle_death", "turns": [{"isUser": true, "text": "Hi there!  Can you show me a list of all of the battle ids and the corresponding battle names?"}, {"isUser": false, "query": "SELECT T1.id ,  T1.name FROM battle AS T1", "predict": "SELECT id, name\nFROM battle;"}, {"isUser": true, "text": "Great!  Can you filter this list to show just the battle IDs and battle names of the battles that had more than 10 deaths associated with them?"}, {"isUser": false, "query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle JOIN death AS T3 ON T2.id   =   T3.caused_by_ship_id GROUP BY T1.id HAVING sum ( T3.killed )   >  10", "predict": "SELECT b.id, b.name\nFROM battle b\nJOIN death d ON b.id = d.caused_by_ship_id\nGROUP BY b.id, b.name\nHAVING SUM(d.killed) > 10;"}, {"isUser": true, "text": "Wonderful!  Can you update this list to include the date of each of these three battles?"}, {"isUser": false, "query": "SELECT T1.id ,  T1.name ,T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle JOIN death AS T3 ON T2.id   =   T3.caused_by_ship_id GROUP BY T1.id HAVING sum ( T3.killed )   >  10", "predict": "SELECT b.id, b.name, b.date\nFROM battle b\nJOIN death d ON b.id = d.caused_by_ship_id\nGROUP BY b.id, b.name, b.date\nHAVING SUM(d.killed) > 10;"}]},
{"db_name": "pets_1", "turns": [{"isUser": true, "text": "Hey can you tell me the average age for cats?"}, {"isUser": false, "query": "SELECT avg ( pet_age )  FROM pets WHERE PetType  =  'cat'", "predict": "SELECT AVG(pet_age) AS average_age\nFROM Pets\nWHERE PetType = 'cat';"}, {"isUser": true, "text": "What about for dogs?"}, {"isUser": false, "query": "SELECT avg ( pet_age )  FROM pets WHERE PetType  =  'dog'", "predict": "SELECT AVG(pet_age) AS average_age\nFROM Pets\nWHERE PetType = 'dog';"}, {"isUser": true, "text": "Thanks! Now what's the maximum age for dogs?"}, {"isUser": false, "query": "SELECT max ( pet_age )  FROM pets WHERE PetType  =  'dog'", "predict": "SELECT MAX(pet_age) AS max_age\nFROM Pets\nWHERE PetType = 'dog';"}, {"isUser": true, "text": "And the maximum age for cats and dogs?"}, {"isUser": false, "query": "SELECT max ( pet_age )  ,  pettype FROM pets GROUP BY pettype", "predict": "SELECT PetType, MAX(pet_age) AS max_age\nFROM Pets\nWHERE PetType IN ('cat', 'dog')\nGROUP BY PetType;"}, {"isUser": true, "text": "So what's the maximum age for just cats?"}, {"isUser": false, "query": "SELECT max ( pet_age )  FROM pets WHERE PetType  =  'cat'", "predict": "SELECT MAX(pet_age) AS max_age\nFROM Pets\nWHERE PetType = 'cat';"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "What are the full name of amc? | Did you mean the full name of the car maker amc? | Yes"}, {"isUser": false, "query": "select fullname from car_makers where maker  =  \"amc\"", "predict": "SELECT FullName\nFROM car_makers\nWHERE Maker = 'amc';"}, {"isUser": true, "text": "What kind of car is produced in Germany? | Did you mean the car models produced in Germany? | Yes"}, {"isUser": false, "query": "SELECT T3.model FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T1.countryname  =  \"germany\"", "predict": "SELECT DISTINCT model_list.Model\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Id\nWHERE car_makers.Country = 'Germany';"}, {"isUser": true, "text": "What are the model id of BMW?"}, {"isUser": false, "query": "SELECT modelid from model_list where model  =  \"bmw\"", "predict": "SELECT ModelId\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Id\nWHERE car_makers.Maker = 'BMW';"}, {"isUser": true, "text": "What are the id and names of the countries which have more than 3 cars makers or produce the 'flat' model?"}, {"isUser": false, "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country GROUP BY T1.countryId HAVING count ( * )   >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T3.Model   =   'fiat'", "predict": "SELECT DISTINCT countries.CountryId, countries.CountryName\nFROM countries\nJOIN car_makers ON countries.CountryName = car_makers.Country\nWHERE car_makers.Country IN (\n    SELECT Country\n    FROM car_makers\n    GROUP BY Country\n    HAVING COUNT(DISTINCT Maker) > 3\n    OR EXISTS (\n        SELECT 1\n        FROM model_list\n        WHERE model_list.Model = 'flat'\n        AND model_list.Maker = car_makers.Id\n    )\n);"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "What is the phone number of the professional who has done the most treatment."}, {"isUser": false, "query": "SELECT T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id order by count ( * )   desc limit 1", "predict": "SELECT p.home_phone\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id\nORDER BY COUNT(t.treatment_id) DESC\nLIMIT 1;"}, {"isUser": true, "text": "What are the professional id of the professionals who have done at least two types of treatments?"}, {"isUser": false, "query": "SELECT T1.professional_id  FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id HAVING count ( * )    > =    2", "predict": "SELECT professional_id\nFROM Treatments\nGROUP BY professional_id\nHAVING COUNT(DISTINCT treatment_type_code) >= 2;"}, {"isUser": true, "text": "How many professionals have done only one treatment?"}, {"isUser": false, "query": "select count ( * )  from  ( SELECT *  FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id HAVING count ( * )    =  1 ) ", "predict": "SELECT COUNT(professional_id)\nFROM (\n    SELECT professional_id\n    FROM Treatments\n    GROUP BY professional_id\n    HAVING COUNT(treatment_id) = 1\n) AS subquery;"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "WHAT IS THE DOCUMENT ID WITH 1 TO 2 PARAGRAPH?"}, {"isUser": false, "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count ( * )  BETWEEN 1 AND 2", "predict": "SELECT Document_ID\nFROM (\n    SELECT Document_ID, COUNT(Paragraph_ID) AS Paragraph_Count\n    FROM Paragraphs\n    GROUP BY Document_ID\n) AS Paragraph_Counts\nWHERE Paragraph_Count BETWEEN 1 AND 2;"}, {"isUser": true, "text": "WHAT IS THE DOCUMENT TEXT | Did you mean the \tParagraph Text? | YES"}, {"isUser": false, "query": "SELECT Paragraph_Text FROM Paragraphs GROUP BY document_id HAVING count ( * )  BETWEEN 1 AND 2", "predict": "SELECT p.Paragraph_Text\nFROM Paragraphs p\nWHERE p.Document_ID IN (\n    SELECT Document_ID\n    FROM (\n        SELECT Document_ID, COUNT(Paragraph_ID) AS Paragraph_Count\n        FROM Paragraphs\n        GROUP BY Document_ID\n    ) AS Paragraph_Counts\n    WHERE Paragraph_Count BETWEEN 1 AND 2\n);"}]},
{"db_name": "course_teach", "turns": [{"isUser": true, "text": "Who is the youngest teacher?"}, {"isUser": false, "query": "select name from teacher order by Age asc limit 1", "predict": "SELECT Name\nFROM teacher\nORDER BY Age ASC\nLIMIT 1;"}, {"isUser": true, "text": "What is his hometown?"}, {"isUser": false, "query": "select Hometown from teacher order by Age asc limit 1", "predict": "SELECT Hometown\nFROM teacher\nORDER BY Age ASC\nLIMIT 1;"}, {"isUser": true, "text": "What is the age of Vicente Carretero?"}, {"isUser": false, "query": "select Age from teacher where Name = 'Vicente Carretero'", "predict": "SELECT Age\nFROM teacher\nWHERE Name = 'Vicente Carretero';"}]},
{"db_name": "pets_1", "turns": [{"isUser": true, "text": "That are available"}, {"isUser": false, "query": "SELECT fname, lname FROM student WHERE sex   =   'F'", "predict": "SELECT * \nFROM Student\nWHERE StuID IN (SELECT StuID FROM Has_Pet)\nAND StuID IN (SELECT StuID FROM Pets);"}, {"isUser": true, "text": "What are the city codes for all available students"}, {"isUser": false, "query": "SELECT DISTINCT city_code FROM student", "predict": "SELECT DISTINCT city_code\nFROM Student\nWHERE StuID IN (SELECT StuID FROM Has_Pet)\nAND StuID IN (SELECT StuID FROM Pets);"}, {"isUser": true, "text": "Can i have the weight of the pets that were raised by female student"}, {"isUser": false, "query": "SELECT T3.weight FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T2.petid   =   T3.petid WHERE T1.sex   =   'F'", "predict": "SELECT p.weight\nFROM Pets p\nJOIN Has_Pet hp ON p.PetID = hp.PetID\nJOIN Student s ON hp.StuID = s.StuID\nWHERE s.Sex = 'female';"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "What are the cars with the lowest horsepower? | Do you mean the id of the car with the lowest horsepower? | Yes please."}, {"isUser": false, "query": "SELECT id from cars_data order by horsepower limit 1", "predict": "SELECT Id\nFROM cars_data\nWHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data);"}, {"isUser": true, "text": "What is the average horsepower of all the cars?"}, {"isUser": false, "query": "SELECT avg ( horsepower ) from cars_data", "predict": "SELECT AVG(Horsepower) AS AverageHorsepower\nFROM cars_data;"}, {"isUser": true, "text": "Can you list the car ids of all the cars with lower than the average horsepower?"}, {"isUser": false, "query": "SELECT T1.Id FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId WHERE T1.Horsepower <  ( SELECT avg ( Horsepower )  FROM CARS_DATA ) ", "predict": "SELECT Id\nFROM cars_data\nWHERE Horsepower < (SELECT AVG(Horsepower) FROM cars_data);"}, {"isUser": true, "text": "Could you add the model and make of each of those into the table please?"}, {"isUser": false, "query": "SELECT T1.Id ,T2.model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId WHERE T1.Horsepower <  ( SELECT avg ( Horsepower )  FROM CARS_DATA ) ", "predict": "SELECT c.Id, m.Model, cm.Maker\nFROM cars_data c\nJOIN model_list m ON c.Id = m.ModelId\nJOIN car_names cn ON m.Maker = cn.MakeId\nJOIN car_makers cm ON cn.Make = cm.Maker\nWHERE c.Horsepower < (SELECT AVG(Horsepower) FROM cars_data);"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "Hi what is the latest transcript?"}, {"isUser": false, "query": "SELECT transcript_id FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "predict": "SELECT *\nFROM Transcripts\nORDER BY transcript_date DESC\nLIMIT 1;"}, {"isUser": true, "text": "what is the date of transcript number 5?"}, {"isUser": false, "query": "SELECT transcript_date FROM Transcripts WHERE transcript_id  =  5", "predict": "SELECT transcript_date\nFROM Transcripts\nWHERE transcript_id = 5;"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "Show me the date and id of the transcript with at least 2 course results."}, {"isUser": false, "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id   =   T2.transcript_id GROUP BY T1.transcript_id HAVING count ( * )    > =    2", "predict": "SELECT t.transcript_id, t.transcript_date\nFROM Transcripts t\nJOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id\nGROUP BY t.transcript_id\nHAVING COUNT(tc.student_course_id) >= 2;"}, {"isUser": true, "text": "Show me other details of those transcripts | Do you mean other details of those transcripts with at least 2 course results? | Yes!"}, {"isUser": false, "query": "SELECT T2.other_details FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id   =   T2.transcript_id GROUP BY T1.transcript_id HAVING count ( * )    > =    2", "predict": "SELECT t.transcript_id, t.transcript_date, t.other_details\nFROM Transcripts t\nJOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id\nGROUP BY t.transcript_id\nHAVING COUNT(tc.student_course_id) >= 2;"}, {"isUser": true, "text": "Show me transcript dates of those transcripts"}, {"isUser": false, "query": "SELECT T2.transcript_date FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id   =   T2.transcript_id GROUP BY T1.transcript_id HAVING count ( * )    > =    2", "predict": "SELECT t.transcript_date\nFROM Transcripts t\nJOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id\nGROUP BY t.transcript_id\nHAVING COUNT(tc.student_course_id) >= 2;"}]},
{"db_name": "network_1", "turns": [{"isUser": true, "text": "Hello!  Can you see all of the ids of the high school students?"}, {"isUser": false, "query": "select student_id from Friend", "predict": "SELECT ID\nFROM Highschooler;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "Please list the emails of all the professionals who live in the state of Hawaii?"}, {"isUser": false, "query": "SELECT email_address FROM Professionals WHERE state   =   'Hawaii'", "predict": "SELECT email_address\nFROM Professionals\nWHERE state = 'Hawaii';"}, {"isUser": true, "text": "Please list the emails of all the professionals who live in the state of Wisconsin?"}, {"isUser": false, "query": "SELECT email_address FROM Professionals WHERE state   =   'Wisconsin'", "predict": "SELECT email_address\nFROM Professionals\nWHERE state = 'Wisconsin';"}, {"isUser": true, "text": "Could you tell me the first names of all employees with the role code \" Employee\"?"}, {"isUser": false, "query": "SELECT first_name FROM Professionals WHERE role_code   =   'Employee'", "predict": "SELECT first_name\nFROM Professionals\nWHERE role_code = 'Employee';"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "Can you list the semester names and their enrollments?"}, {"isUser": false, "query": "SELECT T1.semester_name, count ( * )  from semesters as T1 join student_enrolment as T2 on T1.semester_id  =  T2.semester_id group by T2.semester_id", "predict": "SELECT s.semester_name, COUNT(se.student_enrolment_id) AS enrollment_count\nFROM Semesters s\nLEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id\nGROUP BY s.semester_name;"}, {"isUser": true, "text": "Which semester has the most enrollments?"}, {"isUser": false, "query": "SELECT T1.semester_name from semesters as T1 join student_enrolment as T2 on T1.semester_id  =  T2.semester_id group by T2.semester_id order by count ( * )  desc limit 1", "predict": "SELECT s.semester_name, COUNT(se.student_enrolment_id) AS enrollment_count\nFROM Semesters s\nLEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id\nGROUP BY s.semester_name\nORDER BY enrollment_count DESC\nLIMIT 1;"}, {"isUser": true, "text": "Can you list the student enrollment ids and the degree program ids?"}, {"isUser": false, "query": "SELECT student_enrolment_id, degree_program_id from  Student_Enrolment", "predict": "SELECT student_enrolment_id, degree_program_id\nFROM Student_Enrolment;"}, {"isUser": true, "text": "Hmm, which semesters do not have any student enrolled? I want the semester names."}, {"isUser": false, "query": "sELECT semester_name FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ", "predict": "SELECT s.semester_name\nFROM Semesters s\nLEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id\nWHERE se.student_enrolment_id IS NULL;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What are all of the countries where English isn't the official language?"}, {"isUser": false, "query": "SELECT name FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" AND T2.IsOfficial   =   \"T\" ) ", "predict": "SELECT DISTINCT c.Name\nFROM country c\nWHERE c.Code NOT IN (\n    SELECT cl.CountryCode\n    FROM countrylanguage cl\n    WHERE cl.Language = 'English' AND cl.IsOfficial = 'T'\n)"}, {"isUser": true, "text": "What is the average life expectancy in each of those countries?"}, {"isUser": false, "query": "SELECT avg ( LifeExpectancy )  FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" AND T2.IsOfficial   =   \"T\" ) ", "predict": "SELECT c.Name, AVG(c.LifeExpectancy) AS AverageLifeExpectancy\nFROM country c\nWHERE c.Code NOT IN (\n    SELECT cl.CountryCode\n    FROM countrylanguage cl\n    WHERE cl.Language = 'English' AND cl.IsOfficial = 'T'\n)\nGROUP BY c.Name"}, {"isUser": true, "text": "* I have left the chat *"}, {"isUser": false, "query": "SELECT avg ( LifeExpectancy )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" AND T2.IsOfficial   =   \"T\"", "predict": "SELECT c.Name, AVG(c.LifeExpectancy) AS AverageLifeExpectancy\nFROM country c\nWHERE c.Code NOT IN (\n    SELECT cl.CountryCode\n    FROM countrylanguage cl\n    WHERE cl.Language = 'English' AND cl.IsOfficial = 'T'\n)\nGROUP BY c.Name"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "Find Flight from CVO to SNA"}, {"isUser": false, "query": "SELECT FlightNo FROM flights where SourceAirport = \"CVO\" and DestAirport = \"SNA\"", "predict": "SELECT * \nFROM flights \nWHERE SourceAirport = 'CVO' AND DestAirport = 'SNA';"}, {"isUser": true, "text": "Flight from CVO to DFW"}, {"isUser": false, "query": "SELECT * FROM flights where SourceAirport = \"CVO\" and DestAirport = \"DFW\"", "predict": "SELECT * \nFROM flights \nWHERE SourceAirport = 'CVO' AND DestAirport = 'DFW';"}, {"isUser": true, "text": "Which airlines have flight from CVO?"}, {"isUser": false, "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline WHERE T2.SourceAirport   =   \" CVO\"", "predict": "SELECT DISTINCT Airline\nFROM flights\nWHERE SourceAirport = 'CVO';"}]},
{"db_name": "tvshow", "turns": [{"isUser": true, "text": "What is the TV Channel of TV series \"A love of a lifetime\"?"}, {"isUser": false, "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id  =  T2.Channel WHERE T2.Episode  =  \"A Love of a Lifetime\"", "predict": "SELECT Channel\nFROM TV_series\nWHERE Episode = 'A love of a lifetime';"}, {"isUser": true, "text": "How may viewers does \"A love of a lifetime\" have?"}, {"isUser": false, "query": "SELECT  Viewers_m FROM  TV_series  where Episode  =  \"A Love of a Lifetime\"", "predict": "SELECT Viewers_m\nFROM TV_series\nWHERE Episode = 'A love of a lifetime';"}, {"isUser": true, "text": "How about the rating of \"A love of a lifetime?\""}, {"isUser": false, "query": "SELECT  Weekly_Rank  FROM  TV_series  where Episode  =  \"A Love of a Lifetime\"", "predict": "SELECT Rating\nFROM TV_series\nWHERE Episode = 'A love of a lifetime';"}, {"isUser": true, "text": "And when was \"A love of a lifetime\" aired?"}, {"isUser": false, "query": "SELECT  Air_Date  FROM  TV_series  where Episode  =  \"A Love of a Lifetime\"", "predict": "SELECT Air_Date\nFROM TV_series\nWHERE Episode = 'A love of a lifetime';"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "What is the player id for the youngest player?"}, {"isUser": false, "query": "SELECT player_id FROM players ORDER BY birth_date desc LIMIT 1", "predict": "SELECT player_id\nFROM players\nORDER BY birth_date DESC\nLIMIT 1;"}, {"isUser": true, "text": "What about the oldest?"}, {"isUser": false, "query": "SELECT player_id FROM players ORDER BY birth_date LIMIT 1", "predict": "SELECT player_id\nFROM players\nORDER BY birth_date\nLIMIT 1;"}, {"isUser": true, "text": "What is their first name and country code?"}, {"isUser": false, "query": "SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1", "predict": "SELECT first_name, country_code\nFROM players\nWHERE player_id = (SELECT player_id\n                   FROM players\n                   ORDER BY birth_date DESC\n                   LIMIT 1);"}]},
{"db_name": "course_teach", "turns": [{"isUser": true, "text": "What're the names of the teachers who teach two or more courses?"}, {"isUser": false, "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID GROUP BY T2.Name HAVING COUNT ( * )    > =    2", "predict": "SELECT Name\nFROM teacher\nWHERE Teacher_ID IN (\n    SELECT Teacher_ID\n    FROM course_arrange\n    GROUP BY Teacher_ID\n    HAVING COUNT(Course_ID) >= 2\n);"}, {"isUser": true, "text": "What is her age and hometown?"}, {"isUser": false, "query": "SELECT T2.age, t2.hometown FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID GROUP BY T2.Name HAVING COUNT ( * )    > =    2", "predict": "SELECT Age, Hometown\nFROM teacher\nWHERE Teacher_ID IN (\n    SELECT Teacher_ID\n    FROM course_arrange\n    GROUP BY Teacher_ID\n    HAVING COUNT(Course_ID) >= 2\n);"}, {"isUser": true, "text": "What grade does the oldest teacher teach?"}, {"isUser": false, "query": "SELECT t1.grade FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID order by t2.age desc limit 1", "predict": "SELECT Grade\nFROM course_arrange\nWHERE Teacher_ID = (\n    SELECT Teacher_ID\n    FROM teacher\n    WHERE Age = (\n        SELECT MAX(Age)\n        FROM teacher\n    )\n);"}]},
{"db_name": "museum_visit", "turns": [{"isUser": true, "text": "List the number of tickets bought in all visits | the total number of tickets bought in all visits is 63. | what is the maximum number of tickets bought in all visits"}, {"isUser": false, "query": "SELECT max ( num_of_ticket )  FROM visit", "predict": "SELECT SUM(Num_of_Ticket) AS Total_Tickets_Bought,\n       MAX(Num_of_Ticket) AS Max_Tickets_Bought\nFROM visit;"}, {"isUser": true, "text": "what is the average number of tickets bought in all visits"}, {"isUser": false, "query": "SELECT avg ( num_of_ticket )  FROM visit", "predict": "SELECT AVG(Num_of_Ticket) AS Average_Tickets_Bought\nFROM visit;"}]},
{"db_name": "battle_death", "turns": [{"isUser": true, "text": "how many ships are there?"}, {"isUser": false, "query": "SELECT   count ( * )   from ship", "predict": "SELECT COUNT(*) FROM ship;"}, {"isUser": true, "text": "what are their names?"}, {"isUser": false, "query": "SELECT  name  from ship", "predict": "SELECT name FROM ship;"}]},
{"db_name": "concert_singer", "turns": [{"isUser": true, "text": "What is the name of the youngest singer?"}, {"isUser": false, "query": "SELECT Name FROM singer ORDER BY age LIMIT 1", "predict": "SELECT Name\nFROM singer\nORDER BY Age\nLIMIT 1;"}, {"isUser": true, "text": "What's the name of the song by Tribal King?"}, {"isUser": false, "query": "SELECT Song_Name FROM singer where name  =  'Tribal King'", "predict": "SELECT Song_Name\nFROM singer\nWHERE Name = 'Tribal King';"}, {"isUser": true, "text": "What was the release year of that song?"}, {"isUser": false, "query": "SELECT song_release_year FROM singer where name  =  'Tribal King'", "predict": "SELECT Song_release_year\nFROM singer\nWHERE Name = 'Tribal King';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "Can you please list all the names of the countries that are in the continent of Europe?"}, {"isUser": false, "query": "SELECT Name FROM country WHERE continent   =   \"Europe\"", "predict": "SELECT Name\nFROM country\nWHERE Continent = 'Europe';"}, {"isUser": true, "text": "Can you please only show those countries with a population of 80000 in the table?"}, {"isUser": false, "query": "SELECT Name FROM country WHERE continent   =   \"Europe\" AND Population   =   \"80000\"", "predict": "SELECT Name\nFROM country\nWHERE Population = 80000;"}]},
{"db_name": "singer", "turns": [{"isUser": true, "text": "who is the singers name? | did you mean List the names of all singers | yes tell me singers name?"}, {"isUser": false, "query": "SELECT Name FROM singer", "predict": "SELECT Name\nFROM singer;"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "What is the full name of the department that has the substring computer in its name?"}, {"isUser": false, "query": "SELECT department_name FROM Departments WHERE department_name LIKE '%computer%'", "predict": "SELECT department_name\nFROM Departments\nWHERE department_name LIKE '%computer%';"}, {"isUser": true, "text": "What's the description of that department?"}, {"isUser": false, "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "predict": "SELECT department_description\nFROM Departments\nWHERE department_name LIKE '%computer%';"}, {"isUser": true, "text": "What is that department's id?"}, {"isUser": false, "query": "SELECT department_id FROM Departments WHERE department_name LIKE '%computer%'", "predict": "SELECT department_id\nFROM Departments\nWHERE department_name LIKE '%computer%';"}, {"isUser": true, "text": "What about for history? | What do you mean exactly? | What are the other details for the department named history?"}, {"isUser": false, "query": "SELECT other_details FROM Departments WHERE department_name  =  \"history\"", "predict": "SELECT department_id\nFROM Departments\nWHERE department_name = 'History';"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "how many cylinders in the cars_data table"}, {"isUser": false, "query": "SELECT sum ( Cylinders )  FROM cars_data", "predict": "SELECT COUNT(DISTINCT Cylinders) AS TotalCylinders\nFROM cars_data;"}, {"isUser": true, "text": "i want to highest weight in the cars_data table"}, {"isUser": false, "query": "SELECT Weight FROM cars_data ORDER BY Weight DESC LIMIT 1", "predict": "SELECT MAX(Weight) AS HighestWeight\nFROM cars_data;"}, {"isUser": true, "text": "how many year in the cars_data table"}, {"isUser": false, "query": "SELECT count ( * )  FROM cars_data", "predict": "SELECT COUNT(DISTINCT Year) AS TotalYears\nFROM cars_data;"}, {"isUser": true, "text": "what is the highest accelerate in the cars_data table"}, {"isUser": false, "query": "SELECT accelerate FROM cars_data ORDER BY accelerate DESC LIMIT 1", "predict": "SELECT MAX(Accelerate) AS HighestAcceleration\nFROM cars_data;"}, {"isUser": true, "text": "i want to highest edispl in the cars_data table"}, {"isUser": false, "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "predict": "SELECT MAX(Edispl) AS HighestEdispl\nFROM cars_data;"}]},
{"db_name": "concert_singer", "turns": [{"isUser": true, "text": "what is the age of Joe sharp"}, {"isUser": false, "query": "SELECT age from singer where name  =  \"Joe Sharp\"", "predict": "SELECT Age\nFROM singer\nWHERE Name = 'Joe Sharp';"}, {"isUser": true, "text": "How many US Singers?"}, {"isUser": false, "query": "select count ( * )  from singer where country  =  \"United States\"", "predict": "SELECT COUNT(*)\nFROM singer\nWHERE Country = 'US';"}, {"isUser": true, "text": "How many Male Singers?"}, {"isUser": false, "query": "select count ( * )  from singer where Is_male  =  \"True\"", "predict": "SELECT COUNT(*)\nFROM singer\nWHERE Is_male = 'Male';"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "Which models are manufactured by the maker with the name \"General Motors\"?"}, {"isUser": false, "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors'", "predict": "SELECT model_list.Model\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Id\nWHERE car_makers.Maker = 'General Motors';"}, {"isUser": true, "text": "How about models that weight more than 3500?"}, {"isUser": false, "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T4.weight  >  3500", "predict": "SELECT model_list.Model\nFROM model_list\nJOIN cars_data ON model_list.ModelId = cars_data.Id\nWHERE cars_data.Weight > 3500;"}, {"isUser": true, "text": "What is the make and model of the car with the largest horsepower?"}, {"isUser": false, "query": "SELECT DISTINCT T2.Model, T3.maker FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' order by t4.horsepower desc limit 1", "predict": "SELECT car_names.Make, car_names.Model\nFROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nWHERE cars_data.Horsepower = (SELECT MAX(Horsepower) FROM cars_data);"}, {"isUser": true, "text": "How many cars manufactured by General Motors get more than 15 mpg?"}, {"isUser": false, "query": "SELECT count ( * )  FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' and t4.mpg > 15", "predict": "SELECT COUNT(*)\nFROM cars_data\nJOIN model_list ON cars_data.Id = model_list.ModelId\nJOIN car_makers ON model_list.Maker = car_makers.Id\nWHERE car_makers.Maker = 'General Motors' AND cars_data.MPG > 15;"}, {"isUser": true, "text": "What is the make and model of the car manufactured by General Motors that gets the highest mpg?"}, {"isUser": false, "query": "SELECT DISTINCT t1.make, t1.model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' order by t4.mpg desc limit 1", "predict": "SELECT car_names.Make, car_names.Model\nFROM cars_data\nJOIN model_list ON cars_data.Id = model_list.ModelId\nJOIN car_makers ON model_list.Maker = car_makers.Id\nJOIN car_names ON cars_data.Id = car_names.MakeId\nWHERE car_makers.Maker = 'General Motors'\nORDER BY cars_data.MPG DESC\nLIMIT 1;"}]},
{"db_name": "network_1", "turns": [{"isUser": true, "text": "How many students in this table?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Highschooler", "predict": "SELECT COUNT(ID) FROM Highschooler;"}, {"isUser": true, "text": "To find average grade of these students?"}, {"isUser": false, "query": "SELECT avg ( grade )  FROM Highschooler", "predict": "SELECT AVG(grade) FROM Highschooler;"}, {"isUser": true, "text": "Find top grade of the student?"}, {"isUser": false, "query": "SELECT grade FROM Highschooler order by grade desc limit 1", "predict": "SELECT MAX(grade) FROM Highschooler;"}, {"isUser": true, "text": "Find the lowest  grade of the student?"}, {"isUser": false, "query": "SELECT grade FROM Highschooler order by grade limit 1", "predict": "SELECT MIN(grade) FROM Highschooler;"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "What countries produced cars?"}, {"isUser": false, "query": "SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId   =   T2.Country", "predict": "SELECT DISTINCT Country\nFROM car_makers;"}, {"isUser": true, "text": "What country does not have a car maker?"}, {"isUser": false, "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId   =   T2.Country", "predict": "SELECT DISTINCT countries.CountryName\nFROM countries\nLEFT JOIN car_makers ON countries.CountryName = car_makers.Country\nWHERE car_makers.Country IS NULL;"}]},
{"db_name": "network_1", "turns": [{"isUser": true, "text": "Can you show me a list of student IDs and their friends IDs?"}, {"isUser": false, "query": "SELECT student_id, friend_id FROM Friend", "predict": "SELECT student_id, friend_id\nFROM Friend;"}, {"isUser": true, "text": "Can you show me a list of all student IDs? | Did you mean the id of all High schoolers? | Yes"}, {"isUser": false, "query": "SELECT id FROM Highschooler", "predict": "SELECT ID\nFROM Highschooler;"}, {"isUser": true, "text": "Can you tell me the total number of student IDs?"}, {"isUser": false, "query": "SELECT count ( id )  FROM Highschooler", "predict": "SELECT COUNT(ID) AS total_students\nFROM Highschooler;"}, {"isUser": true, "text": "Can you tell me the total number of Friend IDs?"}, {"isUser": false, "query": "SELECT count ( distinct friend_id )  FROM Friend", "predict": "SELECT COUNT(*) AS total_friends\nFROM Friend;"}, {"isUser": true, "text": "Can you tell me which Student ID is not on the list of Friend IDs? | by student id, do you mean the student id in the table friend or all high schoolers' ids. | All high schoolers' ids"}, {"isUser": false, "query": "SELECT id FROM Highschooler EXCEPT SELECT friend_id FROM Friend", "predict": "SELECT ID\nFROM Highschooler\nWHERE ID NOT IN (SELECT student_id FROM Friend);"}, {"isUser": true, "text": "Can you tell me the name and the grade of student ID 1510?"}, {"isUser": false, "query": "SELECT name, grade FROM Highschooler where id  =  1510", "predict": "SELECT name, grade\nFROM Highschooler\nWHERE ID = 1510;"}]},
{"db_name": "employee_hire_evaluation", "turns": [{"isUser": true, "text": "Hello!  Can you please provide me with a list of all of the cities in this database?"}, {"isUser": false, "query": "SELECT city FROM employee", "predict": "SELECT DISTINCT City\nFROM employee;"}, {"isUser": true, "text": "Great!  Can you update this list to show only the cities with more than one employee under the age of 30?"}, {"isUser": false, "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count ( * )   >  1", "predict": "SELECT City\nFROM employee\nWHERE Age < 30\nGROUP BY City\nHAVING COUNT(Employee_ID) > 1;"}, {"isUser": true, "text": "Yay!  Thank you!  Can you update this list to include the ages of all residents of Bath?"}, {"isUser": false, "query": "SELECT Age FROM employee WHERE city  =  'Bath'", "predict": "SELECT Name, Age\nFROM employee\nWHERE City = 'Bath';"}]},
{"db_name": "pets_1", "turns": [{"isUser": true, "text": "How many students in the \"Student\" table are over the age of 20?"}, {"isUser": false, "query": "SELECT count ( * )  FROM student WHERE age  >  20", "predict": "SELECT COUNT(*)\nFROM Student\nWHERE Age > 20;"}, {"isUser": true, "text": "How many of those students own pets?"}, {"isUser": false, "query": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid WHERE T1.age  >  20", "predict": "SELECT COUNT(DISTINCT StuID)\nFROM Has_Pet\nWHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20);"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "Tell me the loser_name whose age is 24.626967830300003"}, {"isUser": false, "query": "SELECT distinct loser_name from matches where loser_age  =  24.626967830300003", "predict": "SELECT loser_name\nFROM matches\nWHERE loser_age = 24.626967830300003;"}, {"isUser": true, "text": "Tell me the total number of matches played by Petra Kvitova..."}, {"isUser": false, "query": "SELECT count ( * )  from matches where loser_name  =  \"Petra Kvitova\" or winner_name  =  \"Petra Kvitova\"", "predict": "SELECT COUNT(*)\nFROM matches\nWHERE winner_name = 'Petra Kvitova'\nOR loser_name = 'Petra Kvitova';"}, {"isUser": true, "text": "Who has high loser_rank_points higher than 3500 ? | What attributes of the people  with loser_rank_points higher than 3500 would you like to know? | based on loser_id"}, {"isUser": false, "query": "SELECT distinct loser_id from matches where loser_rank_points > 3500", "predict": "SELECT first_name, last_name, hand, birth_date, country_code\nFROM players\nWHERE player_id IN (\n    SELECT loser_id\n    FROM matches\n    WHERE loser_rank_points > 3500\n);"}, {"isUser": true, "text": "Find the name and rank points of the winner who won the most times..."}, {"isUser": false, "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT winner_name, MAX(wins) AS max_wins\nFROM (\n    SELECT winner_name, COUNT(*) AS wins\n    FROM matches\n    GROUP BY winner_name\n)\nGROUP BY winner_name;"}]},
{"db_name": "network_1", "turns": [{"isUser": true, "text": "What are the names of all of the high schoolers?"}, {"isUser": false, "query": "SELECT name FROM Highschooler", "predict": "SELECT name\nFROM Highschooler;"}, {"isUser": true, "text": "What is the value of the greatest number of likes for each high schooler? | what  did  you mean  the value? | Sorry, the amount of the greatest number of likes."}, {"isUser": false, "query": "SELECT count ( * )  from  Likes  group by student_id order by  count ( * )  desc limit  1", "predict": "SELECT student_id, MAX(count_likes) AS max_likes\nFROM (SELECT student_id, COUNT(liked_id) AS count_likes\n      FROM Likes\n      GROUP BY student_id) AS like_counts\nGROUP BY student_id;"}, {"isUser": true, "text": "What is the name of the high schooler who has the greatest number of likes?"}, {"isUser": false, "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count ( * )  DESC limit 1", "predict": "SELECT H.name\nFROM Highschooler H\nJOIN (SELECT student_id, COUNT(liked_id) AS count_likes\n      FROM Likes\n      GROUP BY student_id\n      ORDER BY count_likes DESC\n      LIMIT 1) AS max_likes ON H.ID = max_likes.student_id;"}]},
{"db_name": "real_estate_properties", "turns": [{"isUser": true, "text": "What is the feature type name of the feature AirCon?"}, {"isUser": false, "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code   =   T2.feature_type_code WHERE T1.feature_name   =   \"AirCon\"", "predict": "SELECT feature_type_name\nFROM Ref_Feature_Types\nWHERE feature_type_code = 'AirCon';"}, {"isUser": true, "text": "What is the full feature description of the feature name AirCon?"}, {"isUser": false, "query": "select feature_description from Other_Available_Features  where feature_name  =  \"AirCon\"", "predict": "SELECT feature_description\nFROM Other_Available_Features\nWHERE feature_name = 'AirCon';"}, {"isUser": true, "text": "How many different feature IDs are there?"}, {"isUser": false, "query": "select count ( * )  from  ( select distinct feature_id from Other_Available_Features  ) ", "predict": "SELECT COUNT(DISTINCT feature_id) as num_feature_ids\nFROM Other_Available_Features;"}, {"isUser": true, "text": "What sort of feature type code is associated with AirCon?"}, {"isUser": false, "query": "select feature_type_code from Other_Available_Features  where feature_name  =  \"AirCon\"", "predict": "SELECT feature_type_code\nFROM Other_Available_Features\nWHERE feature_name = 'AirCon';"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "Can you list the transcript date that appears least often?"}, {"isUser": false, "query": "SELECT transcript_date FROM Transcripts group by transcript_date order by count ( * )  asc limit 1", "predict": "SELECT transcript_date, COUNT(transcript_date) AS frequency\nFROM Transcripts\nGROUP BY transcript_date\nORDER BY frequency\nLIMIT 1;"}, {"isUser": true, "text": "How many times does the transcript date 1975-05-06 12:04:47\tshow up in the table?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Transcripts Where transcript_date  =  \"1975-05-06 12:04:47\"", "predict": "SELECT COUNT(*)\nFROM Transcripts\nWHERE transcript_date = '1975-05-06 12:04:47';"}, {"isUser": true, "text": "Which transcript date shows up the most number of times?"}, {"isUser": false, "query": "SELECT transcript_date FROM Transcripts GROUP BY transcript_date ORDER BY count ( * )  desc limit 1", "predict": "SELECT transcript_date, COUNT(transcript_date) AS frequency\nFROM Transcripts\nGROUP BY transcript_date\nORDER BY frequency DESC\nLIMIT 1;"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "What is the destination airport of  United Airlines?"}, {"isUser": false, "query": "SELECT T2.DestAirport FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T1.Airline  =  \"United Airlines\"", "predict": "SELECT DestAirport\nFROM flights\nWHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines');"}, {"isUser": true, "text": "How many airlines have flights departing from APG?"}, {"isUser": false, "query": "SELECT COUNT ( T1.Airline )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.sourceAirport like \"%APG%\"", "predict": "SELECT COUNT(DISTINCT Airline)\nFROM flights\nWHERE SourceAirport = 'APG';"}, {"isUser": true, "text": "What is the flight number of Delta Airlines | Did you mean to ask for the flight numbers of all flights on Delta Airlines? | yes flight numbers of all flights on Delta Airlines"}, {"isUser": false, "query": "SELECT T2.FlightNo FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T1.Airline  =  \"Delta Airlines\"", "predict": "SELECT FlightNo\nFROM flights\nWHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'Delta Airlines');"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "how many car models are produced in the USA?"}, {"isUser": false, "query": "SELECT count ( * )  FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id JOIN COUNTRIES AS T3 ON T2.Country   =   T3.CountryId WHERE T3.CountryName   =   'usa'", "predict": "SELECT COUNT(DISTINCT model_list.Model)\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Id\nWHERE car_makers.Country = 'USA';"}, {"isUser": true, "text": "which companies produce those models?"}, {"isUser": false, "query": "SELECT distinct t1.maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'usa'", "predict": "SELECT DISTINCT car_makers.Maker\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Id\nWHERE car_makers.Country = 'USA';"}, {"isUser": true, "text": "how many Models has Ford produced?"}, {"isUser": false, "query": "select count (  * )  from model_list as t1 join car_makers as t2 where t1.maker  =  t2.id and t2.maker  =  \"ford\"", "predict": "SELECT COUNT(*)\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Id\nWHERE car_makers.Maker = 'Ford';"}]},
{"db_name": "network_1", "turns": [{"isUser": true, "text": "Show the names of students who have at least 2 likes."}, {"isUser": false, "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id GROUP BY T1.student_id HAVING count ( * )    > =    2", "predict": "SELECT h.name\nFROM Highschooler h\nJOIN Likes l ON h.ID = l.student_id\nGROUP BY h.ID\nHAVING COUNT(l.liked_id) >= 2;"}, {"isUser": true, "text": "How about 1 like?"}, {"isUser": false, "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id GROUP BY T1.student_id HAVING count ( * )    > =    1", "predict": "SELECT h.name\nFROM Highschooler h\nJOIN Likes l ON h.ID = l.student_id\nGROUP BY h.ID\nHAVING COUNT(l.liked_id) = 1;"}, {"isUser": true, "text": "What are their IDs?"}, {"isUser": false, "query": "SELECT T2.id FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id GROUP BY T1.student_id HAVING count ( * )    > =    1", "predict": "SELECT h.ID\nFROM Highschooler h\nJOIN Likes l ON h.ID = l.student_id\nGROUP BY h.ID\nHAVING COUNT(l.liked_id) = 1;"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "what is the dest airport of airline 1"}, {"isUser": false, "query": "SELECT DestAirport FROM flights WHERE airline   =   \"1\"", "predict": "SELECT DestAirport\nFROM flights\nWHERE Airline = 1;"}, {"isUser": true, "text": "what is the country of united airlines"}, {"isUser": false, "query": "SELECT COUNTRY FROM AIRLINES WHERE AIRLINE   =   \"United Airlines\"", "predict": "SELECT Country\nFROM airlines\nWHERE Airline = 'United Airlines';"}, {"isUser": true, "text": "what is the source airport of ASY | What is ASY? | dest airport"}, {"isUser": false, "query": "SELECT SourceAirport FROM flights WHERE DestAirport   =   \"ASY\"", "predict": "SELECT SourceAirport\nFROM flights\nWHERE Airline = (SELECT uid FROM airlines WHERE Abbreviation = 'ASY');"}, {"isUser": true, "text": "what is the country of us airways"}, {"isUser": false, "query": "SELECT country FROM Airlines WHERE Airline   =   \"US Airways\"", "predict": "SELECT Country\nFROM airlines\nWHERE Airline = 'US Airways';"}, {"isUser": true, "text": "what is the airline of country usa"}, {"isUser": false, "query": "SELECT Airline FROM Airlines WHERE country   =   \"USA\"", "predict": "SELECT Airline\nFROM airlines\nWHERE Country = 'USA';"}]},
{"db_name": "network_1", "turns": [{"isUser": true, "text": "what is the average of grades?"}, {"isUser": false, "query": "SELECT AVG ( grade )  FROM Highschooler", "predict": "SELECT AVG(grade) AS average_grade\nFROM Highschooler;"}, {"isUser": true, "text": "what is the name of higshoolers that starting with 'A'?"}, {"isUser": false, "query": "SELECT AVG ( grade )  FROM Highschooler", "predict": "SELECT name\nFROM Highschooler\nWHERE name LIKE 'A%';"}, {"isUser": true, "text": "what is the best grade ? | Did you mean to ask for the highest grade? | yes"}, {"isUser": false, "query": "SELECT MAX ( grade )  FROM Highschooler", "predict": "SELECT MAX(grade) AS best_grade\nFROM Highschooler;"}]},
{"db_name": "poker_player", "turns": [{"isUser": true, "text": "Can you list all the names of the poker players ordered by the final tables in ascending order please?"}, {"isUser": false, "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Final_Table_Made", "predict": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nORDER BY pp.Final_Table_Made ASC;"}, {"isUser": true, "text": "What are the nationalities of the poker players ordered by the final tables in ascending order?"}, {"isUser": false, "query": "SELECT T1.Nationality FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Final_Table_Made", "predict": "SELECT DISTINCT p.Nationality\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nORDER BY pp.Final_Table_Made ASC;"}, {"isUser": true, "text": "What is the name of the poker player with the highest earnings?"}, {"isUser": false, "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings desc limit 1", "predict": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nORDER BY pp.Earnings DESC\nLIMIT 1;"}, {"isUser": true, "text": "What about the poker player with the lowest earnings?"}, {"isUser": false, "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings limit 1", "predict": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE pp.Earnings IS NOT NULL\nORDER BY pp.Earnings ASC\nLIMIT 1;"}, {"isUser": true, "text": "What was his best finish?"}, {"isUser": false, "query": "SELECT T2.Best_Finish FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings  limit 1", "predict": "SELECT pp.Best_Finish\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE p.Name = (SELECT p.Name\n                FROM poker_player pp\n                JOIN people p ON pp.People_ID = p.People_ID\n                WHERE pp.Earnings IS NOT NULL\n                ORDER BY pp.Earnings ASC\n                LIMIT 1);"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "What are the release dates for transcripts?"}, {"isUser": false, "query": "select transcript_date from Transcripts", "predict": "SELECT transcript_date\nFROM Transcripts;"}, {"isUser": true, "text": "What is the most recent date for release of transcripts?"}, {"isUser": false, "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "predict": "SELECT MAX(transcript_date) AS most_recent_release_date\nFROM Transcripts;"}, {"isUser": true, "text": "What is the last transcript release date?"}, {"isUser": false, "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "predict": "SELECT transcript_date\nFROM Transcripts\nORDER BY transcript_date DESC\nLIMIT 1;"}]},
{"db_name": "tvshow", "turns": [{"isUser": true, "text": "which is the most recently aired cartoon?"}, {"isUser": false, "query": "SELECT Title FROM cartoon ORDER BY original_air_date LIMIT 1", "predict": "SELECT Title \nFROM Cartoon \nORDER BY Original_air_date DESC \nLIMIT 1;"}, {"isUser": true, "text": "find the channel of the most recently aired cartoon."}, {"isUser": false, "query": "SELECT Channel FROM cartoon ORDER BY original_air_date LIMIT 1", "predict": "SELECT Channel \nFROM Cartoon \nORDER BY Original_air_date DESC \nLIMIT 1;"}, {"isUser": true, "text": "Find the production code and channel of the most recently aired cartoon."}, {"isUser": false, "query": "SELECT production_code ,  channel, original_air_date FROM cartoon ORDER BY original_air_date desc LIMIT 1", "predict": "SELECT Production_code, Channel \nFROM Cartoon \nORDER BY Original_air_date DESC \nLIMIT 1;"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "What is the version number of template id 3?"}, {"isUser": false, "query": "SELECT Version_Number from Templates where Template_ID  =  3", "predict": "SELECT Version_Number\nFROM Templates\nWHERE Template_ID = 3;"}, {"isUser": true, "text": "What is the document name of template id 25?"}, {"isUser": false, "query": "SELECT t2.Document_Name from Templates as t1 join Documents as t2 on t1.Template_ID  =  t2.Template_ID where t1.Template_ID  =  25", "predict": "SELECT Document_Name\nFROM Documents\nWHERE Template_ID = 25;"}, {"isUser": true, "text": "Show all template types codes that are not used by any document?"}, {"isUser": false, "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "predict": "SELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Code NOT IN (\n    SELECT DISTINCT Templates.Template_Type_Code\n    FROM Templates\n    INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\n);"}, {"isUser": true, "text": "What is the version number of template id 4?"}, {"isUser": false, "query": "SELECT Version_Number from Templates where Template_ID  =  4", "predict": "SELECT Version_Number\nFROM Templates\nWHERE Template_ID = 4;"}]},
{"db_name": "flight_2", "turns": [{"isUser": true, "text": "Can you list all the flight numbers that have a source airport value of AHD?"}, {"isUser": false, "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport   =  \"AHD\"", "predict": "SELECT FlightNo\nFROM flights\nWHERE SourceAirport = 'AHD';"}, {"isUser": true, "text": "Can you list the names of all the unique airlines that belong to those flight numbers?"}, {"isUser": false, "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline WHERE T2.SourceAirport   =   \" AHD\"", "predict": "SELECT DISTINCT airlines.Airline\nFROM flights\nJOIN airlines ON flights.Airline = airlines.uid\nWHERE flights.SourceAirport = 'AHD';"}]},
{"db_name": "concert_singer", "turns": [{"isUser": true, "text": "How many stadiums can accommodate more than 1000 people in average.?"}, {"isUser": false, "query": "SELECT count ( * )  FROM stadium WHERE average > 1000", "predict": "SELECT COUNT(*) \nFROM stadium \nWHERE Average > 1000;"}, {"isUser": true, "text": "sorry , What is the name of the stadium with the lowest attendance in average.?"}, {"isUser": false, "query": "SELECT name FROM stadium ORDER BY average LIMIT 1", "predict": "SELECT Name \nFROM stadium \nWHERE Average = (SELECT MIN(Average) FROM stadium);"}, {"isUser": true, "text": "What about the one with highest average attendance?"}, {"isUser": false, "query": "SELECT name FROM stadium ORDER BY average DESC LIMIT 1", "predict": "SELECT Name \nFROM stadium \nWHERE Average = (SELECT MAX(Average) FROM stadium);"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "Which African countries have a smaller population than that of any Asian country?"}, {"isUser": false, "query": "SELECT Name FROM country WHERE Continent   =   \"Africa\"  AND population  <   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Asia\" ) ", "predict": "SELECT c1.Name AS AfricanCountry\nFROM country c1\nWHERE c1.Continent = 'Africa'\nAND c1.Population < (SELECT MIN(c2.Population)\n                     FROM country c2\n                     WHERE c2.Continent = 'Asia');"}, {"isUser": true, "text": "Which Asian countries have a smaller population than that of any African country?"}, {"isUser": false, "query": "SELECT Name FROM country WHERE Continent   =   \"Asia\"  AND population  <   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Africa\" ) ", "predict": "SELECT c1.Name AS AsianCountry\nFROM country c1\nWHERE c1.Continent = 'Asia'\nAND c1.Population < (SELECT MIN(c2.Population)\n                     FROM country c2\n                     WHERE c2.Continent = 'Africa');"}, {"isUser": true, "text": "Which Asian country has the highest life expectancy?"}, {"isUser": false, "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy DESC LIMIT 1", "predict": "SELECT c.Name AS AsianCountry\nFROM country c\nWHERE c.Continent = 'Asia'\nORDER BY c.LifeExpectancy DESC\nLIMIT 1;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "Hello!  Can you tell me how many dogs have not gone through any treatment?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Dogs WHERE dog_id NOT IN  (  SELECT dog_id FROM Treatments  ) ", "predict": "SELECT COUNT(*) AS num_dogs_without_treatment\nFROM Dogs\nWHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments);"}, {"isUser": true, "text": "Thank you for that!  Can you tell me how many of these dogs were abandoned?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Dogs WHERE abandoned_yn  =  1 AND dog_id NOT IN  (  SELECT dog_id FROM Treatments  ) ", "predict": "SELECT COUNT(*) AS num_abandoned_dogs_without_treatment\nFROM Dogs\nWHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments)\nAND abandoned_yn = 'yes';"}, {"isUser": true, "text": "Can you provide me with a list of all dog Ids for all of the abandoned dogs, as well as their associated treatment type code?"}, {"isUser": false, "query": "SELECT T1.dog_id, T2.treatment_type_code FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE abandoned_yn  =  1", "predict": "SELECT d.dog_id, t.treatment_type_code\nFROM Dogs d\nLEFT JOIN Treatments t ON d.dog_id = t.dog_id\nWHERE d.abandoned_yn = 'yes';"}]},
{"db_name": "employee_hire_evaluation", "turns": [{"isUser": true, "text": "how old is George Chuter?"}, {"isUser": false, "query": "select age from employee where name  =  \"George Chuter\"", "predict": "SELECT Age \nFROM employee \nWHERE Name = 'George Chuter';"}, {"isUser": true, "text": "how much bonus was Employee with ID 1 awarded? | The employee with employee id 1 got a total amount of 5900.0 bonus. | What city is Lee Mears from?"}, {"isUser": false, "query": "select city from employee where name  =  \"Lee Mears\"", "predict": "SELECT Bonus \nFROM evaluation \nWHERE Employee_ID = 1;\n\nSELECT City \nFROM employee \nWHERE Name = 'Lee Mears';"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "Find the program which most number of students are enrolled in. List both the id and the summary."}, {"isUser": false, "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT degree_program_id, degree_summary_name\nFROM Degree_Programs\nWHERE degree_program_id = (\n    SELECT degree_program_id\n    FROM Student_Enrolment\n    GROUP BY degree_program_id\n    ORDER BY COUNT(student_id) DESC\n    LIMIT 1\n);"}, {"isUser": true, "text": "for id program 9, which degree summary is the most common | Could you please clarify your question? Since one program has only one degree summary. | which program has the most students"}, {"isUser": false, "query": "SELECT T1.degree_program_id  FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT degree_program_id, degree_summary_name\nFROM Degree_Programs\nWHERE degree_program_id = (\n    SELECT degree_program_id\n    FROM Student_Enrolment\n    GROUP BY degree_program_id\n    ORDER BY COUNT(student_id) DESC\n    LIMIT 1\n);"}, {"isUser": true, "text": "How many students are in program 9"}, {"isUser": false, "query": "SELECT COUNT ( * )  FROM Student_Enrolment WHERE degree_program_id  =  \"9\"", "predict": "SELECT COUNT(student_id) AS total_students\nFROM Student_Enrolment\nWHERE degree_program_id = 9;"}, {"isUser": true, "text": "how many master are in program 9"}, {"isUser": false, "query": "SELECT COUNT ( * )  FROM Degree_Programs WHERE degree_summary_name  =  \"Master\" AND degree_program_id  =  \"9\"", "predict": "SELECT COUNT(se.student_id) AS total_master_students\nFROM Student_Enrolment se\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE dp.degree_summary_name = 'Master'\nAND dp.degree_program_id = 9;"}, {"isUser": true, "text": "which program has the least students"}, {"isUser": false, "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count ( * )  limit 1", "predict": "SELECT degree_program_id, degree_summary_name\nFROM Degree_Programs\nWHERE degree_program_id = (\n    SELECT degree_program_id\n    FROM Student_Enrolment\n    GROUP BY degree_program_id\n    ORDER BY COUNT(student_id) ASC\n    LIMIT 1\n);"}, {"isUser": true, "text": "how many students does id 3 have"}, {"isUser": false, "query": "SELECT COUNT ( * )  FROM Student_Enrolment where degree_program_id  =  \"3\"", "predict": "SELECT COUNT(student_id) AS total_students\nFROM Student_Enrolment\nWHERE degree_program_id = 3;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "whats is total cost of treatment?"}, {"isUser": false, "query": "SELECT sum ( cost_of_treatment )  from treatments", "predict": "SELECT SUM(cost_of_treatment) AS total_cost_of_treatment\nFROM Treatments;"}, {"isUser": true, "text": "could you please find who's provide lowest cost of treatment? | you want first name or last name or both? | both"}, {"isUser": false, "query": "select T1.first_name, T1.last_name from Professionals as T1 join Treatments as T2 on T1.professional_id  =  T2.professional_id order by T2.cost_of_treatment asc limit 1", "predict": "SELECT p.first_name, p.last_name, MIN(t.cost_of_treatment) AS lowest_cost_of_treatment\nFROM Treatments t\nJOIN Professionals p ON t.professional_id = p.professional_id\nWHERE t.cost_of_treatment = (SELECT MIN(cost_of_treatment) FROM Treatments);"}, {"isUser": true, "text": "ok, can you show lowest cost treatment's dog id?"}, {"isUser": false, "query": "select dog_id from treatments order by cost_of_treatment asc limit 1", "predict": "SELECT t.dog_id\nFROM Treatments t\nWHERE t.cost_of_treatment = (SELECT MIN(cost_of_treatment) FROM Treatments);"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "Show me continent IDs of each continent"}, {"isUser": false, "query": "SELECT ContId ,  Continent  FROM CONTINENTS", "predict": "SELECT ContId, Continent FROM continents;"}, {"isUser": true, "text": "Show me continent names and the number of countries they have"}, {"isUser": false, "query": "SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.Continent GROUP BY T1.ContId", "predict": "SELECT c.Continent, COUNT(*) AS NumCountries\nFROM continents c\nJOIN countries co ON c.ContId = co.Continent\nGROUP BY c.Continent;"}, {"isUser": true, "text": "Which continent has the highest number of countries?"}, {"isUser": false, "query": "SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.Continent GROUP BY T1.ContId ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT c.Continent, COUNT(*) AS NumCountries\nFROM continents c\nJOIN countries co ON c.ContId = co.Continent\nGROUP BY c.Continent\nORDER BY NumCountries DESC\nLIMIT 1;"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "Hello!  How are you?  First, I'll start with a straightforward request...  Can you show me all document IDs and their corresponding document names and number of paragraphs?"}, {"isUser": false, "query": "SELECT T1.document_id ,  T2.document_name ,  count ( * )  FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id GROUP BY T1.document_id", "predict": "SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs\nFROM Documents d\nLEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID, d.Document_Name;"}, {"isUser": true, "text": "Okay...  I'll ask something different.  Can you show me a list of all of the paragraph text values?"}, {"isUser": false, "query": "SELECT Paragraph_Text FROM Paragraphs", "predict": "SELECT Paragraph_Text\nFROM Paragraphs;"}, {"isUser": true, "text": "Thanks!  Can you filter this list to show the Paragraph_Texts which have something other than \"NULL\" as the Other Details?"}, {"isUser": false, "query": "SELECT Paragraph_Text FROM Paragraphs WHERE Other_Details ! =  \"NULL\"", "predict": "SELECT Paragraph_Text\nFROM Paragraphs\nWHERE Other_Details IS NOT NULL;"}]},
{"db_name": "tvshow", "turns": [{"isUser": true, "text": "Hello!  Can you provide me with a list of all cartoons written by Todd Casey?"}, {"isUser": false, "query": "select * from Cartoon where Written_by  =  'Todd Casey'", "predict": "SELECT Title\nFROM Cartoon\nWHERE Written_by = 'Todd Casey';"}, {"isUser": true, "text": "Can you update the list to show only those Titles which are cartoons?"}, {"isUser": false, "query": "select Title from Cartoon where Written_by  =  'Todd Casey'", "predict": "SELECT Title\nFROM Cartoon\nWHERE Written_by = 'Todd Casey';"}, {"isUser": true, "text": "Can you update this list to include the corresponding television channel?"}, {"isUser": false, "query": "SELECT T1.id FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.written_by  =  'Todd Casey'", "predict": "SELECT Cartoon.Title, Cartoon.Channel\nFROM Cartoon\nWHERE Cartoon.Written_by = 'Todd Casey';"}]},
{"db_name": "museum_visit", "turns": [{"isUser": true, "text": "Can you tell me the total amount spent on tickets by visitors with membership level 1?"}, {"isUser": false, "query": "SELECT sum ( t2.Total_spent )  FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id WHERE t1.Level_of_membership   =   1", "predict": "SELECT SUM(Total_spent) AS Total_Amount_Spent\nFROM visit\nJOIN visitor ON visit.visitor_ID = visitor.ID\nWHERE visitor.Level_of_membership = 1;"}, {"isUser": true, "text": "Can you tell me how many visitors there are at membership level 1?"}, {"isUser": false, "query": "SELECT COUNT ( id )  FROM visitor WHERE Level_of_membership  =  1", "predict": "SELECT COUNT(*) AS Total_Visitors_Level_1\nFROM visitor\nWHERE Level_of_membership = 1;"}, {"isUser": true, "text": "How many membership levels are there?"}, {"isUser": false, "query": "SELECT COUNT ( DISTINCT level_of_membership )  FROM visitor", "predict": "SELECT COUNT(DISTINCT Level_of_membership) AS Total_Membership_Levels\nFROM visitor;"}, {"isUser": true, "text": "Can you show me the names of each visitor with membership level 1?"}, {"isUser": false, "query": "SELECT name FROM visitor WHERE Level_of_membership  =  1", "predict": "SELECT Name\nFROM visitor\nWHERE Level_of_membership = 1;"}, {"isUser": true, "text": "I'd like to know how much was spent on tickets at each membership level, can you show me?"}, {"isUser": false, "query": "SELECT  t1.level_of_membership, sum ( Total_spent )  FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id group by Level_of_membership", "predict": "SELECT Level_of_membership, SUM(Total_spent) AS Total_Amount_Spent\nFROM visit\nJOIN visitor ON visit.visitor_ID = visitor.ID\nGROUP BY Level_of_membership;"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "what is the first name of player id 200001?"}, {"isUser": false, "query": "SELECT first_name FROM players WHERE player_id  =  200001", "predict": "SELECT first_name\nFROM players\nWHERE player_id = 200001;"}, {"isUser": true, "text": "When is birth date for Martina ? | There are a lot of Martina. Do you mean the Marina with id 200001? | Martina with id 200001"}, {"isUser": false, "query": "SELECT birth_date FROM players WHERE player_id  =  200001", "predict": "SELECT birth_date\nFROM players\nWHERE player_id = 200001;"}, {"isUser": true, "text": "what is the country code for player id 200003?"}, {"isUser": false, "query": "SELECT country_code FROM players WHERE player_id  =  200003", "predict": "SELECT country_code\nFROM players\nWHERE player_id = 200003;"}, {"isUser": true, "text": "what is the last name of Justine of player id 200003?"}, {"isUser": false, "query": "SELECT last_name FROM players WHERE player_id  =  200003", "predict": "SELECT last_name\nFROM players\nWHERE player_id = 200003;"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "How many ids are in document 'Welcome to NY'? | Do you mean how many paragraphs are associated with document 'Welcome to NY'? | yes"}, {"isUser": false, "query": "SELECT count ( * )  FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id WHERE T2.Document_Name   =   'Welcome to NY'", "predict": "SELECT COUNT(Paragraph_ID) AS Number_of_Paragraphs\nFROM Paragraphs\nWHERE Document_ID = (SELECT Document_ID\n                     FROM Documents\n                     WHERE Document_Name = 'Welcome to NY');"}, {"isUser": true, "text": "What are their texts?"}, {"isUser": false, "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id WHERE T2.Document_Name   =   'Welcome to NY'", "predict": "SELECT Paragraph_Text\nFROM Paragraphs\nWHERE Document_ID = (SELECT Document_ID\n                     FROM Documents\n                     WHERE Document_Name = 'Welcome to NY');"}, {"isUser": true, "text": "What are their id numbers?"}, {"isUser": false, "query": "SELECT T1.paragraph_id FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id WHERE T2.Document_Name   =   'Welcome to NY'", "predict": "SELECT Paragraph_ID\nFROM Paragraphs\nWHERE Document_ID = (SELECT Document_ID\n                     FROM Documents\n                     WHERE Document_Name = 'Welcome to NY');"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "find the total ranking point for each player and their first name"}, {"isUser": false, "query": "SELECT sum ( ranking_points )  ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id GROUP BY T1.first_name", "predict": "SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points\nFROM players p\nJOIN rankings r ON p.player_id = r.player_id\nGROUP BY p.player_id, p.first_name;"}, {"isUser": true, "text": "which player got first rank and their name | Do you want the first name or last name? | first name"}, {"isUser": false, "query": "SELECT distinct T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id WHERE T2.ranking  =  1", "predict": "SELECT p.first_name\nFROM players p\nJOIN rankings r ON p.player_id = r.player_id\nWHERE r.ranking = 1;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "What African country has the largest population?"}, {"isUser": false, "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\" order by population desc limit 1", "predict": "SELECT Name\nFROM country\nWHERE Continent = 'Africa'\nORDER BY Population DESC\nLIMIT 1;"}, {"isUser": true, "text": "And what is the population of Nigeria?"}, {"isUser": false, "query": "select population from country where Name  =  'Nigeria'", "predict": "SELECT Population\nFROM country\nWHERE Name = 'Nigeria';"}, {"isUser": true, "text": "What Asian country has the largest population?"}, {"isUser": false, "query": "SELECT Name FROM country WHERE Continent   =   \"Asia\"  order by population desc limit 1", "predict": "SELECT Name\nFROM country\nWHERE Continent = 'Asia'\nORDER BY Population DESC\nLIMIT 1;"}, {"isUser": true, "text": "What is China's population?"}, {"isUser": false, "query": "SELECT population from country where name  =  'China'", "predict": "SELECT Population\nFROM country\nWHERE Name = 'China';"}, {"isUser": true, "text": "How many Asian countries have a population greater than that of Nigeria?"}, {"isUser": false, "query": "SELECT count ( Name )  FROM country WHERE Continent   =   \"Asia\"  AND population >  ( SELECT population FROM country WHERE name  =  'Nigeria' ) ", "predict": "SELECT COUNT(*)\nFROM country\nWHERE Continent = 'Asia' AND Population > (SELECT Population FROM country WHERE Name = 'Nigeria');"}, {"isUser": true, "text": "Can you list those countries?"}, {"isUser": false, "query": "SELECT Name FROM country WHERE Continent   =   \"Asia\"  AND population >  ( SELECT population FROM country WHERE name  =  'Nigeria' ) ", "predict": "SELECT Name\nFROM country\nWHERE Continent = 'Asia' AND Population > (SELECT Population FROM country WHERE Name = 'Nigeria');"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "Which unique cities are in Asian countries?"}, {"isUser": false, "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T1.Continent   =   \"Asia\"", "predict": "SELECT DISTINCT city.Name\nFROM city\nJOIN country ON city.CountryCode = country.Code\nWHERE country.Continent = 'Asia';"}, {"isUser": true, "text": "Which of those cities have a population over 200,000?"}, {"isUser": false, "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T3.Population >200000", "predict": "SELECT DISTINCT city.Name\nFROM city\nJOIN country ON city.CountryCode = country.Code\nWHERE country.Continent = 'Asia'\nAND city.Population > 200000;"}, {"isUser": true, "text": "What is the average population of all cities in China?"}, {"isUser": false, "query": "SELECT avg ( T3.Population )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T1.Name  =  \"China\"", "predict": "SELECT AVG(Population)\nFROM city\nWHERE CountryCode = 'CHN';"}, {"isUser": true, "text": "What is the average population of all cities that speak the Dutch language?"}, {"isUser": false, "query": "SELECT avg ( T3.Population )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T2.Language  =  \"Dutch\"", "predict": "SELECT AVG(city.Population)\nFROM city\nJOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode\nWHERE countrylanguage.Language = 'Dutch';"}]},
{"db_name": "museum_visit", "turns": [{"isUser": true, "text": "How many visitors are ther?"}, {"isUser": false, "query": "SELECT count ( * )  from visitor", "predict": "SELECT COUNT(*) \nFROM visitor;"}, {"isUser": true, "text": "How many of them have membership levels higher than 4?"}, {"isUser": false, "query": "SELECT count ( * )  FROM visitor WHERE Level_of_membership  >  4", "predict": "SELECT COUNT(*)\nFROM visitor\nWHERE Level_of_membership > 4;"}, {"isUser": true, "text": "Can you please list their names?"}, {"isUser": false, "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4", "predict": "SELECT Name\nFROM visitor\nWHERE Level_of_membership > 4;"}, {"isUser": true, "text": "Can you rank them by their membership level from high to low?"}, {"isUser": false, "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "predict": "SELECT Name, Level_of_membership\nFROM visitor\nWHERE Level_of_membership > 4\nORDER BY Level_of_membership DESC;"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "Could you list the average ranking for each player with their first name?"}, {"isUser": false, "query": "SELECT avg ( ranking )  ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id GROUP BY T1.player_id", "predict": "SELECT p.first_name, AVG(r.ranking) AS average_ranking\nFROM players p\nJOIN rankings r ON p.player_id = r.player_id\nGROUP BY p.first_name;"}, {"isUser": true, "text": "Could you add in their last names please?"}, {"isUser": false, "query": "SELECT avg ( ranking )  ,  T1.first_name, t1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id GROUP BY T1.player_id", "predict": "SELECT p.first_name, p.last_name, AVG(r.ranking) AS average_ranking\nFROM players p\nJOIN rankings r ON p.player_id = r.player_id\nGROUP BY p.first_name, p.last_name;"}, {"isUser": true, "text": "What are the full names of all left-handed players (hand value \"L\")?"}, {"isUser": false, "query": "SELECT  T1.first_name, t1.last_name FROM players AS T1 where t1.hand  =  \"L\"", "predict": "SELECT first_name || ' ' || last_name AS full_name\nFROM players\nWHERE hand = 'L';"}, {"isUser": true, "text": "Could you just show their last names, please?"}, {"isUser": false, "query": "SELECT T1.last_name FROM players AS T1 where t1.hand  =  \"L\"", "predict": "SELECT last_name\nFROM players\nWHERE hand = 'L';"}, {"isUser": true, "text": "Would you also add in their rankings? | Do you mean their average rankings? | Yes, please."}, {"isUser": false, "query": "SELECT avg ( ranking )  ,  T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id where T1.hand  =  \"L\" GROUP BY T1.first_name", "predict": "SELECT p.last_name, AVG(r.ranking) AS average_ranking\nFROM players p\nJOIN rankings r ON p.player_id = r.player_id\nWHERE p.hand = 'L'\nGROUP BY p.last_name;"}]},
{"db_name": "network_1", "turns": [{"isUser": true, "text": "What is the average grade of all students who have some friends, please?"}, {"isUser": false, "query": "SELECT avg ( grade )  FROM Highschooler WHERE id IN  ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id ) ", "predict": "SELECT AVG(grade)\nFROM Highschooler\nWHERE ID IN (SELECT student_id FROM Friend);"}, {"isUser": true, "text": "Are there any students that have no friends?"}, {"isUser": false, "query": "SELECT * FROM Highschooler WHERE id not IN  ( SELECT student_id FROM Friend ) ", "predict": "SELECT *\nFROM Highschooler\nWHERE ID NOT IN (SELECT student_id FROM Friend);"}, {"isUser": true, "text": "What are their grades?"}, {"isUser": false, "query": "SELECT grade FROM Highschooler WHERE id not IN  ( SELECT student_id FROM Friend ) ", "predict": "SELECT ID, grade\nFROM Highschooler\nWHERE ID NOT IN (SELECT student_id FROM Friend);"}, {"isUser": true, "text": "What are their names?"}, {"isUser": false, "query": "SELECT name FROM Highschooler WHERE id not IN  ( SELECT student_id FROM Friend ) ", "predict": "SELECT name\nFROM Highschooler\nWHERE ID NOT IN (SELECT student_id FROM Friend);"}, {"isUser": true, "text": "What are the names of the students with friends?"}, {"isUser": false, "query": "SELECT name FROM Highschooler WHERE id IN  ( SELECT student_id FROM Friend ) ", "predict": "SELECT name\nFROM Highschooler\nWHERE ID IN (SELECT student_id FROM Friend);"}]},
{"db_name": "network_1", "turns": [{"isUser": true, "text": "How many students are there?"}, {"isUser": false, "query": "select count ( * )  from highschooler", "predict": "SELECT COUNT(*) AS total_students\nFROM Highschooler;"}, {"isUser": true, "text": "How many students have grade 9"}, {"isUser": false, "query": "SELECT count ( * )  FROM highschooler WHERE grade   =   9", "predict": "SELECT COUNT(*)\nFROM Highschooler\nWHERE grade = 9;"}, {"isUser": true, "text": "What is his grade?"}, {"isUser": false, "query": "SELECT grade from highschooler where name  =  \"Kyle\"", "predict": "SELECT grade\nFROM Highschooler\nWHERE name = 'John';"}]},
{"db_name": "concert_singer", "turns": [{"isUser": true, "text": "show the stadium names without any concern"}, {"isUser": false, "query": "SELECT name FROM stadium WHERE stadium_id NOT IN  ( SELECT stadium_id FROM concert ) ", "predict": "SELECT Name\nFROM stadium;"}, {"isUser": true, "text": "football stadium | If you meant which football stadium has held the highest number of audience, that would be this one. | yes"}, {"isUser": false, "query": "SELECT name FROM stadium ORDER BY Highest DESC LIMIT 1", "predict": "SELECT Name\nFROM stadium\nWHERE Capacity = (SELECT MAX(Capacity) FROM stadium);"}]},
{"db_name": "singer", "turns": [{"isUser": true, "text": "What is the most common citizenship of singers, please?"}, {"isUser": false, "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT ( * )  DESC LIMIT 1", "predict": "SELECT Citizenship, COUNT(*) AS Count\nFROM singer\nGROUP BY Citizenship\nORDER BY Count DESC\nLIMIT 1;"}, {"isUser": true, "text": "What about the least common?"}, {"isUser": false, "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT ( * )  ASC LIMIT 1", "predict": "SELECT Citizenship, COUNT(*) AS Count\nFROM singer\nGROUP BY Citizenship\nORDER BY Count\nLIMIT 1;"}, {"isUser": true, "text": "What are the names of all the singers from Australia, please?"}, {"isUser": false, "query": "SELECT name FROM singer where Citizenship = 'Australia'", "predict": "SELECT Name\nFROM singer\nWHERE Citizenship = 'Australia';"}]},
{"db_name": "poker_player", "turns": [{"isUser": true, "text": "To which nationality does the people_id 1 belongs to ?"}, {"isUser": false, "query": "SELECT Nationality FROM people where People_ID = 1", "predict": "SELECT Nationality\nFROM people\nWHERE People_ID = 1;"}, {"isUser": true, "text": "Tell me the birthday date of Teodor Salparov ?"}, {"isUser": false, "query": "SELECT Birth_Date FROM people where Name = \"Teodor Salparov\"", "predict": "SELECT Birth_Date\nFROM people\nWHERE Name = 'Teodor Salparov';"}, {"isUser": true, "text": "Tell me the earnings of the people id 5?"}, {"isUser": false, "query": "SELECT Earnings FROM poker_player where People_ID   =   5", "predict": "SELECT Earnings\nFROM poker_player\nWHERE People_ID = 5;"}, {"isUser": true, "text": "What is the money rank of the tallest poker player ?"}, {"isUser": false, "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "predict": "SELECT Money_Rank\nFROM poker_player\nJOIN people ON poker_player.People_ID = people.People_ID\nWHERE Height = (SELECT MAX(Height) FROM people);"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "Which program had the least number of students enrolled?"}, {"isUser": false, "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT dp.degree_summary_name AS program_name, COUNT(se.student_id) AS num_students_enrolled\nFROM Degree_Programs dp\nLEFT JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY dp.degree_program_id\nORDER BY num_students_enrolled\nLIMIT 1;"}, {"isUser": true, "text": "What is the degree ID for architecto?"}, {"isUser": false, "query": "SELECT degree_program_id from Degree_Programs where degree_summary_description  =  'architecto'", "predict": "SELECT degree_program_id\nFROM Degree_Programs\nWHERE degree_summary_name = 'Architecto';"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "Which programs has the student by the first name Timmothy enrolled?"}, {"isUser": false, "query": "SELECT T2.degree_program_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE T1.first_name  =  \"Timmothy\"", "predict": "SELECT dp.degree_summary_name\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nJOIN Students s ON se.student_id = s.student_id\nWHERE s.first_name = 'Timmothy';"}, {"isUser": true, "text": "Which date did he register and also which date did he leave?"}, {"isUser": false, "query": "SELECT date_first_registered, date_left FROM Students WHERE first_name  =  \"Timmothy\"", "predict": "SELECT s.date_first_registered, s.date_left\nFROM Students s\nWHERE s.first_name = 'Timmothy';"}, {"isUser": true, "text": "What is the middle name of the student with email address johns.unique@example.net?"}, {"isUser": false, "query": "SELECT middle_name FROM Students WHERE email_address  =  \"johns.unique@example.net\"", "predict": "SELECT s.middle_name\nFROM Students s\nWHERE s.email_address = 'johns.unique@example.net';"}]},
{"db_name": "pets_1", "turns": [{"isUser": true, "text": "Hi. What are the different types of pets?"}, {"isUser": false, "query": "SELECT distinct PetType from Pets", "predict": "SELECT DISTINCT PetType\nFROM Pets;"}, {"isUser": true, "text": "Between the cats and dogs, how many of them are dogs?"}, {"isUser": false, "query": "SELECT count ( * )   from Pets where PetType = \"dog\"", "predict": "SELECT COUNT(*)\nFROM Pets\nWHERE PetType = 'Dog';"}, {"isUser": true, "text": "What are the ages of the 2 dogs?"}, {"isUser": false, "query": "SELECT pet_age  from Pets where PetType = \"dog\"", "predict": "SELECT pet_age\nFROM Pets\nWHERE PetType = 'Dog'\nLIMIT 2;"}, {"isUser": true, "text": "How much does the youngest dog, the 1 year old, weigh?"}, {"isUser": false, "query": "SELECT weight  from Pets where PetType = \"dog\" and pet_age  =   ( select min ( pet_age )  from Pets where PetType = \"dog\" ) ", "predict": "SELECT weight\nFROM Pets\nWHERE PetType = 'Dog' AND pet_age = 1;"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "Could you tell me the last names of all the students who live in the state of North Carolina?"}, {"isUser": false, "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina'", "predict": "SELECT last_name\nFROM Students\nJOIN Addresses ON Students.current_address_id = Addresses.address_id\nWHERE Addresses.state_province_county = 'North Carolina';"}, {"isUser": true, "text": "What about their first names?"}, {"isUser": false, "query": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina'", "predict": "SELECT first_name\nFROM Students\nJOIN Addresses ON Students.current_address_id = Addresses.address_id\nWHERE Addresses.state_province_county = 'North Carolina';"}, {"isUser": true, "text": "What are the last names of the students who live in North Carolina but have not registered in any degree program?"}, {"isUser": false, "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id", "predict": "SELECT last_name\nFROM Students\nJOIN Addresses ON Students.current_address_id = Addresses.address_id\nWHERE Addresses.state_province_county = 'North Carolina'\nAND Students.student_id NOT IN (SELECT student_id FROM Student_Enrolment);"}, {"isUser": true, "text": "What are their first names?"}, {"isUser": false, "query": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id", "predict": "SELECT first_name\nFROM Students\nJOIN Addresses ON Students.current_address_id = Addresses.address_id\nWHERE Addresses.state_province_county = 'North Carolina'\nAND Students.student_id NOT IN (SELECT student_id FROM Student_Enrolment);"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "find the name of loser and winner who played in the match with the greatest number of minutes"}, {"isUser": false, "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "predict": "SELECT loser_name, winner_name\nFROM matches\nWHERE minutes = (SELECT MAX(minutes) FROM matches);"}, {"isUser": true, "text": "what were the player's scores?"}, {"isUser": false, "query": "SELECT score FROM matches ORDER BY minutes DESC LIMIT 1", "predict": "SELECT score\nFROM matches\nWHERE minutes = (SELECT MAX(minutes) FROM matches);"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "What are all the car models available?"}, {"isUser": false, "query": "select distinct Model from car_names", "predict": "SELECT Model\nFROM model_list;"}, {"isUser": true, "text": "Which of those distinct models are produced after 1980?"}, {"isUser": false, "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model   =   T2.model JOIN CARS_DATA AS T3 ON T2.MakeId   =   T3.id WHERE T3.year  >  1980", "predict": "SELECT DISTINCT Model\nFROM model_list\nWHERE ModelId IN (SELECT ModelId FROM cars_data WHERE Year > 1980);"}]},
{"db_name": "network_1", "turns": [{"isUser": true, "text": "which grade has the \nmost high schoolers"}, {"isUser": false, "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT grade, COUNT(*) AS num_highschoolers\nFROM Highschooler\nGROUP BY grade\nORDER BY num_highschoolers DESC\nLIMIT 1;"}, {"isUser": true, "text": "what are the name of high schoolers in grade 9"}, {"isUser": false, "query": "SELECT name FROM Highschooler WHERE grade  =  9", "predict": "SELECT name\nFROM Highschooler\nWHERE grade = 9;"}, {"isUser": true, "text": "what grade is tiffany"}, {"isUser": false, "query": "SELECT grade FROM Highschooler WHERE name  =  \"Tiffany\"", "predict": "SELECT grade\nFROM Highschooler\nWHERE name = 'Tiffany';"}, {"isUser": true, "text": "how many high schoolers in grade 9"}, {"isUser": false, "query": "SELECT count ( * )  FROM Highschooler WHERE grade  =  9", "predict": "SELECT COUNT(*) AS num_highschoolers_grade_9\nFROM Highschooler\nWHERE grade = 9;"}, {"isUser": true, "text": "what grade is gabriel | Did you mean the Gabriel with ID 1689? | yes"}, {"isUser": false, "query": "SELECT grade FROM Highschooler WHERE name  =  \"Gabriel\" AND ID  =  1689", "predict": "SELECT grade\nFROM Highschooler\nWHERE ID = 1689;"}, {"isUser": true, "text": "What ID is Tiffany?"}, {"isUser": false, "query": "SELECT ID FROM Highschooler WHERE name  =  \"Tiffany\"", "predict": "SELECT ID\nFROM Highschooler\nWHERE name = 'Tiffany';"}, {"isUser": true, "text": "Which high schooler has ID of 1510?"}, {"isUser": false, "query": "SELECT name FROM Highschooler WHERE ID  =  1510", "predict": "SELECT name\nFROM Highschooler\nWHERE ID = 1510;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "Show  me the first and last name whose id number 1 | Do you mean the owner id is 1 or dog id is 1? | owner id please."}, {"isUser": false, "query": "SELECT T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.owner_id   =  1", "predict": "SELECT first_name, last_name\nFROM Owners\nWHERE owner_id = 1;"}, {"isUser": true, "text": "name the dog which  aged 6?"}, {"isUser": false, "query": "SELECT name  FROM Dogs  WHERE age  =  6", "predict": "SELECT name\nFROM Dogs\nWHERE age = 6;"}, {"isUser": true, "text": "name the dog having age more than 5"}, {"isUser": false, "query": "SELECT  name  FROM  Dogs WHERE age >5", "predict": "SELECT name\nFROM Dogs\nWHERE age > 5;"}, {"isUser": true, "text": "which dogs are owned by someone who lives in virginia? List the name."}, {"isUser": false, "query": "SELECT T2.name  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   = \"Virginia\"", "predict": "SELECT d.name\nFROM Dogs d\nJOIN Owners o ON d.owner_id = o.owner_id\nWHERE o.state = 'Virginia';"}]},
{"db_name": "student_transcripts_tracking", "turns": [{"isUser": true, "text": "Which cause has the least enrollment? | Do you want the course id or course name? | the course name"}, {"isUser": false, "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id   =   T2.course_id GROUP BY T1.course_name ORDER BY count ( * )  LIMIT 1", "predict": "SELECT c.course_name, COUNT(sec_c.student_enrolment_id) AS enrolment_count\nFROM Courses c\nLEFT JOIN Sections sec ON c.course_id = sec.course_id\nLEFT JOIN Student_Enrolment_Courses sec_c ON c.course_id = sec_c.course_id\nGROUP BY c.course_name\nORDER BY enrolment_count\nLIMIT 1;"}, {"isUser": true, "text": "What is the course ID of Math?"}, {"isUser": false, "query": "SELECT course_id from courses where course_name  =  \"math\"", "predict": "SELECT course_id\nFROM Courses\nWHERE course_name = 'Math';"}, {"isUser": true, "text": "How many students enrolled a course with the id of 14"}, {"isUser": false, "query": "SELECT  count ( * )  FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id   =   T2.course_id GROUP BY T1.course_name having T1.course_id  =  14", "predict": "SELECT COUNT(*) AS student_count\nFROM Student_Enrolment_Courses\nWHERE course_id = 14;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "how many country code in the city table | Do  you  want  to  know  the distinct country code? | how many language in the countrylanguage table"}, {"isUser": false, "query": "SELECT count ( distinct  Language )  from countrylanguage", "predict": "SELECT COUNT(DISTINCT CountryCode) AS NumCountryCodes\nFROM city;"}, {"isUser": true, "text": "what the highest percentage in the countrylanguage table"}, {"isUser": false, "query": "SELECT max ( Percentage )  from countrylanguage", "predict": "SELECT MAX(Percentage) AS HighestPercentage\nFROM countrylanguage;"}]},
{"db_name": "network_1", "turns": [{"isUser": true, "text": "Show the names of all of the high schoolers."}, {"isUser": false, "query": "select name from highschooler", "predict": "SELECT name\nFROM Highschooler;"}, {"isUser": true, "text": "Which of the high schoolers are friends with Kyle?"}, {"isUser": false, "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "predict": "SELECT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nWHERE f.friend_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');"}, {"isUser": true, "text": "What is Kyle's ID?"}, {"isUser": false, "query": "SELECT id FROM highschooler where name  =  \"Kyle\"", "predict": "SELECT ID\nFROM Highschooler\nWHERE name = 'Kyle';"}, {"isUser": true, "text": "Who has the ID 1709?"}, {"isUser": false, "query": "SELECT name FROM highschooler where id  =  1709", "predict": "SELECT name\nFROM Highschooler\nWHERE ID = 1709;"}, {"isUser": true, "text": "Who else is Jordan friends with?"}, {"isUser": false, "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Jordan\"", "predict": "SELECT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.friend_id\nWHERE f.student_id = (SELECT ID FROM Highschooler WHERE name = 'Jordan')\nAND h.name != 'Jordan';"}, {"isUser": true, "text": "Who is friends with Gabriel?"}, {"isUser": false, "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Gabriel\"", "predict": "SELECT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nWHERE f.friend_id = (SELECT ID FROM Highschooler WHERE name = 'Gabriel');"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "Hi! which countries are in europe?"}, {"isUser": false, "query": "SELECT distinct T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe'", "predict": "SELECT CountryName\nFROM countries\nWHERE Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe');"}, {"isUser": true, "text": "How many car manufacturers are in each of those countries?"}, {"isUser": false, "query": "SELECT T1.CountryName, count ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe' GROUP BY T1.CountryName", "predict": "SELECT c.CountryName, COUNT(cm.Id) AS NumCarMakers\nFROM countries c\nLEFT JOIN car_makers cm ON c.CountryName = cm.Country\nWHERE c.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe')\nGROUP BY c.CountryName;"}, {"isUser": true, "text": "which of those has at least 3?"}, {"isUser": false, "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe' GROUP BY T1.CountryName HAVING count ( * )    > =    3", "predict": "SELECT c.CountryName, COUNT(cm.Id) AS NumCarMakers\nFROM countries c\nLEFT JOIN car_makers cm ON c.CountryName = cm.Country\nWHERE c.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe')\nGROUP BY c.CountryName\nHAVING COUNT(cm.Id) >= 3;"}, {"isUser": true, "text": "how many do each of those have?"}, {"isUser": false, "query": "SELECT T1.CountryName, count ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe' GROUP BY T1.CountryName HAVING count ( * )    > =    3", "predict": "SELECT c.CountryName, COUNT(cm.Id) AS NumCarMakers\nFROM countries c\nLEFT JOIN car_makers cm ON c.CountryName = cm.Country\nWHERE c.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe')\nGROUP BY c.CountryName\nHAVING COUNT(cm.Id) >= 3;"}, {"isUser": true, "text": "how many total car manufacturers does europe have?"}, {"isUser": false, "query": "SELECT count ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe'", "predict": "SELECT COUNT(DISTINCT cm.Id) AS TotalCarMakers\nFROM car_makers cm\nWHERE cm.Country IN (SELECT CountryName FROM countries WHERE Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe'));"}, {"isUser": true, "text": "what about america?"}, {"isUser": false, "query": "SELECT count ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'america'", "predict": "SELECT COUNT(DISTINCT cm.Id) AS TotalCarMakers\nFROM car_makers cm\nWHERE cm.Country IN (SELECT CountryName FROM countries WHERE Continent = (SELECT ContId FROM continents WHERE Continent = 'America'));"}, {"isUser": true, "text": "what are those?"}, {"isUser": false, "query": "SELECT T3.Fullname FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'america'", "predict": "SELECT CountryName\nFROM countries\nWHERE Continent = (SELECT ContId FROM continents WHERE Continent = 'America');"}]},
{"db_name": "museum_visit", "turns": [{"isUser": true, "text": "Hello there!  Can you tell me the total number of visitors who did not visit any museum that was opened after 2010?"}, {"isUser": false, "query": "SELECT count ( * )  FROM visitor WHERE id NOT IN  ( SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID   =   t2.Museum_ID WHERE t1.open_year  >  2010 ) ", "predict": "SELECT COUNT(DISTINCT v.ID) AS Total_Visitors\nFROM visitor v\nWHERE v.ID NOT IN (\n    SELECT visitor_ID\n    FROM visit\n    JOIN museum ON visit.Museum_ID = museum.Museum_ID\n    WHERE CAST(museum.Open_Year AS INTEGER) > 2010\n);"}, {"isUser": true, "text": "Can you please provide me with the names and membership levels of these three members?"}, {"isUser": false, "query": "SELECT name, level_of_membership FROM visitor WHERE id NOT IN  ( SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID   =   t2.Museum_ID WHERE t1.open_year  >  2010 ) ", "predict": "SELECT v.Name, v.Level_of_membership\nFROM visitor v\nWHERE v.ID NOT IN (\n    SELECT visitor_ID\n    FROM visit\n    JOIN museum ON visit.Museum_ID = museum.Museum_ID\n    WHERE CAST(museum.Open_Year AS INTEGER) > 2010\n)\nLIMIT 3;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "Hi! How many owners temporarily do not have dogs?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Owners WHERE owner_id NOT IN  (  SELECT owner_id FROM Dogs  ) ", "predict": "SELECT COUNT(*) AS num_owners_without_dogs\nFROM Owners\nWHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)"}, {"isUser": true, "text": "What are their full names?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Owners WHERE owner_id NOT IN  (  SELECT owner_id FROM Dogs  ) ", "predict": "SELECT first_name || ' ' || last_name AS full_name\nFROM Owners\nWHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)"}]},
{"db_name": "tvshow", "turns": [{"isUser": true, "text": "Which cartoon aired first?"}, {"isUser": false, "query": "SELECT title  FROM cartoon ORDER BY original_air_date LIMIT 1", "predict": "SELECT Title, MIN(Original_air_date) AS First_Air_Date\nFROM Cartoon;"}, {"isUser": true, "text": "What was the last cartoon to air?"}, {"isUser": false, "query": "SELECT title  FROM cartoon ORDER BY original_air_date desc LIMIT 1", "predict": "SELECT Title, MAX(Original_air_date) AS Last_Air_Date\nFROM Cartoon;"}, {"isUser": true, "text": "What channel was it on?"}, {"isUser": false, "query": "SELECT channel FROM cartoon ORDER BY original_air_date desc LIMIT 1", "predict": "SELECT Title, Channel\nFROM Cartoon\nWHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon);"}, {"isUser": true, "text": "What is the production code?"}, {"isUser": false, "query": "SELECT production_code FROM cartoon ORDER BY original_air_date desc LIMIT 1", "predict": "SELECT Title, Production_code\nFROM Cartoon\nWHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon);"}]},
{"db_name": "singer", "turns": [{"isUser": true, "text": "which singers were born before 1945?"}, {"isUser": false, "query": "SELECT * FROM singer WHERE Birth_Year  <  1945", "predict": "SELECT Name\nFROM singer\nWHERE Birth_Year < 1945;"}, {"isUser": true, "text": "how about after 1955?"}, {"isUser": false, "query": "SELECT * FROM singer WHERE Birth_Year  >  1955", "predict": "SELECT Name\nFROM singer\nWHERE Birth_Year > 1955;"}, {"isUser": true, "text": "which singers born before 1945 and after 1955 have the same citizenship? | Did you mean the singers born before 1945 OR after 1955? | what is the citizenship of the singers born before 1945?"}, {"isUser": false, "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945", "predict": "SELECT Name\nFROM singer\nWHERE (Birth_Year < 1945 OR Birth_Year > 1955)\nAND Citizenship IN (\n    SELECT Citizenship\n    FROM singer\n    GROUP BY Citizenship\n    HAVING COUNT(*) > 1\n);"}, {"isUser": true, "text": "and after 1955?"}, {"isUser": false, "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 or Birth_Year  >  1955", "predict": "SELECT Name\nFROM singer\nWHERE Birth_Year > 1955\nAND Citizenship IN (\n    SELECT Citizenship\n    FROM singer\n    WHERE Birth_Year > 1955\n    GROUP BY Citizenship\n    HAVING COUNT(*) > 1\n);"}, {"isUser": true, "text": "Which singers with a citizenship of United States were born before 1945?"}, {"isUser": false, "query": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'United States'", "predict": "SELECT Name\nFROM singer\nWHERE Birth_Year < 1945\nAND Citizenship = 'United States';"}, {"isUser": true, "text": "and after 1955"}, {"isUser": false, "query": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'United States' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'United States'", "predict": "SELECT Name\nFROM singer\nWHERE Birth_Year > 1955\nAND Citizenship = 'United States';"}, {"isUser": true, "text": "Which singers with a citizenship of France were born before 1945?"}, {"isUser": false, "query": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'France'", "predict": "SELECT Name\nFROM singer\nWHERE Birth_Year < 1945\nAND Citizenship = 'France';"}, {"isUser": true, "text": "and after 1955?"}, {"isUser": false, "query": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'France' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'France'", "predict": "SELECT Name\nFROM singer\nWHERE Birth_Year > 1955\nAND Citizenship = 'France';"}, {"isUser": true, "text": "Which singers with a citizenship of Chile were born before 1945 or after 1955?"}, {"isUser": false, "query": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'Chile' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'Chile'", "predict": "SELECT Name\nFROM singer\nWHERE (Birth_Year < 1945 OR Birth_Year > 1955)\nAND Citizenship = 'Chile';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "how many country there"}, {"isUser": false, "query": "select count ( * )  from Country", "predict": "SELECT COUNT(*) FROM country;"}, {"isUser": true, "text": "how many country languages there"}, {"isUser": false, "query": "select count ( distinct Language )  from countrylanguage", "predict": "SELECT COUNT(*) FROM countrylanguage;"}, {"isUser": true, "text": "what is the surface area of code AFG"}, {"isUser": false, "query": "select SurfaceArea from Country where Code  =  'AFG'", "predict": "SELECT SurfaceArea FROM country WHERE Code = 'AFG';"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "Hi, what is the population of the Caribbean?"}, {"isUser": false, "query": "SELECT sum ( Population )  FROM country WHERE Region  =  \"Caribbean\"", "predict": "SELECT SUM(Population) \nFROM country \nWHERE Continent = 'North America' \nOR Continent = 'South America';"}, {"isUser": true, "text": "What continents have an average life expectancy shorter than 72?"}, {"isUser": false, "query": "SELECT Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72", "predict": "SELECT Continent\nFROM country\nGROUP BY Continent\nHAVING AVG(LifeExpectancy) < 72;"}, {"isUser": true, "text": "Can you give me the total population for each of those continents?"}, {"isUser": false, "query": "SELECT sum ( Population ) ,  Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72", "predict": "SELECT Continent, SUM(Population) as TotalPopulation\nFROM country\nGROUP BY Continent\nHAVING AVG(LifeExpectancy) < 72;"}, {"isUser": true, "text": "What is the average life expectancy of those continents?"}, {"isUser": false, "query": "SELECT avg ( LifeExpectancy )  ,  Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72", "predict": "SELECT AVG(LifeExpectancy) as AverageLifeExpectancy\nFROM country\nWHERE Continent IN (\n    SELECT Continent\n    FROM country\n    GROUP BY Continent\n    HAVING AVG(LifeExpectancy) < 72\n);"}, {"isUser": true, "text": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?"}, {"isUser": false, "query": "SELECT sum ( Population )  ,  avg ( LifeExpectancy )  ,  Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72", "predict": "SELECT Continent, AVG(LifeExpectancy) as AverageLifeExpectancy, SUM(Population) as TotalPopulation\nFROM country\nGROUP BY Continent\nHAVING AVG(LifeExpectancy) < 72;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "Which street does  Nora Haley live?"}, {"isUser": false, "query": "SELECT street FROM Owners WHERE first_name  =  \"Nora\" and last_name  =  \"Haley\"", "predict": "SELECT street\nFROM Owners\nWHERE first_name = 'Nora' AND last_name = 'Haley';"}, {"isUser": true, "text": "What is her home phone number?"}, {"isUser": false, "query": "SELECT home_phone FROM Owners WHERE first_name  =  \"Nora\" and last_name  =  \"Haley\"", "predict": "SELECT home_phone\nFROM Owners\nWHERE first_name = 'Nora' AND last_name = 'Haley';"}, {"isUser": true, "text": "What is the email address of Jaclyn? | Do you mean the owner with first name Jaclyn? | Yes Jaclyn Stoltenberg"}, {"isUser": false, "query": "SELECT email_address FROM Owners WHERE first_name  =  \"Jaclyn\" and last_name  =  \"Stoltenberg\"", "predict": "SELECT email_address\nFROM Owners\nWHERE first_name = 'Jaclyn' AND last_name = 'Stoltenberg';"}, {"isUser": true, "text": "What is the first name of DuBuque?"}, {"isUser": false, "query": "SELECT first_name FROM Owners WHERE last_name  =  \"DuBuque\"", "predict": "SELECT first_name\nFROM Owners\nWHERE last_name = 'DuBuque';"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "What is the document id with least number of paragraphs?"}, {"isUser": false, "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count ( * )  ASC LIMIT 1", "predict": "SELECT Document_ID, COUNT(Paragraph_ID) AS Paragraph_Count\nFROM Paragraphs\nGROUP BY Document_ID\nORDER BY Paragraph_Count\nLIMIT 1;"}, {"isUser": true, "text": "and the document with the most number of paragraphs?"}, {"isUser": false, "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count ( * )  desc LIMIT 1", "predict": "SELECT Document_ID, COUNT(Paragraph_ID) AS Paragraph_Count\nFROM Paragraphs\nGROUP BY Document_ID\nORDER BY Paragraph_Count DESC\nLIMIT 1;"}, {"isUser": true, "text": "how many paragraphs are in that document with id of 2394?"}, {"isUser": false, "query": "select count ( paragraph_id )  from Paragraphs where Document_ID  =  2394", "predict": "SELECT COUNT(Paragraph_ID) AS Paragraph_Count\nFROM Paragraphs\nWHERE Document_ID = 2394;"}, {"isUser": true, "text": "What are the paragraph texts of those three paragraphs?"}, {"isUser": false, "query": "select Paragraph_Text from Paragraphs where Document_ID  =  2394", "predict": "SELECT Paragraph_Text\nFROM Paragraphs\nWHERE Document_ID = 2394\nLIMIT 3;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "can you tell me the email id of the owner id ? | Do you mean all owner id and all email address? | owner id 1"}, {"isUser": false, "query": "SELECT email_address from owners where owner_id  =  1", "predict": "SELECT email_address\nFROM Owners\nWHERE owner_id = 1;"}, {"isUser": true, "text": "what is the weight of dog id 1 ?"}, {"isUser": false, "query": "SELECT weight from dogs where dog_id  =  1", "predict": "SELECT weight\nFROM Dogs\nWHERE dog_id = 1;"}, {"isUser": true, "text": "Can you tell me age of dog id 1 ?"}, {"isUser": false, "query": "SELECT age from dogs where dog_id  =  1", "predict": "SELECT age\nFROM Dogs\nWHERE dog_id = 1;"}, {"isUser": true, "text": "Which owner has paid for the most treatments on his or her dogs ? List the owner id and last name."}, {"isUser": false, "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id JOIN Treatments AS T3 ON T2.dog_id   =   T3.dog_id GROUP BY T1.owner_id ORDER BY count ( * )  DESC LIMIT 1", "predict": "SELECT o.owner_id, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.last_name\nORDER BY COUNT(t.treatment_id) DESC\nLIMIT 1;"}]},
{"db_name": "wta_1", "turns": [{"isUser": true, "text": "How many matches played in 2013?"}, {"isUser": false, "query": "SELECT count ( * )  FROM matches WHERE YEAR   =   2013", "predict": "SELECT COUNT(*) AS total_matches\nFROM matches\nWHERE year = 2013;"}, {"isUser": true, "text": "How many matches played in 2016?"}, {"isUser": false, "query": "SELECT count ( * )  FROM matches WHERE YEAR   =   2016", "predict": "SELECT COUNT(*) AS total_matches\nFROM matches\nWHERE year = 2016;"}, {"isUser": true, "text": "What is the loser id  of petra kvitota? | Do  you mean \tloser  id | Yes"}, {"isUser": false, "query": "SELECT distinct loser_id  FROM  matches where loser_name   = \"Petra Kvitova\"", "predict": "SELECT player_id AS loser_id\nFROM players\nWHERE first_name = 'Petra' AND last_name = 'Kvitova';"}]},
{"db_name": "tvshow", "turns": [{"isUser": true, "text": "which countries tv channels are not playing any cartoon written todd casey"}, {"isUser": false, "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.written_by   =   'Todd Casey'", "predict": "SELECT DISTINCT Country\nFROM TV_Channel\nWHERE id NOT IN (\n    SELECT c.id\n    FROM Cartoon c\n    WHERE Written_by = 'Todd Casey'\n);"}, {"isUser": true, "text": "who directed the cartoon the rise of blue beetle  written by Michael Jelenic\t?"}, {"isUser": false, "query": "SELECT directed_by from cartoon where title  =  \"The Rise of the Blue Beetle!\" and written_by  =  \"Michael Jelenic\"", "predict": "SELECT Directed_by\nFROM Cartoon\nWHERE Title = 'The Rise of Blue Beetle' AND Written_by = 'Michael Jelenic';"}, {"isUser": true, "text": "whats the package option for TV channels in itally?"}, {"isUser": false, "query": "SELECT Package_Option from tv_channel where country  =  \"Italy\"", "predict": "SELECT Package_Option\nFROM TV_Channel\nWHERE Country = 'Italy';"}]},
{"db_name": "concert_singer", "turns": [{"isUser": true, "text": "Show the name and the release year of the song by the youngest singer"}, {"isUser": false, "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "predict": "SELECT s.Name, s.Song_release_year\nFROM singer s\nWHERE s.Age = (SELECT MIN(Age) FROM singer);"}, {"isUser": true, "text": "Ok. Can you show me the name and the release year of the song by the oldest singer"}, {"isUser": false, "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age desc LIMIT 1", "predict": "SELECT s.Name, s.Song_release_year\nFROM singer s\nWHERE s.Age = (SELECT MAX(Age) FROM singer);"}, {"isUser": true, "text": "Can you also show me the name of the youngest singer"}, {"isUser": false, "query": "SELECT Name FROM singer ORDER BY age LIMIT 1", "predict": "SELECT s.Name\nFROM singer s\nWHERE s.Age = (SELECT MIN(Age) FROM singer);"}, {"isUser": true, "text": "And what is the name of the oldest singer and his age"}, {"isUser": false, "query": "SELECT Name, age FROM singer ORDER BY age desc LIMIT 1", "predict": "SELECT s.Name, s.Age\nFROM singer s\nWHERE s.Age = (SELECT MAX(Age) FROM singer);"}, {"isUser": true, "text": "and what country was he from?"}, {"isUser": false, "query": "SELECT Country FROM singer ORDER BY age desc LIMIT 1", "predict": "SELECT s.Country\nFROM singer s\nWHERE s.Age = (SELECT MAX(Age) FROM singer);"}, {"isUser": true, "text": "give me the names of the singers from United States"}, {"isUser": false, "query": "SELECT Name FROM singer where country  =  'United States'", "predict": "SELECT Name\nFROM singer\nWHERE Country = 'United States';"}]},
{"db_name": "pets_1", "turns": [{"isUser": true, "text": "hi, what number of students have a dog as a pet?"}, {"isUser": false, "query": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'dog'", "predict": "SELECT COUNT(DISTINCT StuID)\nFROM Has_Pet\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE PetType = 'dog';"}, {"isUser": true, "text": "and what about the number that have a cat as a pet?"}, {"isUser": false, "query": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat'", "predict": "SELECT COUNT(DISTINCT StuID)\nFROM Has_Pet\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE PetType = 'cat';"}, {"isUser": true, "text": "Great. Can you tell me the first names of these 3 students?"}, {"isUser": false, "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' OR T3.pettype   =   'dog'", "predict": "SELECT DISTINCT Fname\nFROM Student\nWHERE StuID IN (\n    SELECT StuID\n    FROM Has_Pet\n    JOIN Pets ON Has_Pet.PetID = Pets.PetID\n    WHERE PetType = 'cat'\n    LIMIT 3\n);"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "Which states have professionals living there?"}, {"isUser": false, "query": "SELECT state FROM Professionals", "predict": "SELECT DISTINCT state\nFROM Professionals;"}, {"isUser": true, "text": "May I have a list of states that has both owners and professionals living there?"}, {"isUser": false, "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "predict": "SELECT DISTINCT state\nFROM Owners\nWHERE state IN (SELECT DISTINCT state FROM Professionals);"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "List the first name of professionals"}, {"isUser": false, "query": "SELECT DISTINCT first_name FROM professionals", "predict": "SELECT first_name\nFROM Professionals;"}, {"isUser": true, "text": "List the first name of professionals along with the description"}, {"isUser": false, "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code", "predict": "SELECT first_name, role_code\nFROM Professionals;"}, {"isUser": true, "text": "List the first name of professionals along with the description of the treatment they have done?"}, {"isUser": false, "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code", "predict": "SELECT P.first_name, T.treatment_type_code\nFROM Professionals AS P\nJOIN Treatments AS T ON P.professional_id = T.professional_id;"}]},
{"db_name": "course_teach", "turns": [{"isUser": true, "text": "how many course id numbers"}, {"isUser": false, "query": "SELECT count ( Course_ID )  FROM course", "predict": "SELECT COUNT(DISTINCT Course_ID) AS Number_of_Course_IDs\nFROM course;"}, {"isUser": true, "text": "what are the courses"}, {"isUser": false, "query": "SELECT Course FROM course", "predict": "SELECT Course\nFROM course;"}, {"isUser": true, "text": "great, how many teachers available to conduct the course"}, {"isUser": false, "query": "SELECT count ( Teacher_ID )  FROM teacher", "predict": "SELECT COUNT(DISTINCT Teacher_ID) AS Number_of_Teachers\nFROM course_arrange;"}, {"isUser": true, "text": "which teacher takes math class"}, {"isUser": false, "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID WHERE T2.Course   =   \"Math\"", "predict": "SELECT t.Name\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID\nWHERE c.Course = 'Math';"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "Can you list how many car makers are on each continent please? | Do you want the name of the continent and the count of car makers on each of them? | Yes please, in a table if possible?"}, {"isUser": false, "query": "SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country GROUP BY T1.Continent", "predict": "SELECT c.Continent, COUNT(cm.Id) AS CarMakersCount\nFROM continents c\nLEFT JOIN car_makers cm ON c.ContId = cm.Country\nGROUP BY c.Continent;"}, {"isUser": true, "text": "Can you list the full name and country of every car maker from asia? | Do you want the full name and country name of the car makers from asia? | Yes please"}, {"isUser": false, "query": "SELECT T3.fullname,  T2.countryName FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country where T1.continent  =  \"asia\"", "predict": "SELECT FullName, Country\nFROM car_makers\nWHERE Country = 'Asia';"}, {"isUser": true, "text": "What about from Europe?"}, {"isUser": false, "query": "SELECT T3.fullname,  T2.countryName FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country where T1.continent  =  \"europe\"", "predict": "SELECT FullName, Country\nFROM car_makers\nWHERE Country = 'Europe';"}, {"isUser": true, "text": "How about America?"}, {"isUser": false, "query": "SELECT T3.fullname,  T2.countryName FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country where T1.continent  =  \"america\"", "predict": "SELECT FullName, Country\nFROM car_makers\nWHERE Country = 'America';"}, {"isUser": true, "text": "How many car makers are there total?"}, {"isUser": false, "query": "select count ( * )  from car_makers", "predict": "SELECT COUNT(Id) AS TotalCarMakers\nFROM car_makers;"}]},
{"db_name": "dog_kennels", "turns": [{"isUser": true, "text": "Hi there! Can you tell me how many different professional IDs are on this list?"}, {"isUser": false, "query": "SELECT count ( distinct professional_id )  from professionals", "predict": "SELECT COUNT(DISTINCT professional_id) AS total_professional_ids\nFROM Professionals;"}, {"isUser": true, "text": "Great!  Could you update this list to include both the first names and treatment type codes for each of these professionals IDs? | Do you want the ids, first name for all professionals, along with the type codes of the treatment they have done? | Yes please!"}, {"isUser": false, "query": "SELECT T1.professional_id, T1.first_name ,  T3.treatment_type_code FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code", "predict": "SELECT p.professional_id, p.first_name, t.treatment_type_code\nFROM Professionals p\nJOIN Treatments tr ON p.professional_id = tr.professional_id\nJOIN Treatment_Types t ON tr.treatment_type_code = t.treatment_type_code;"}, {"isUser": true, "text": "Excellent!  Can you filter this list to show me just the entries for the 5 most recent treatments?"}, {"isUser": false, "query": "SELECT T1.professional_id, T1.first_name, T3.treatment_type_code FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code order by T2.date_of_treatment desc limit 5", "predict": "SELECT p.professional_id, p.first_name, t.treatment_type_code\nFROM Professionals p\nJOIN Treatments tr ON p.professional_id = tr.professional_id\nJOIN Treatment_Types t ON tr.treatment_type_code = t.treatment_type_code\nORDER BY tr.date_of_treatment DESC\nLIMIT 5;"}]},
{"db_name": "battle_death", "turns": [{"isUser": true, "text": "Show the names of all the battles."}, {"isUser": false, "query": "SELECT name  FROM battle", "predict": "SELECT name FROM battle;"}, {"isUser": true, "text": "Show the names of all the battles and their Bulgarian commanders."}, {"isUser": false, "query": "SELECT name, bulgarian_commander FROM battle", "predict": "SELECT name, bulgarian_commander FROM battle;"}, {"isUser": true, "text": "Show the names of all the battles with no ships lost in the English Channel."}, {"isUser": false, "query": "SELECT name  FROM battle EXCEPT SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "predict": "SELECT b.name\nFROM battle b\nLEFT JOIN ship s ON b.id = s.lost_in_battle\nWHERE s.location IS NULL OR s.location != 'English Channel';"}, {"isUser": true, "text": "Show the names and results of all battles with no ships lost in the English channel."}, {"isUser": false, "query": "SELECT name , RESULT FROM battle EXCEPT SELECT T1.name , T1.result  FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "predict": "SELECT b.name, b.result\nFROM battle b\nLEFT JOIN ship s ON b.id = s.lost_in_battle\nWHERE s.location IS NULL OR s.location != 'English Channel';"}, {"isUser": true, "text": "Show the names,results, and Bulgarian commanders of all battles with no ships lost in the English channel."}, {"isUser": false, "query": "SELECT name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "predict": "SELECT b.name, b.result, b.bulgarian_commander\nFROM battle b\nLEFT JOIN ship s ON b.id = s.lost_in_battle\nWHERE s.location IS NULL OR s.location != 'English Channel';"}, {"isUser": true, "text": "What are the dates of all the battles with the result of Bulgarian victory."}, {"isUser": false, "query": "SELECT date FROM battle WHERE result  =  \"Bulgarian victory\"", "predict": "SELECT date\nFROM battle\nWHERE result = 'Bulgarian victory';"}]},
{"db_name": "network_1", "turns": [{"isUser": true, "text": "how many Likes there"}, {"isUser": false, "query": "SELECT count ( * )  FROM Likes", "predict": "SELECT COUNT(*) \nFROM Likes;"}, {"isUser": true, "text": "how many friends there"}, {"isUser": false, "query": "SELECT count ( * )  FROM friend", "predict": "SELECT COUNT(*) \nFROM Friend;"}, {"isUser": true, "text": "what is the  friend id of  1689 | Do you mean the id of students with friend id 1689? | yes sir"}, {"isUser": false, "query": "SELECT student_id FROM friend where friend_id  =  1689", "predict": "SELECT student_id\nFROM Friend\nWHERE friend_id = 1689;"}]},
{"db_name": "cre_Doc_Template_Mgt", "turns": [{"isUser": true, "text": "Show me the documents"}, {"isUser": false, "query": "SELECT * FROM Documents", "predict": "SELECT * FROM Documents;"}, {"isUser": true, "text": "Show me the documents using template"}, {"isUser": false, "query": "SELECT * FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID   =   T2.Template_ID", "predict": "SELECT d.Document_ID, d.Document_Name, d.Document_Description, d.Other_Details, t.Template_ID, t.Version_Number, t.Template_Type_Code, t.Date_Effective_From, t.Date_Effective_To, t.Template_Details\nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID;"}, {"isUser": true, "text": "How many of them are using the template with code 'PPT'?"}, {"isUser": false, "query": "SELECT count ( * )  FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID   =   T2.Template_ID WHERE T2.Template_Type_Code   =   'PPT'", "predict": "SELECT COUNT(*) \nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nWHERE t.Template_Type_Code = 'PPT';"}]},
{"db_name": "car_1", "turns": [{"isUser": true, "text": "whats the average acceleration"}, {"isUser": false, "query": "SELECT AVG ( Accelerate )  FROM cars_data", "predict": "SELECT AVG(Accelerate) AS AverageAcceleration FROM cars_data;"}, {"isUser": true, "text": "whats the average horse power"}, {"isUser": false, "query": "SELECT AVG ( Horsepower )  FROM cars_data", "predict": "SELECT AVG(Horsepower) AS AverageHorsepower FROM cars_data;"}, {"isUser": true, "text": "for the cars with 4 cylinders which model has the largest horsepower"}, {"isUser": false, "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "predict": "SELECT Model\nFROM cars_data\nWHERE Cylinders = 4\nORDER BY Horsepower DESC\nLIMIT 1;"}]},
{"db_name": "world_1", "turns": [{"isUser": true, "text": "what are the official unique official language spoken in the country | In which country? | what are the unique official languages spoken that are found before 1930"}, {"isUser": false, "query": "SELECT count ( DISTINCT T2.Language )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial   =   \"T\"", "predict": "SELECT DISTINCT Language\nFROM countrylanguage\nWHERE IsOfficial = 'T';"}, {"isUser": true, "text": "what is the total number of unique official languages spoken in the countries that are founded before 1930"}, {"isUser": false, "query": "SELECT count ( DISTINCT T2.Language )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial   =   \"T\"", "predict": "SELECT COUNT(DISTINCT Language)\nFROM countrylanguage\nWHERE CountryCode IN (\n    SELECT Code\n    FROM country\n    WHERE IndepYear < 1930\n);"}]}]